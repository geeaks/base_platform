/**
 *
 * @author gavin
 * @date 2014-4-18 下午2:29:35
 */
package com.ucf.customer.interceptor;

import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Map;
import java.util.TimeZone;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;
import com.alibaba.fastjson.JSONObject;
import com.dp.client.dpApiHelper;
import com.dp.client.st.DataSt;
import com.dp.client.st.THostInfoSt;
import com.ucf.customer.service.ProtectionSystemService;
import com.ucf.customer.utils.ProtectionSystem;
import com.ucf.customer.utils.exception.P2PCustomerException;
import com.ucf.platform.framework.core.log.UcfLogger;
import com.ucf.platform.framework.core.log.UcfLoggerFactory;

@Repository
public class ProtectionSystemInterceptor extends HandlerInterceptorAdapter {
	@Override
	public void postHandle(HttpServletRequest request,
			HttpServletResponse response, Object handler,
			ModelAndView modelAndView) throws Exception {
		super.postHandle(request, response, handler, modelAndView);
		request.removeAttribute("payPassword");
	}
	private static UcfLogger LOGGER = UcfLoggerFactory.getLogger(ProtectionSystemInterceptor.class);
	
	@Autowired
	private ProtectionSystemService protectionSystemServiceImpl;

	public boolean preHandle(HttpServletRequest request,
			HttpServletResponse response, Object handler) throws Exception {

		request.setCharacterEncoding("UTF-8");
		response.setCharacterEncoding("UTF-8");
		response.setContentType("text/html;charset=UTF-8");
		// 后台session控制
		String[] isFilters = new String[] {"/member/cashier/login.htm","/member/p2p/addBankCard.do","/member/valiPwd/validatePwd.htm","/member/login/login.htm",
				"/member/bank/firstAddBankCardPro.htm","/member/bank/add.htm","/member/bank/modify.htm","/member/pwd/modifypaypwd.htm","/member/pwd/findPayPwdSet.htm","/member/p2p/setPayPwd.do",
				"/member/pwd/modifylgnPwd.htm","/member/bank/modify.htm","/member/p2p/modifyPayPwd","/member/p2p/setPayPwd","/member/bank/delete.htm","/member/withdraw/withdraw.htm"};
		String[] isBeforeFilters = new String[] {"/member/bank/firstAddBankCardPro.htm","/member/","/member/cashier/toLogin.htm","/member/p2p/toAddBankCard","/member","/member/","/member/login/index.htm","/member/reg/active.htm","/member/bank/firstaddbank.htm",
				"/member/bank/add.htm","/member/bank/modify.htm","/member/pwd/index.htm","/member/pwd/pwdmodify.htm","/member/pwd/paypwdmodify.htm","/member/pwd/findPayPwdCheck.htm","/member/bank/modify.htm","/member/p2p/toReturnModifyPayPwd",
				"/member/p2p/toModifyPayPwd","/member/p2p/toSetPayPwd","/member/bank/delete.htm","/member/withdraw/index.htm","/member/p2p/toSetPayPwd.do"};
		String uri = request.getRequestURI();
		if ("/member/".equals(uri) ||uri.indexOf("p2p")>0|| uri.indexOf("withdraw")>0||uri.indexOf("valiPwd")>0||uri.indexOf("login")>0||uri.indexOf("bank")>0
				||uri.indexOf("pwdmodify")>0 ||uri.indexOf("modifylgnPwd")>0  ||uri.indexOf("cashier")>0||uri.indexOf("paypwd")>0) {
			//if(request.getSession().getAttribute("isVal")==null||isFilters[1].equals(uri)){
				request.getSession().removeAttribute("isVal");
				for (String s : isFilters) {
					if ((uri).equals(s)) {
						if(("/member/bank/add.htm".equals(uri)||"/member/bank/modify.htm".equals(uri)
								||"/member/bank/modify.htm".equals(uri)||"/member/bank/delete.htm".equals(uri))&&"GET".equals(request.getMethod())){
							continue;
						}
						//第1个 密码控件
						String pan = request.getParameter("pan");
						String szBackData = request.getParameter("pwd");
						String len = request.getParameter("len");
						String hostip = protectionSystemServiceImpl.getProtectionIp();
						String fingerprint = request.getParameter("pcData");
						String isMac = request.getParameter("isMac");
						//第2个 密码控件
						String pan1 = request.getParameter("pan1");
						String szBackData1 = request.getParameter("pwd1");
						String len1 = request.getParameter("len1");
						String fingerprint1 = request.getParameter("pcData1");
						String isMac1 = request.getParameter("isMac1");
						//第3个 密码控件
						String pan2 = request.getParameter("pan2");
						String szBackData2 = request.getParameter("pwd2");
						String len2 = request.getParameter("len2");
						String fingerprint2 = request.getParameter("pcData2");
						String isMac2 = request.getParameter("isMac2");
						try {
							//第1个 密码控件
							Map<String, String> result = ProtectionSystem.data(pan, szBackData, len, hostip, protectionSystemServiceImpl.getProtectionPort(), fingerprint, isMac);
							if (!(null!=result&&result.containsKey("szErrMsg")&&"0".equals(result.get("szErrMsg")))) {
								LOGGER.info("pwd controller error result: "+JSONObject.toJSONString(result));
								if(result.get("szErrMsg").equals("2015")){
									request.setAttribute("msg", "请不要频繁重复登录");
								}else if(result.get("szErrMsg").equals("2016")||result.get("szErrMsg").equals("1001")){
									request.setAttribute("msg", "页面时间太久");
								}else if(result.get("szErrMsg").equals("-1")){
									request.setAttribute("msg", "认证服务网络异常");
								}else{
									request.setAttribute("msg", "密码解析失败");
								}
								LOGGER.error("密码解析失败原因：" + result.get("szErrMsg"));
//								throw new P2PCustomerException();
							}
							request.setAttribute("payPassword", result.get("szData"));
							//第2个 密码控件
							if(szBackData1!=null){
								Map<String, String> result1 = ProtectionSystem.data(pan1, szBackData1, len1, hostip, protectionSystemServiceImpl.getProtectionPort(), fingerprint1, isMac1);
								if (!(null!=result1&&result1.containsKey("szErrMsg")&&"0".equals(result1.get("szErrMsg")))) {
									request.setAttribute("msg", "密码解析失败");
									LOGGER.error("密码解析失败原因：" + result1.get("szErrMsg"));
									throw new P2PCustomerException();
								}
								request.setAttribute("payPassword1", result1.get("szData"));
							}
							//第3个 密码控件
							if(szBackData2!=null){
								Map<String, String> result2 = ProtectionSystem.data(pan2, szBackData2, len2, hostip, protectionSystemServiceImpl.getProtectionPort(), fingerprint2, isMac2);
								if (!(null!=result2&&result2.containsKey("szErrMsg")&&"0".equals(result2.get("szErrMsg")))) {
									request.setAttribute("msg", "密码解析失败");
									LOGGER.error("密码解析失败原因：" + result2.get("szErrMsg"));
									throw new P2PCustomerException();
								}
								request.setAttribute("payPassword2", result2.get("szData"));
							}
							
							request.getSession().setAttribute("isVal", 1);
						} catch (Exception e) {
							LOGGER.warn("密码解析失败",e);
							request.setAttribute("msg", "密码解析失败");
						}
						break;
					}
				}
			//在加载页面之前 渲染页面的密码控件
			for (String s : isBeforeFilters) {
				if ((uri).equals(s)) {
					if(("/member/bank/add.htm".equals(uri)||"/member/bank/modify.htm".equals(uri)
							||"/member/bank/modify.htm".equals(uri)||"/member/bank/delete.htm".equals(uri))&&"POST".equals(request.getMethod())){
						continue;
					}
					//清页面缓存，否则页面经常会从缓存读取serverTime
					if (request.getProtocol().compareTo("HTTP/1.0") == 0)
						response.setHeader("Pragma", "No-cache");
					else if (request.getProtocol().compareTo("HTTP/1.1") == 0)
						response.setHeader("Cache-Control", "no-cache");
					response.setDateHeader("Expires", 0);

					//获取Web服务器时间
					String serverTime = "";
					int errNo = -1;
					try {
						
						DataSt oriData = new DataSt();
						oriData.setRet(-1);

						String hostip = protectionSystemServiceImpl.getProtectionIp();
						int hostport = protectionSystemServiceImpl.getProtectionPort();

						THostInfoSt hostInfo = new THostInfoSt();
						hostInfo.setSvrIP(hostip);
						hostInfo.setPort(hostport);
						// 服务器初始化
						dpApiHelper.getInstance().initialize(hostip, hostport, 30000,
								false, 3000);
						dpApiHelper.getInstance().setTimeout(10000);
						// GetTime 获取服务器时间
						oriData = dpApiHelper.getInstance().GetTime(hostInfo);
						serverTime = oriData.getData();
						errNo = oriData.getRet();
					} catch (Exception e) {
						LOGGER.warn("",e);
					}

					SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
					Date myDate = new Date();

					if (0 == errNo) {
						try {
							myDate = sdf.parse(serverTime);
						} catch (ParseException e) {
							LOGGER.debug("",e);
						}
					} else {
						myDate = new Date();
					}
					TimeZone zone = TimeZone.getTimeZone("GMT-00:00");
					Calendar calendar = Calendar.getInstance(zone);
					calendar.setTime(myDate);
					DecimalFormat df = new DecimalFormat("00");
					int iYear = calendar.get(java.util.Calendar.YEAR);
					int iMonth = calendar.get(java.util.Calendar.MONTH) + 1;
					int iDay = calendar.get(java.util.Calendar.DAY_OF_MONTH);
					int iHour = calendar.get(java.util.Calendar.HOUR_OF_DAY);
					int iMinute = calendar.get(java.util.Calendar.MINUTE);
					int iSecond = calendar.get(java.util.Calendar.SECOND);
					serverTime = df.format(iYear) + "" + df.format(iMonth) + ""
							+ df.format(iDay) + "" + df.format(iHour) + ""
							+ df.format(iMinute) + "" + df.format(iSecond);

					String mycab = "";
					String myexe = "";
					String myVersion = "10,0,0,38";
					LOGGER.info(request.getHeader("User-Agent"));
					//判断是否为Mac操作系统，如果是mac，安装包链接为dmg文件，否则为windows版本安装包
					if (request.getHeader("User-Agent").contains("Mac OS")) { //mac系统
						myexe = "ocx/ucfpay_mac_pwd.dmg";
					} else { //windows 浏览器
						mycab = "ocx/ucfpay_pwd.cab";
						myexe = "ocx/ucfpay_pwd.exe";
					}
					
					request.setAttribute("myexe", myexe);
					request.setAttribute("mycab", mycab);
					request.setAttribute("myVersion", myVersion);
					request.setAttribute("serverTime", serverTime);
					break;
				}
			}
		}
		
		return true;
	}

}
