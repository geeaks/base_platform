package com.ucf.customer.action;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;

import com.alibaba.fastjson.JSONObject;
import com.ucf.customer.security.base_platformAgent;
import com.ucf.customer.utils.enums.EnumsTrueFlase;
import com.ucf.onlinepay.framework.common.util.StringUtil;
import com.ucf.platform.framework.core.log.UcfLogger;
import com.ucf.platform.framework.core.log.UcfLoggerFactory;

/**
 * 
 * 
 * 项目名称：base_platform <br>
 * 类名称：BaseAction <br>
 * 类描述：aciton 基类 共用的方法推荐放到这里来 <br>
 * 创建人：李文静 <br>
 * 创建时间：2014-5-6 下午5:44:32 <br>
 * 修改人：李文静 <br>
 * 修改时间：2014-5-6 下午5:44:32 <br>
 * 修改备注： <br>
 * 
 * @version
 * 
 */
@Controller
public abstract class BaseAction {
	
	public static UcfLogger LOGGER = UcfLoggerFactory.getLogger(BaseAction.class);

	
	@Value("#{settings['devmode']}")
	private String devmode;
	
	/**
	 * 抽象类统一处理获取登录对象
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	public base_platformAgent getbase_platformAgent(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		base_platformAgent base_platformAgent = (base_platformAgent) session
				.getAttribute("base_platformAgent");
		return base_platformAgent;
	}

	/**
	 * 返回验证码
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	public String getCheckCode(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		String idCode = (String) session.getAttribute("idcode");
		return idCode;
	}

	/**
	 * 判断用户是否登录
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	public boolean isLogin(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		if (session==null) {
			return false;
		}
		base_platformAgent base_platformAgent = (base_platformAgent) session
				.getAttribute("base_platformAgent");
		return base_platformAgent == null ? false : true;
	}

	/**
	 * 校验短信验证码
	 * @param request
	 * @param response
	 * @param vercodeInput
	 * @return
	 */
	public boolean checkmMbileCode(HttpServletRequest request, HttpServletResponse response,
			String vercodeInput,String mobileNo) {
		if(EnumsTrueFlase.TRUE.getCode().equals(devmode)){
			return true;
		}
		HttpSession session = request.getSession();
		String vfyCode = (String) session.getAttribute("vfyCode|"+mobileNo);
		if (StringUtil.isEmpty(vfyCode)) {
			return false;
		}
		if (StringUtil.isEmpty(vercodeInput)) {
			return false;
		}

		return vfyCode.equals(vercodeInput);

	}

	/**
	 * 获取短信验证码
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	public String getMobileCode(HttpServletRequest request,
			HttpServletResponse response,String mobileNo) {
		HttpSession session = request.getSession();
		String vfyCode = (String) session.getAttribute("vfyCode|"+mobileNo);
		return vfyCode;
	}
	
	/**
	 * 清除短信验证码
	 * @param request
	 * @param response
	 */
	public void cleanMobileCode(HttpServletRequest request,
			HttpServletResponse response,String mobileNo) {
		HttpSession session = request.getSession();
		session.setAttribute("vfyCode|"+mobileNo,"");
	}
	
	public void print(HttpServletResponse response,Object object) throws IOException{
		PrintWriter writer = response.getWriter();
		if(object instanceof JSONObject){
			writer.write(((JSONObject)object).toString());
		}else
		writer.write(object.toString());
	}

}
