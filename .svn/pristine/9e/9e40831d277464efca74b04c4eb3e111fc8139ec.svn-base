package com.ucf.customer.filter;

import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletRequestWrapper;

import org.apache.log4j.Logger;

import com.ucf.onlinepay.framework.common.util.StringUtil;

/**
 * http request 重写
 * 
 * @author gaozhenhai
 * @since 2013.01.15
 * @version 1.0.0_1
 * 
 */
public class RequestWrapper extends HttpServletRequestWrapper {
	private Logger logger = null;
	
	public RequestWrapper(HttpServletRequest request) {
		super(request);
		
		logger = Logger.getLogger(this.getClass());
	}
	
	/**
	 * 格式化参数
	 */
	@Override
	public String getParameter(String name) {
		String value = super.getParameter(name);
		//添加密码控件参数例外
		if(name.indexOf("pwd") > -1 || name.indexOf("payPassword") > -1 || name.equals("realName")){
			return value;
		}else{
			return format(value);
		}
	}
	
	/**
	 * 格式化参数数组
	 */
	@Override
	public String[] getParameterValues(String name) {
		String[] values = super.getParameterValues(name);
		if(values==null){
			return null;
		}
		String[] result = new String[values.length];
		int n = 0;
		for(String value : values)
		{
			result[n ++] = format(value);
		}
		return result;
	}
	
	/**
	 * 格式化所有参数
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public Map getParameterMap() {
		Map<Object, Object[]> result = new HashMap<Object, Object[]>();
		
		Map<?, ?> map = super.getParameterMap();
		Enumeration<?> names = super.getParameterNames();
		while(names.hasMoreElements())
		{
			Object key = names.nextElement();
			Object[] values = (Object[])map.get(key);
			Object[] value = new Object[values.length];
			int n = 0;
			for(Object obj : values)
			{
				if(obj instanceof String)
				{
					value[n ++] = format((String)obj);
				}
				else
				{
					value[n ++] = obj;
				}
			}
			result.put(key, value);
		}
		
		return result;
	}
	
    /**
     * 格式化敏感字符
     * & < > " '
     * 
     * @param value
     * @return String
     */
	private String format(String value) {
		String result = value;
		
		if(!StringUtil.isEmpty(result))
		{
			boolean flag = false;
			if(result.indexOf("&") != -1)
			{
				result = result.replaceAll("&", "&amp;");
				flag = true;
			}
			if(result.indexOf("<") != -1)
			{
				result = result.replaceAll("<",	"&lt;");
				flag = true;
			}
			if(result.indexOf(">") != -1)
			{
				result = result.replaceAll(">",	"&gt;");
				flag = true;
			}
			if(result.indexOf("\"") != -1)
			{
				result = result.replaceAll("\"", "&quot;");
				flag = true;
			}
			if(result.indexOf("\'") != -1)
			{
				result = result.replaceAll("\'", "&#39;");
				flag = true;
			}
			if(flag)
			{
				logger.info(value + " - " + result);
			}
		}
		
		return result;
	}
}