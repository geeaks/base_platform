package com.ucf.customer.ws.cxf;

import org.apache.cxf.endpoint.Client;
import org.apache.cxf.frontend.ClientProxy;
import org.apache.cxf.jaxws.JaxWsProxyFactoryBean;
import org.apache.cxf.transport.http.HTTPConduit;
import org.apache.cxf.transports.http.configuration.HTTPClientPolicy;
/**
 * 
 * Description: webservice 客户端接口实例创建工厂类
 * All Rights Reserved.
 * @version 1.0  2014-2-14 下午5:53:46  by 徐军伟（xujunwei@ucfgroup.com）创建
 */
public class WsClientFactory {

	
	/**
	 * 
	 * Description: 根据webservice服务发布地址、具体的业务接口全路径（包名+接口名）生成webservice调用客户端实例
	 * @Version1.0 2014-2-14 下午5:54:06 by 徐军伟（xujunwei@ucfgroup.com）创建
	 * @param soapAddressLocation
	 * 			例如：http://127.0.0.1:9000/cxfServer/hello
	 * @param serviceInterfaceFullPath
	 * 			例如：com.ucf.onlinepay.demo.ws.cxf.IHelloService
	 * @return 客户端调用的实例对象
	 * @throws ClassNotFoundException
	 * @throws Exception
	 */
	public static Object createWsClient(String soapAddressLocation,String serviceInterfaceFullPath) throws ClassNotFoundException, Exception
	{
		Class<?> o = null;
		try {
			o = Class.forName(serviceInterfaceFullPath);
		} catch (ClassNotFoundException e) {
			throw e;
		}
		
        JaxWsProxyFactoryBean  factoryBean=new JaxWsProxyFactoryBean();
        //factoryBean.getInInterceptors().add(new LoggingInInterceptor());
        //factoryBean.getOutInterceptors().add(new LoggingOutInterceptor());
        //注册WebService接口
        factoryBean.setServiceClass(o);
        //设置WebService地址
        factoryBean.setAddress(soapAddressLocation );
//		如果server端设置了验证，则需要设置用户名和密码
//		factory.setUserName("");
//		factory.setPasswd("");
	
        //设置ws代理工厂其他属性
		//Map<String, Object> properties = new HashMap<String, Object>();
		//properties.put("mtom-enabled", Boolean.TRUE);
		//factoryBean.setProperties(properties);	
		
		//创建客户端实例
        Object serviceBean = factoryBean.create();
        
        Client client =ClientProxy.getClient(serviceBean);
        HTTPConduit  http = (HTTPConduit) client.getConduit();
        HTTPClientPolicy httpClientPolicy = new HTTPClientPolicy();
        /*设置服务器和客户端的超时时间*/
        //连接超时时间.以毫秒为单位,默认是30000毫秒,即30秒
        //httpClientPolicy.setConnectionTimeout(1000*30);
        //发送WebService的请求后等待响应的时间,超过设置的时长就认为是响应超时.以毫秒为单位,默认是60000毫秒,即60秒. 
        //httpClientPolicy.setReceiveTimeout(1000*60);
        httpClientPolicy.setAllowChunking(false);
        http.setClient(httpClientPolicy);
        
        return serviceBean;
         
	}
}
