package com.ucf.customer.controller;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.cxf.common.util.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.alibaba.fastjson.JSONObject;
import com.ucf.customer.action.BaseAction;
import com.ucf.customer.bo.ResultBo;
import com.ucf.customer.pojo.UcfCard;
import com.ucf.customer.pojo.UcfQuestion;
import com.ucf.customer.pojo.UcfUser;
import com.ucf.customer.pojo.UcfUserLoginApp;
import com.ucf.customer.security.Cryptos;
import com.ucf.customer.security.EnumMemberUserType;
import com.ucf.customer.security.MemberAccess;
import com.ucf.customer.service.CardService;
import com.ucf.customer.service.LoginService;
import com.ucf.customer.service.UserInfoService;
import com.ucf.customer.service.UserService;
import com.ucf.customer.utils.MobileUtil;
import com.ucf.customer.utils.enums.EnumResultCode;
import com.ucf.customer.ws.enums.EnumRegisterFrom;
import com.ucf.platform.framework.core.log.UcfLogger;
import com.ucf.platform.framework.core.log.UcfLoggerFactory;
import com.ucf.platform.framework.core.util.SensitiveInfoUtils;

/**
 * 
 * 
 * 项目名称：member <br>
 * 类名称：PaymentPasswordAction <br>
 * 类描述：支付密码修改/找回 <br>
 * 创建人：许浩 <br>
 * 创建时间：2014-5-9 下午4:29:09 <br>
 * 修改人：许浩 <br>
 * 修改时间：2014-5-9 下午4:29:09 <br>
 * 修改备注： <br>
 * 
 * @version
 * 
 */
@Controller
@RequestMapping({ "/pwd" })
public class PasswordController extends BaseAction {
	
	private static UcfLogger LOGGER = UcfLoggerFactory
			.getLogger(PasswordController.class);
	
	@Autowired
	private LoginService loginService;
	@Autowired
	private CardService cardService;
	@Autowired
	private UserService userService;

	@Autowired
	private UserInfoService userInfoService;
	
	@MemberAccess(EnumMemberUserType.Logined)
	@RequestMapping({ "/manage.htm" })
	public String index(HttpServletRequest request, HttpServletResponse response, Model model) throws Exception {
		return "safe/password";
	}
	
	/**
	 * 密码修改初始化
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 * @throws Exception
	 */
	@MemberAccess(EnumMemberUserType.Logined)
	@RequestMapping(value = "/pwdmodify.htm")
	public String lgnpwdMod(
			HttpServletRequest request,
			HttpServletResponse response,Model model) throws Exception {
		LOGGER.debug("  lgnpwdMod modify  !");
		UcfUser user = loginService.queryUserInfo(getMemberAgent(request, response).getId());
		String mobile  = user.getCell();
		model.addAttribute("cell", mobile);
		model.addAttribute("userName", user.getRealName());
        model.addAttribute("picna", MobileUtil.mobileNoEncrypt(mobile));
		return "safe/pwdMod";
	}
	
	
	@MemberAccess(EnumMemberUserType.Logined)
	@RequestMapping(value = "/modifylgnPwd.htm")
	public String modifyLgnPwd(@RequestParam("pwd") String pwd,
			@RequestParam("newpwd") String newpwd,
			@RequestParam("verCode") String verCode,
			HttpServletRequest request,
			HttpServletResponse response,Model model) throws Exception {
		LOGGER.debug("pwd modify  !");
		pwd = (String)request.getAttribute("payPassword");
		UcfUser  user = loginService.queryUserInfo(getMemberAgent(request, response).getId());
		UcfUserLoginApp userApp= loginService.queryUserAppInfo(getMemberAgent(request, response).getLoginId());
		String mobile  = userApp.getPhone();
		model.addAttribute("picna", MobileUtil.mobileNoEncrypt(mobile));
		model.addAttribute("cell", mobile);
		model.addAttribute("userName", user.getRealName());
		
		if(!checkmMbileCode(request, response, verCode, mobile)){
			model.addAttribute("msg", "验证码错误！");
   			return "safe/pwdMod";
		}
		
		if(pwd.equals(newpwd)){
			model.addAttribute("msg", "登录密码不可与原密码相同！");
  			return "safe/pwdMod";
		}
		
		ResultBo resultBo = userInfoService.checkLoginPwd(user.getUserId(), pwd.getBytes());
		if(!EnumResultCode.SUCCESS.getCode().equals(resultBo.getResult())){
			model.addAttribute("msg", resultBo.getMsg());
			return "safe/pwdMod";
		}
		
		userApp.setLoginPwd(Cryptos.encrypt(newpwd.trim(), user.getUserId()));
		loginService.updateUcfUserApp(userApp);
		model.addAttribute("userName", user.getRealName());
		cleanMobileCode(request, response, mobile);
		return "safe/pwdModSuc";
	}
	
	
	/**
	 * 支付密码修改初始化
	 * 
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 * @throws Exception
	 */
	@MemberAccess(EnumMemberUserType.Logined)
	@RequestMapping({ "/paypwdmodify.htm" })
	public String toModifyPayPwd(HttpServletRequest request, HttpServletResponse response, Model model) throws Exception {
		UcfUser user = loginService.queryUserInfo(getMemberAgent(request, response).getId());
		String userId = user.getUserId();
		
		// add by liwenjing 增加判断用户注册来源是否正确
		UcfCard ucfCard = loginService.queryUcfCardByUserId(userId);
		if (!EnumRegisterFrom.MEMBER_FROM.getCode().equals(ucfCard.getRegisterFrom())) {
			return "forward:/common/error.htm?msg=用户注册来源不正确,不允许修改支付密码！";
		}

		// 获取更新后的支付密码，并验证数据是否正确
		ucfCard = this.cardService.queryCardInfo(userId);
		String cardNo = ucfCard.getCardNo();

		model.addAttribute("cardNo", cardNo);
		model.addAttribute("mobile", MobileUtil.mobileNoEncrypt(user.getCell()));
		model.addAttribute("cell", user.getCell());
		model.addAttribute("user", user);
		return "safe/modifyPayPwd";
	}
	
	/**
	 * 修改支付密码提交
	 * 
	 * @param pwd 旧密码
	 * @param passwd
	 * @param verCode
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 * @throws Exception
	 */
	@RequestMapping({ "/modifypaypwd.htm" })
	public String modifyPayPwd(@RequestParam("pwd") String pwd,
			@RequestParam("paymentPassword") String passwd,
			@RequestParam("verCode") String verCode,
			HttpServletRequest request, HttpServletResponse response,
			Model model) throws Exception {
		pwd = (String)request.getAttribute("payPassword");
		UcfUser user = loginService.queryUserInfo(getMemberAgent(request,
				response).getId());
		UcfUserLoginApp userApp = loginService.queryUserAppInfo(user.getCell());
		String lgnPwd = userApp.getLoginPwd();
		String userId = user.getUserId();
		
		if(userInfoService.isUserPwdMatch(userId, pwd, lgnPwd)){
			return "forward:/common/error.htm?msg=修改的新密码不能与原支付密码相同！";
		}
		if(pwd.equals(lgnPwd)){
			return "forward:/common/error.htm?msg=修改的新密码不能与原支付密码相同！";
		}
		// add by liwenjing 增加判断用户注册来源是否正确
		UcfCard ucfCard = loginService.queryUcfCardByUserId(userId);
		if (!EnumRegisterFrom.MEMBER_FROM.getCode().equals(
				ucfCard.getRegisterFrom())) {
			return "forward:/common/error.htm?msg=用户注册来源不正确,不允许修改支付密码！";
		}

		model.addAttribute("mobile", MobileUtil.mobileNoEncrypt(user.getCell()));
		model.addAttribute("cell", user.getCell());
		if (!checkmMbileCode(request, response, verCode, user.getCell())) {
			model.addAttribute("msg", "短信验证码错误!");
			return "safe/modifyPayPwd";
		}
		
		ResultBo resultBo = userInfoService.checkPayPwd(userId, pwd.getBytes());
		if(!EnumResultCode.SUCCESS.getCode().equals(resultBo.getResult())){
			model.addAttribute("msg", resultBo.getMsg());
			return "safe/modifyPayPwd";
		}
		
		if (userInfoService.isUserPwdMatch(userId, userApp.getLoginPwd(),passwd)) {
			model.addAttribute("msg", "支付密码不可与登录密码相同!");
			return "safe/modifyPayPwd";
		}
		ucfCard.setPaymentPassword(Cryptos.encrypt(passwd, userId));
		this.cardService.updateUcfCard(ucfCard);

		cleanMobileCode(request, response, user.getCell());
		LOGGER.info("会员["+SensitiveInfoUtils.chineseName(user.getRealName())+","+user.getUserId()+"]修改支付密码成功!");
		return "forward:/common/success.htm?msg=修改支付密码成功！";

	}
	
	@RequestMapping({ "/beforeFindPayPwd.htm" })
	public String beforeFindPayPwd(HttpServletRequest request, HttpServletResponse response, Model model) throws Exception {
		return "safe/beforeFindPayPwd";
	}
	
	@RequestMapping({ "/findPayPwdVerify.htm" })
	public String findPayPwdVerify(@RequestParam("vercode") String vercode,
			@RequestParam("cellNO") String cellNO, HttpServletRequest request,
			HttpServletResponse response, Model model) throws Exception {
		UcfUser user = loginService.queryUserInfo(getMemberAgent(request,response).getId());
		if(!cellNO.equals(user.getCell())){
			model.addAttribute("msg", "账户名错误!");
			return "safe/beforeFind";
		}
		String idCode = getCheckCode(request, response);
		if (!vercode.equalsIgnoreCase(idCode)) {
			model.addAttribute("msg", "验证码错误!");
			return "safe/beforeFind";
		}
		UcfCard ucfCard = loginService.queryUcfCardByUserId(user.getUserId());
		if (!EnumRegisterFrom.MEMBER_FROM.getCode().equals(ucfCard.getRegisterFrom())) {
			return "forward:/common/error.htm?msg=用户注册来源不正确,不允许修改支付密码！";
		}
		model.addAttribute("cell", user.getCell());
		model.addAttribute("mobilePhone",MobileUtil.mobileNoEncrypt(user.getCell()));
		model.addAttribute("userName", user.getRealName());
		return "safe/findPayPwdPro";
	}
	
	@RequestMapping({ "/findPayPwdCheck.htm" })
	public String findPayPwdCheck(@RequestParam("vercode") String vercode,
			@RequestParam("quesInfo") String quesInfo,
			@RequestParam("res") String res, HttpServletRequest request,
			HttpServletResponse response, Model model) throws Exception {
		UcfUser user = loginService.queryUserInfo(getMemberAgent(request,response).getId());
		
		List<UcfQuestion> list = this.loginService.queryUcfQuestion(user.getUserId());
		UcfQuestion question = new UcfQuestion();
		if(!list.isEmpty()){
			question = list.get(0);
		}
		if (!checkmMbileCode(request, response, vercode, user.getCell())) {
			model.addAttribute("msg", "验证码错误!");
			return "safe/findPayPwdPro";
		}
		if (!question.getQuesInfo().equals(quesInfo) || !res.equals(question.getQuesRes())) {
			int times = loginService.setQusAndAsw(false, user.getUserId());
			model.addAttribute("msg", "安保问题选择或答案错误,错误" + times + "次!");
			// 不可找回支付密码
			if (!loginService.checkQusAndAsw(user.getUserId())) {
				model.addAttribute("msg", "用户被冻结，24小时内不可进行找回密码操作");
				return "common/error";
			}
			return "safe/findPayPwdPro";
		} else {
			loginService.setQusAndAsw(true, user.getUserId());
		}
		cleanMobileCode(request, response, user.getCell());
		model.addAttribute("mobilePhone",MobileUtil.mobileNoEncrypt(user.getCell()));
		return "safe/findPayPwd_setNewPayPwd";
	}
	
	@RequestMapping({ "/findPayPwdSet.htm" })
	public String findPayPwdSet(
			@RequestParam("paymentPassword") String paymentPassword,
			HttpServletRequest request, HttpServletResponse response,
			Model model) throws Exception {
		UcfUser user = loginService.queryUserInfo(getMemberAgent(request,response).getId());
		UcfUserLoginApp userApp = loginService.queryUserAppInfo(user.getCell());
		String lgnPwd = userApp.getLoginPwd();
		UcfCard card = loginService.queryUcfCardByUserId(user.getUserId());
		if (!EnumRegisterFrom.MEMBER_FROM.getCode().equals(card.getRegisterFrom())) {
			return "forward:/common/error.htm?msg=用户注册来源不正确,不允许修改支付密码！";
		}
		model.addAttribute("mobilePhone",MobileUtil.mobileNoEncrypt(user.getCell()));
		if (userInfoService.isUserPwdMatch(user.getUserId(), lgnPwd, paymentPassword)) {
			model.addAttribute("msg", "支付密码不可与登录密码相同!");
			return "safe/findPayPwd_setNewPayPwd";
		}
		userInfoService.resetPayPwd(user.getUserId(), paymentPassword.getBytes());
		LOGGER.info("会员["+SensitiveInfoUtils.chineseName(user.getRealName())+","+user.getUserId()+"]找回支付密码成功!");
		return "forward:/common/success.htm?msg=找回支付密码成功！";
	}	
	
	@RequestMapping(value = "/gotoFindPwdChoose.htm")
	public String gotoFindPwdChoose(){
		return "login/findPwdChoose";
	}
	
	@RequestMapping(value = "/gotoPassword.htm")
	public String gotoPassword(){
		return "user/password";
	}
	
	@RequestMapping(value = "/validatePwd.htm")
	public void validatePwd(HttpServletRequest request,
			HttpServletResponse response, Model model) throws IOException{
//		1. 长度：6-20位字符
//		2. 只能包含大小写字母、数字以及特殊符号（除空格、正反单引号(’),(“”)、正斜杠”\”、反斜杠”/” ）
//		3. 不支持全角数字、字母（大小写）及特殊符号
		List<String> errorContent = new ArrayList<String>();
		errorContent.add("'");
		errorContent.add("\"");
		errorContent.add("“");
		errorContent.add("”");
		errorContent.add("\\");
		errorContent.add("/");
		JSONObject result = new JSONObject();
		int status = 1;
		String msg = "";
		String pwd = (String)request.getAttribute("payPassword");
		if(StringUtils.isEmpty(pwd)){
			status=0;
			msg = "密码不能为空或含空格";
		}else if(pwd.indexOf(" ")>-1){
			status=0;
			msg = "密码不能含空格";
		}else if(pwd.length()<6||pwd.length()>12){
			status = 0;
			msg = "请输入6到20个字符";
		}else{
			char[] pwdArray = pwd.toCharArray();
			for(char c:pwdArray){
				if(errorContent.contains(String.valueOf(c))){
					status = 0;
					msg = "密码含有非法字符"+String.valueOf(c);
					break;
				}
			}
		}
		result.put("status", status);
		result.put("msg", msg);
		this.print(response, result);
	}
}
