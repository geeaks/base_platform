package com.ucf.customer.service.impl;

import java.util.List;

import org.apache.commons.collections.CollectionUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.ucf.customer.dao.UcfBankCardDao;
import com.ucf.customer.dao.UcfCardDao;
import com.ucf.customer.dao.UcfQuestionDao;
import com.ucf.customer.dao.UcfUserDao;
import com.ucf.customer.pojo.UcfBankCard;
import com.ucf.customer.pojo.UcfCard;
import com.ucf.customer.pojo.UcfQuestion;
import com.ucf.customer.pojo.UcfUser;
import com.ucf.customer.service.ConsoleService;
import com.ucf.customer.utils.exception.CustomerErrorCode;
import com.ucf.customer.utils.exception.CustomerException;
import com.ucf.platform.framework.core.log.UcfLogger;
import com.ucf.platform.framework.core.log.UcfLoggerFactory;

@Service("consoleService")
public class ConsoleServiceImpl implements ConsoleService{

	private static UcfLogger LOGGER = UcfLoggerFactory.getLogger(ConsoleServiceImpl.class);
	@Autowired
	private UcfCardDao ucfCardDao;
	
	@Autowired
	private UcfUserDao ucfUserDao;
	
	@Autowired
	private UcfQuestionDao ucfQuestionDao;
	
	@Autowired
	private UcfBankCardDao ucfBankCardDao;
	
	@Override
	public UcfCard queryCardInfo(String cardNo) throws Exception {
		UcfCard ucfCard = new UcfCard();
		ucfCard.setCardNo(cardNo);
		List<UcfCard> ll = ucfCardDao.queryUcfCardListByWhere(ucfCard);
		if(!CollectionUtils.isEmpty(ll)){
			return ll.remove(0);
		}
		return null;
	}

	@Override
	public void updateUcfCard(UcfCard ucfCard) throws Exception {
		ucfCardDao.updateUcfCard(ucfCard);
	}

	@Override
	public UcfUser findUser(String userId) throws Exception {
		UcfUser ucfUser = new UcfUser();
		ucfUser.setUserId(userId);
		List<UcfUser> ll = ucfUserDao.queryUcfUserListByWhere(ucfUser);
		if(!CollectionUtils.isEmpty(ll)){
			return ll.remove(0);
		}
		return null;
	}

	@Override
	public void updateUcfUser(UcfUser ucfUser) throws Exception {
		ucfUserDao.updateUcfUser(ucfUser);
	}

	@Override
	public void addUcfQuestion(UcfQuestion ucfQuestion) throws Exception {
		ucfQuestionDao.insertUcfQuestion(ucfQuestion);
	}

	@Override
	public UcfBankCard getWithDrawCard(String userId) throws CustomerException {
		UcfBankCard ucfBankCard = new UcfBankCard();
		ucfBankCard.setUserId(userId);
		ucfBankCard.setIsWithdraw("Y");
		List<UcfBankCard> ll = null;
		try {
			ll = ucfBankCardDao.queryUcfBankCardListByWhere(ucfBankCard);
		} catch (Exception e) {
			LOGGER.error(e.getMessage(),e);
			throw new CustomerException(CustomerErrorCode.ERROR_DB);
			
		}
		if(CollectionUtils.isEmpty(ll)){
			return null;
//			throw new CustomerException(CustomerErrorCode.ERROR_CARD_NOT_EXSIT);
		}
		return ll.get(0);
	}

	public List<UcfQuestion> queryUcfQuestion(String userId) throws Exception {
		UcfQuestion q = new UcfQuestion();
		q.setQuesLink(userId);
		return ucfQuestionDao.queryUcfQuestionListByWhere(q);
	}
	
	public void updateUcfQuestion(UcfQuestion ucfQuestion) throws Exception {
		ucfQuestionDao.updateUcfQuestion(ucfQuestion);
	}

	@Override
	public UcfBankCard getWithDrawCard(UcfBankCard bankCard) throws CustomerException {
		List<UcfBankCard> ll = null;
		try {
			ll = ucfBankCardDao.queryUcfBankCardListByWhere(bankCard);
		} catch (Exception e) {
			LOGGER.error(e.getMessage(),e);
			throw new CustomerException(CustomerErrorCode.ERROR_DB);
		}
		if(CollectionUtils.isEmpty(ll)){
			return null;
		}
		return ll.get(0);
	}

	@Override
	public String monitorValidConnent() throws Exception {
		return ucfUserDao.monitorValidConnent();
	}
}
