package com.ucf.customer.service.impl;

import java.util.concurrent.TimeUnit;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.ucf.platform.framework.core.log.UcfLogger;
import com.ucf.platform.framework.core.log.UcfLoggerFactory;
import com.ucf.platform.framework.redis.support.IAtomic;

@Service
public class ExpriseTimesService {
	private static final UcfLogger LOGGER = UcfLoggerFactory
			.getLogger(ExpriseTimesService.class);
	@Autowired
	private  IAtomic<String> redisAtomicManager;
	
	/**
	 * 判断是否超限
	 * 
	 * @author yuzengjia
	 * @date 2014-6-19 上午11:54:20
	 * @param number  值
	 * @param key
	 * @return
	 */
	public boolean canDo(String key, int number) {
		if (number == 0)
			return true;
		if (!redisAtomicManager.isExist(key))
			return true;
		long times = redisAtomicManager.getLong(key);
		if (times < number) {
			return true;
		}
		return false;
	}

	/**
	 * 操作失败后更新值
	 * 
	 * @author yuzengjia
	 * @date 2014-6-19 上午11:43:45
	 * @param key
	 * @param expireDate
	 *            失效时间
	 * @return 错误次数
	 */
	public int doneUnSuccess(String key, int timeout) {
		if (!redisAtomicManager.isExist(key)) {
			redisAtomicManager.set(key, 1, timeout, TimeUnit.SECONDS);
			return 1;
		}
		long times = redisAtomicManager.getLong(key);
		++times;
		redisAtomicManager.incrementAndGet(key, 1);
		LOGGER.debug(key + " expire times:" + times);
		return (int)times;
	}

	
	/**
	 * 操作失败后更新值
	 * 
	 * @author yuzengjia
	 * @date 2014-6-19 上午11:43:45
	 * @param key
	 * @param expireDate
	 *            失效时间
	 * @return 错误次数
	 */
	public int doneUnSuccess(String key, int timeout,int value) {
		if (!redisAtomicManager.isExist(key)) {
			redisAtomicManager.set(key, value, timeout, TimeUnit.SECONDS);
			return value;
		}
		long times = redisAtomicManager.getLong(key);
		times = times + value;
		redisAtomicManager.incrementAndGet(key, value);
		LOGGER.debug(key + " expire times:" + times);
		return (int)times;
	}


	/**
	 * 操作成功后清除超限次数
	 * 
	 * @author yuzengjia
	 * @date 2014-6-19 上午11:40:06
	 * @param key
	 */
	public void clearExpriseTimes(String key) {
		if (redisAtomicManager.isExist(key)) {
			redisAtomicManager.delete(key);
		}
	}
	
//	public static void main(String[] args){
//		String key = "111111asd";
//		ExpireTimesUtil.clearExpireTimes(key);
//		for(int i=0;i<10;i++){
//			boolean can = ExpireTimesUtil.canDo(key);
//			System.out.println(i+ "  if can do:"+can);
//			if(can){
//				ExpireTimesUtil.doneUnSuccess(key);
//			}
//		}
//	}
}
