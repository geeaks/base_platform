package com.ucf.customer.ws.business.impl;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TimeZone;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.ucf.customer.utils.BizProduct;
import com.ucf.customer.utils.Constants;
import com.ucf.customer.vo.DisplayOrder;
import com.ucf.customer.ws.business.TradeCallService;
import com.ucf.platform.framework.core.log.UcfLogger;
import com.ucf.platform.framework.core.log.UcfLoggerFactory;
import com.ucf.platform.framework.core.util.SensitiveInfoUtils;
import com.ucf.trade.response.impl.SearchOrderResult;
import com.ucf.trade.ws.bo.TradeUcfWsReturnValueBo;
import com.ucf.trade.ws.bo.TradeUcfWsSearchOrderParamBo;
import com.ucf.trade.ws.service.TradeUcfSearchOrderServiceWs;

@Service("tradeCallService")
public class TradeCallServcieImpl implements TradeCallService {

	
	private static UcfLogger LOGGER_BIZ = UcfLoggerFactory.getLogger(TradeCallService.class);

	
	@Autowired
	private TradeUcfSearchOrderServiceWs wsTradeUcfSearchOrderServiceClient;
	
	
	public Map<String,Object> queryOrdersByUserId(String userId,String tradeType,String tradeStatus,
			String startDate,String endDate,Integer limit,Integer page){
		if(limit ==null || limit <=0){
			limit = 20;
		}
		if(page == null || page <=0){
			page = 1;
		}
		
		
		 Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT+08:00"));    //获取东八区时间
		  int year = c.get(Calendar.YEAR);    //获取年
		if(startDate == null){
			startDate =  String.valueOf(year) + "-" + Constants.ORDER_START_DATE;
		}
		Date dstartDate = StringToDate(startDate,"yyyy-MM-dd");
		if(endDate == null){
			endDate = String.valueOf(year)+ "-"  +Constants.ORDER_END_DATE;
		}
		Date dendDate = StringToDate(endDate,"yyyy-MM-dd");
		LOGGER_BIZ.debug("--------getOrderList call trade system------");
		TradeUcfWsSearchOrderParamBo tradeSearchOrderParamBO =  new TradeUcfWsSearchOrderParamBo();
		tradeSearchOrderParamBO.setUserId(userId);
		tradeSearchOrderParamBO.setStartDate(dstartDate);
		tradeSearchOrderParamBO.setEndDate(dendDate);
		tradeSearchOrderParamBO.setBizProduct(BizProduct.BIZ_PRODUCT_base_platform.getCode());
		if(tradeType!=null && !tradeType.trim().equals("")){
			tradeSearchOrderParamBO.setBusinessType(tradeType);
		}
		if(tradeStatus!=null && !tradeStatus.trim().equals("")){
			tradeSearchOrderParamBO.setOrderStatus(tradeStatus);
		}
		tradeSearchOrderParamBO.setPageNo(page);
		tradeSearchOrderParamBO.setPageSize(limit);
		if(LOGGER_BIZ.isDebugEnabled()){
			LOGGER_BIZ.debug("交易查询传入参数：" + SensitiveInfoUtils.getJson(tradeSearchOrderParamBO));//交易系统修改
		}
		TradeUcfWsReturnValueBo		tradeSearchOrderRetrunValueBo = 
				wsTradeUcfSearchOrderServiceClient.searchOrder(tradeSearchOrderParamBO);
		if(LOGGER_BIZ.isDebugEnabled()){
			LOGGER_BIZ.debug("交易查询返回参数：" + SensitiveInfoUtils.getJson(tradeSearchOrderRetrunValueBo));//交易系统修改
		}
		Map<Object,Object> returnValueMap  = tradeSearchOrderRetrunValueBo.getReturnValueMap();
		String result = returnValueMap.get("result").toString();
		int pageSize = 0;
		int count = 0;
		Map<String,Object> resultMap = new HashMap<String,Object>();
		List<DisplayOrder> listOrders = new ArrayList<DisplayOrder>();
		if(Constants.STATUS_SUC.equals(result)){
			String listJson = returnValueMap.get("orders").toString();
			count =  Integer.parseInt(returnValueMap.get("count").toString());
			pageSize = count/limit;
			if(count%limit > 0){
				pageSize += 1;
			}
			JSONArray arr = JSON.parseArray(listJson);
			for(int i=0;i< arr.size();i++){
				DisplayOrder  tempOrder= new DisplayOrder();  
				JSONObject obj = arr.getJSONObject(i);
				SearchOrderResult order=JSON.toJavaObject(obj, SearchOrderResult.class);
				String sorderStatus = order.getOrderStatus();
				String orderType = order.getBusinessType();
				String amount = "0.00";
				if(order.getAmount()!=null){
					amount = order.getAmount().toString();
				}
				
				String orderTypeName = "";
				////////////////////////////////////
				if(Constants.NUM_OEDER_CHARGE.equals(orderType)){
					orderTypeName = Constants.CHINA_OEDER_CHARGE;
					amount = "+"+amount;
				}
				if(Constants.NUM_OEDER_CASH.equals(orderType)){
					orderTypeName = Constants.CHINA_OEDER_CASH;
					amount = "-"+amount;
				}
				if(Constants.NUM_OEDER_AUTH.equals(orderType)){
					orderTypeName = Constants.CHINA_OEDER_CHARGE ;
					amount = "+"+amount;
				}
				if(Constants.NUM_OEDER_PAY.equals(orderType)){
					orderTypeName = Constants.CHINA_OEDER_PAY ;
					amount = "-"+amount;
				}
				
				
				Date date = order.getCreateTime();
				SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				String dateString = df.format(date);
				
				tempOrder.setAmount(amount);
				tempOrder.setTypeName(orderTypeName);
				tempOrder.setDate(dateString);
				tempOrder.setId(order.getId());
				
				
				if(Constants.CHAR_ORDER_INIT.equals(sorderStatus)){
					sorderStatus = Constants.CHINA_ORDER_INIT;
				}else  	if(Constants.CHAR_ORDER_SUCC.equals(sorderStatus)){
						sorderStatus = Constants.CHINA_ORDER_SUCC;
					}else 	if(Constants.CHAR_OEDER_FAIL.equals(sorderStatus)){
						sorderStatus = Constants.CHINA_OEDER_FAIL;
					}
					tempOrder.setOrderStatus(sorderStatus);
					listOrders.add(tempOrder);
				
				
				
				
			}
			
			
		}
		resultMap.put("orders", listOrders);
		resultMap.put("startDate", dateToString(dstartDate,"yyyy-MM-dd"));
		resultMap.put("endDate",dateToString(dendDate,"yyyy-MM-dd"));
		resultMap.put("tradeType", tradeType);
		resultMap.put("tradeStatus", tradeStatus);
		resultMap.put("pre", page - 1 >0 ? (page-1) : 1);
		resultMap.put("page", page);
		resultMap.put("next", page + 1 > pageSize ? pageSize : page + 1);
		resultMap.put("count", count);
		resultMap.put("limit", limit);
		resultMap.put("pageSize", pageSize);
		return resultMap;
	}
	
	/**
	 * 字符串转换到时间格式
	 * @param dateStr 需要转换的字符串
	 * @param formatStr 需要格式的目标字符串  举例 yyyy-MM-dd
	 * @return Date 返回转换后的时间
	 * @throws ParseException 转换异常
	 */
	public static Date StringToDate(String dateStr,String formatStr){
		DateFormat sdf=new SimpleDateFormat(formatStr);
		Date date=null;
		try {
			date = sdf.parse(dateStr);
		} catch (ParseException e) {
			//TODO
			LOGGER_BIZ.error("from StringToDate:"+e.getMessage(),e);
 
		}
		return date;
	}
	
	/**
	 * 时间格式转换到字符串
	 * @param date 需要转换的时间
	 * @param formatStr 需要格式的目标字符串  举例 yyyy-MM-dd
	 * @return String 返回转换后的字符串
	 */
	public static String dateToString(Date date,String formatStr){
		return new SimpleDateFormat(formatStr).format(date);
	}
}
