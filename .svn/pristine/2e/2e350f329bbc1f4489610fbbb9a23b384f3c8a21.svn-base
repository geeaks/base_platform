package com.ucf.customer.service.impl;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.annotation.Resource;
import javax.security.auth.login.AccountException;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.support.TransactionCallback;
import org.springframework.transaction.support.TransactionTemplate;
import com.ucf.customer.api.enums.EnumBankCardType;
import com.ucf.customer.dao.UcfBankCardDao;
import com.ucf.customer.pojo.UcfBankCard;
import com.ucf.customer.pojo.UcfCard;
import com.ucf.customer.pojo.UcfCustomer;
import com.ucf.customer.pojo.UcfPerson;
import com.ucf.customer.pojo.UcfUser;
import com.ucf.customer.security.Cryptos;
import com.ucf.customer.service.BankCardService;
import com.ucf.customer.service.CardService;
import com.ucf.customer.service.LoginService;
import com.ucf.customer.service.MQConsumeService;
import com.ucf.customer.utils.Constants;
import com.ucf.customer.utils.enums.EnumBindBankCardStatus;
import com.ucf.customer.utils.enums.EnumConfirmStatus;
import com.ucf.customer.api.enums.EnumBankCardUseType;
import com.ucf.customer.ws.enums.EnumCertFrom;
import com.ucf.customer.ws.enums.EnumCertStatus;
import com.ucf.platform.framework.core.log.UcfLogger;
import com.ucf.platform.framework.core.log.UcfLoggerFactory;
import com.ucf.platform.framework.core.util.SensitiveInfoUtils;

@Service("mqConsumeService")
public class MQConsumeServiceImpl implements MQConsumeService {
	
	private static final UcfLogger LOGGER = UcfLoggerFactory.getLogger(MQConsumeServiceImpl.class);
	
	@Autowired
	private LoginService loginService;
	@Autowired
	private CardService cardService;
	@Autowired
	private BankCardService bankCardService;
	@Autowired
	private UcfBankCardDao ucfBankCardDao;
	@Resource(name = "sharedTransactionTemplate")
	private TransactionTemplate transactionTemplate;
	
	@Override
	public void updateBankCard(String userId, String bankAccountNo,
			String province, String city, String issuer, String branchName) throws Exception {
		UcfBankCard ucfBankCard = bankCardService.queryUserBankInfo(userId, bankAccountNo);
		LOGGER.info("用户[UserId:"+userId+"]修改前银行卡信息:" + SensitiveInfoUtils.getJson(ucfBankCard));
		if (ucfBankCard!=null) {
			if (StringUtils.isEmpty(ucfBankCard.getProvince())) {
				ucfBankCard.setProvince(province);
			}
			if (StringUtils.isEmpty(ucfBankCard.getCity())) {
				ucfBankCard.setCity(city);
			}
			if (StringUtils.isEmpty(ucfBankCard.getIssuer())) {
				ucfBankCard.setIssuer(issuer);
			}
			if (StringUtils.isEmpty(ucfBankCard.getBranchname())) {
				ucfBankCard.setBranchname(branchName);
			}
			ucfBankCard.setStatus(EnumBindBankCardStatus.SUCCESS.getCode());
			bankCardService.updateUcfBankCard(ucfBankCard);
			LOGGER.info("用户[UserId:"+userId+"]修改银行卡信息:" + SensitiveInfoUtils.getJson(ucfBankCard));
		}
	}

	@Override
	public void addBankCard(String userId, String cardType, String bankAccountNo, String bankCode, String bankName,
			String mobileNo, String province, String city, String issuer,
			String branchName, String cvn2, String validDate) throws Exception  {
		UcfBankCard ucfBankCard = bankCardService.queryUserBankInfo(userId, bankAccountNo);
		if (ucfBankCard == null) {// 卡不存在
			final UcfBankCard insertBankCard = setBankInfo(userId,cardType,bankAccountNo, bankCode, bankName, mobileNo, province,city, issuer, branchName,cvn2,validDate);
			loginService.insertBankCardInfo(insertBankCard);
			LOGGER.info("用户[UserId:"+insertBankCard.getUserId()+"]绑定新的消费卡:" + SensitiveInfoUtils.getJson(insertBankCard));
		} else {
			//如果卡已经存在，则修改银行卡信息
			updateBankCard(userId ,bankAccountNo,province, city, issuer,branchName);
			LOGGER.info("用户[UserId:"+userId+"]卡信息已存在不允许重复绑卡,进行修改:" + SensitiveInfoUtils.getJson(ucfBankCard));
		}
	}

	@Override
	public void realNameMethod(final String userName, String bankAccountNo, final String certNo, 
			final String mobileNo, final UcfUser ucfUser, final UcfCard ucfCard) {
			final UcfCustomer customer = new UcfCustomer();
			customer.setCertNo(certNo);
			customer.setCertType(ucfUser.getCertType());
			customer.setName(userName);
			customer.setCardNo(bankAccountNo.replace(" ", ""));// 银行卡号
			customer.setOpenStatus(Constants.OPEN_STATUS_YES);
			customer.setCertStatus(Constants.VERIFY_STATUS_T);
			customer.setNational("CHA");
			customer.setType(Constants.CUSTOMER_TYPE_PERSON);
			customer.setEnableStatus(Constants.ENABLE_STATUS_T);
			customer.setGmtCreate(new Date());
			customer.setExtFlag(Constants.EXT_FLAG_T);
			userRealNameSet(userName, certNo, mobileNo, ucfUser, ucfCard,customer);
	}

	@Override
	public UcfBankCard setBankInfo(String userId,String cardType,String bankAccountNo,
			String bankCode, String bankName, final String mobileNo,
			String province, String city, String issuer, String branchName,String cvn2,String validDate)
			throws AccountException {
		final UcfBankCard insertBankCard = new UcfBankCard();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
		StringBuffer bankCardId = new StringBuffer();
		bankCardId.append(sdf.format(new Date()));
		bankCardId.append(ucfBankCardDao.getBankCardSeq());
		insertBankCard.setId(bankCardId.toString());
		insertBankCard.setUserId(userId);
		insertBankCard.setBankId(bankCode);
		insertBankCard.setBankName(bankName);
		insertBankCard.setProvince(province);
		insertBankCard.setPhone(mobileNo);
		insertBankCard.setCity(city);
		insertBankCard.setIssuer(issuer);
		insertBankCard.setCardNo(bankAccountNo.replace(" ", ""));// 银行卡号
		insertBankCard.setBranchname(branchName);
		insertBankCard.setConfirmStatus(EnumConfirmStatus.CONFIRM_YES.getCode());
		insertBankCard.setStatus(EnumBindBankCardStatus.SUCCESS.getCode());
		insertBankCard.setUnionSeq(ucfBankCardDao.getUnionSeq());
		insertBankCard.setCertStatus(EnumCertStatus.WIH_CERT.getCode());
		//add by gaoxiang MQ绑卡 使用类型为消费卡
		insertBankCard.setUseType(EnumBankCardUseType.CONSUME.getCode());
		if(EnumBankCardType.CREDIT_CARD.getCode().equals(cardType)){
			insertBankCard.setCardType(EnumBankCardType.CREDIT_CARD.getCode());
			if(!StringUtils.isEmpty(cvn2)){
				insertBankCard.setCvn2(Cryptos.aesEncrypt(cvn2));
			}
			if(!StringUtils.isEmpty(validDate)){
				insertBankCard.setValidDate(Cryptos.aesEncrypt(validDate));
			}
			insertBankCard.setIsPay("Y");
			insertBankCard.setIsWithdraw("N");
		}else{
			insertBankCard.setCardType(EnumBankCardType.DEBIT_CARD.getCode());
			insertBankCard.setIsPay("Y");
			insertBankCard.setIsWithdraw("Y");
		}
		return insertBankCard;
	}

	@Override
	public void userRealNameSet(final String userName, final String certNo,
			final String mobileNo, final UcfUser ucfUser,
			final UcfCard ucfCard, final UcfCustomer customer) {
		if (!"".equals(ucfCard.getCertFrom()) && ucfCard.getCertFrom() == null) {
			ucfCard.setCertFrom(EnumCertFrom.WEB_FROM.getCode());
		}
		if (StringUtils.isEmpty(ucfCard.getCertStatus())) {
			ucfCard.setCertStatus(EnumCertStatus.WIH_CERT.getCode());
		} else {
			if (ucfCard.getCertStatus().indexOf(EnumCertStatus.WIH_CERT.getCode()) == -1) {
				ucfCard.setCertStatus(ucfCard.getCertStatus() + ";"+ EnumCertStatus.WIH_CERT.getCode());
			}
		}
		if ("T".equals(ucfUser.getRealnameStatus())) {// 以实名认证
			boolean commit = (Boolean) transactionTemplate.execute(new TransactionCallback<Object>() {
				public Object doInTransaction(final TransactionStatus status) {
					try {
						// 判断customer表是否存在记录
						UcfCustomer anotherCustomer = new UcfCustomer();
						anotherCustomer.setCertNo(customer.getCertNo());
						anotherCustomer = loginService.queryUcfCustomerInfo(anotherCustomer);
						if (anotherCustomer == null) {
							loginService.insertCustomer(customer);
							anotherCustomer = new UcfCustomer();
							anotherCustomer.setCertNo(customer.getCertNo());
							anotherCustomer = loginService.queryUcfCustomerInfo(anotherCustomer);
						}
						ucfCard.setCustomerId(anotherCustomer.getCustomerId());
						cardService.updateUcfCard(ucfCard);

					} catch (final Exception e) {
						status.setRollbackOnly();
						LOGGER.error(e.getMessage(), e);
						return false;
					}
					return true;
				}
			});
			if (!commit) {
				LOGGER.info("用户绑卡设置实名失败");
			}
		} else {// 未实名认证
			boolean commit = (Boolean) transactionTemplate.execute(new TransactionCallback<Object>() {
				public Object doInTransaction(final TransactionStatus status) {
					try {
						// 判断customer表是否存在记录
						UcfCustomer anotherCustomer = new UcfCustomer();
						anotherCustomer.setCertNo(customer.getCertNo());
						anotherCustomer = loginService.queryUcfCustomerInfo(anotherCustomer);
						if (anotherCustomer == null) {
							loginService.insertCustomer(customer);
							anotherCustomer = new UcfCustomer();
							anotherCustomer.setCertNo(customer.getCertNo());
							anotherCustomer = loginService.queryUcfCustomerInfo(anotherCustomer);
						}
						// 插入Ucf_Person表
						final UcfPerson person = new UcfPerson();
						person.setCustomerId(anotherCustomer.getCustomerId());
						person.setRealName(userName);
						person.setCell(mobileNo);
						loginService.insertPersonInfo(person);
						// 更新Ucf_Card表
						ucfCard.setCustomerId(anotherCustomer.getCustomerId());
						loginService.updateUcfCard(ucfCard);
						ucfUser.setRealName(userName);
						ucfUser.setCertNo(certNo);
						ucfUser.setRealnameStatus(Constants.VERIFY_STATUS_T);
						loginService.updateUcfUser(ucfUser);
					} catch (final Exception e) {
						status.setRollbackOnly();
						LOGGER.error(e.getMessage(), e);
						return false;
					}
					return true;
				}
			});
			if (commit) {
				LOGGER.info("用户绑卡设置实名失败");
			}
		}
	}
	
	@Override
	public boolean match(String regex, String str) {
		Pattern pattern = Pattern.compile(regex);
		Matcher matcher = pattern.matcher(str);
		return matcher.matches();
	}

	@Override
	public void addWalletBankCard(String userId, String cardType, String bankAccountNo, String bankCode, String bankName,
			String mobileNo, String province, String city, String issuer,
			String branchName, String cvn2, String validDate) throws Exception {
		//查询消费卡
		List<UcfBankCard> list = bankCardService.queryUserBankInfosByUseType(userId, EnumBankCardUseType.CONSUME.getCode());
		if (list != null &&list.size()>0) {
			UcfBankCard ucfBankCard = list.get(0);
			bankCardService.deleteUcfBankCard(ucfBankCard.getId());
			LOGGER.info("删除已存在的消费卡:" + SensitiveInfoUtils.getJson(ucfBankCard));
		}
		final UcfBankCard insertBankCard = setBankInfo(userId,cardType,bankAccountNo, bankCode, bankName, mobileNo, province,city, issuer, branchName,cvn2,validDate);
		loginService.insertBankCardInfo(insertBankCard);
		LOGGER.info("用户[UserId:"+insertBankCard.getUserId()+"]绑定新的消费卡:" + SensitiveInfoUtils.getJson(insertBankCard));
	}
	
}
