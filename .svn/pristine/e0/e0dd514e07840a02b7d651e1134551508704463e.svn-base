package com.ucf.customer.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.ucf.account.ws.bo.AccountReturnValueBO;
import com.ucf.account.ws.bo.SearchAccountParamBo;
import com.ucf.account.ws.service.SearchAccountWS;
import com.ucf.customer.dao.UcfBankCardDao;
import com.ucf.customer.dao.UcfCustomerDao;
import com.ucf.customer.dao.UcfUserDao;
import com.ucf.customer.dao.UcfUserLoginAppDao;
import com.ucf.customer.pojo.UcfBankCard;
import com.ucf.customer.pojo.UcfCard;
import com.ucf.customer.pojo.UcfUser;
import com.ucf.customer.pojo.UcfUserLoginApp;
import com.ucf.customer.service.CardService;
import com.ucf.customer.service.UserService;
import com.ucf.customer.utils.Constants;
import com.ucf.customer.utils.enums.EnumRedisKey;
import com.ucf.customer.utils.exception.CustomerException;
import com.ucf.customer.ws.bo.BaseBO;
import com.ucf.customer.ws.bo.UserAuthParamBO;
import com.ucf.customer.ws.enums.EnumAuthType;
import com.ucf.customer.ws.enums.EnumMemberCode;
import com.ucf.customer.ws.service.UserServiceWS;
import com.ucf.onlinepay.framework.common.bean.Money;
import com.ucf.platform.framework.core.log.UcfLogger;
import com.ucf.platform.framework.core.log.UcfLoggerFactory;

@Service("userService")
public class UserServiceImpl implements UserService {

	private static UcfLogger LOGGER = UcfLoggerFactory .getLogger(UserServiceImpl.class);
	
	@Autowired
	private UcfBankCardDao ucfBankCardDao;
	@Autowired
	private CardService cardService;
	@Autowired
	private SearchAccountWS wsSearchAccountServiceClient;
	@Autowired
	private UcfUserLoginAppDao ucfUserLoginAppDao;
	@Autowired
	private UcfUserDao userDao;
	@Autowired
	private UcfCustomerDao customerDao;
	
	@Autowired
	private UserServiceWS userServiceWS;
	
	private static String bANK_NAME_CELL_AUTH_FLAG = "-1";
	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Override
	public Map queryAccountByUserId(String userId) {
		Map map = new HashMap();
		Money money = null;
		String enabledStatus = "";
		UcfCard card = new UcfCard();
		try {
			card = this.cardService.queryCardInfo(userId);
		} catch (Exception e) {
			LOGGER.error(e.getMessage(), e);
			map.put("res", "01");// 查询数据库异常
			return map;
		}
		SearchAccountParamBo accBalanceParamBO = new SearchAccountParamBo();
		accBalanceParamBO.setAccountNo(card.getAccountId());
		accBalanceParamBO.setTransCode(Constants.TRANS_CODE);
		accBalanceParamBO.setSubTransCode(Constants.SUB_TRANS_CODE);

		AccountReturnValueBO accBalanceReturnValueBO = null;
		try {
			if (wsSearchAccountServiceClient != null) {
				accBalanceReturnValueBO = wsSearchAccountServiceClient.searchAccount(accBalanceParamBO);
			} else {
				LOGGER.warn("error info ... or  throw Exception");
				map.put("res", "02");// 调用账务系统通讯异常
				return map;
			}
			if ("0000".equals(accBalanceReturnValueBO.getCode())) {
				money = accBalanceReturnValueBO.getBalance();
				enabledStatus = accBalanceReturnValueBO.getEnabledStatus();
				LOGGER.debug(accBalanceReturnValueBO.getCode() + ":" + accBalanceReturnValueBO.getMsg());
				LOGGER.debug("=" + accBalanceReturnValueBO.getBalanceDirection());
				LOGGER.debug("###获取账户余额-pay/ws/searchAccount接口返回：" + money);
			} else {
				money = accBalanceReturnValueBO.getBalance();
				LOGGER.warn(accBalanceReturnValueBO.getCode() + ":" + accBalanceReturnValueBO.getMsg());
				LOGGER.warn("###获取账户余额-pay/ws/searchAccount接口返回：" + money);
			}
		} catch (Exception e) {
			LOGGER.error("from AccountService:" + e.getMessage(), e);
			map.put("res", "02");// 调用账务系统通讯异常
			return map;
		}
		map.put("money", money);
		map.put("res", "00");
		map.put("enabledStatus", enabledStatus);
		return map;
	}

	public UcfUserLoginApp queryUserAppInfo(String userId) throws Exception {
		UcfUserLoginApp ucfUserLoginApp = new UcfUserLoginApp();
		List<UcfUserLoginApp> list = new ArrayList<UcfUserLoginApp>();
		ucfUserLoginApp.setUserId(userId);
		list = this.ucfUserLoginAppDao
				.queryUcfUserLoginAppListByWhere(ucfUserLoginApp);
		if (list.size() > 0) {
			return list.get(0);
		}
		return null;
	}

	@Override
	public List<UcfBankCard> queryUserBankInfos(String merchantId, String userId) {
		try {
			UcfBankCard ucfBankCard = new UcfBankCard();
			ucfBankCard.setUserId(userId);
			List<UcfBankCard> ucfBankCards = ucfBankCardDao
					.queryUcfBankCardListByWhere(ucfBankCard);
			return ucfBankCards;
		} catch (CustomerException e) {
			LOGGER.error(e.getMessage(), e);
			return null;
		}
	}
	
	@Override
	public List<UcfBankCard> queryUserBankInfos(String merchantId, String userId,String status) {
		try {
			UcfBankCard ucfBankCard = new UcfBankCard();
			ucfBankCard.setUserId(userId);
			ucfBankCard.setStatus(status);
			List<UcfBankCard> ucfBankCards = ucfBankCardDao.queryUcfBankCardListByWhere(ucfBankCard);
			return ucfBankCards;
		} catch (CustomerException e) {
			LOGGER.error(e.getMessage(), e);
			return null;
		}
	}

	@Override
	public UcfBankCard queryUserBankInfoById(String id) {
		try {
			return ucfBankCardDao.queryUcfBankCardById(id);
		} catch (Exception e) {
			LOGGER.error(e.getMessage(), e);
			return null;
		}
	}

	@Override
	public UcfUser queryUserInfoById(String userId) {
		try {
			UcfUser ucfUser = this.userDao.getUcfUserByUserId(userId);
			return ucfUser;
		} catch (Exception e) {
			LOGGER.error(e.getMessage(), e);
			return null;
		}
	}

	public UcfUser findUserInfo(String merchantId,String refUserId) throws Exception{
		UcfUser ucfUser = new UcfUser();
		ucfUser.setRefMerchant(merchantId);
		ucfUser.setRefUser(refUserId);
		List<UcfUser> list = userDao.queryUcfUserListByWhere(ucfUser);
		if(list!=null && list.size()>0){
			return list.get(0);
		}
		return null;
	}
	
	/**
	 * 查询用户信息
	 * @param merchantId
	 * @param cell
	 * @return
	 */
	public UcfUser findUserInfoByCell(String merchantId,String cell)  throws Exception{
		UcfUser ucfUser = new UcfUser();
		ucfUser.setRefMerchant(merchantId);
		ucfUser.setCell(cell);
		List<UcfUser> list = userDao.queryUcfUserListByWhere(ucfUser);
		if(list!=null && list.size()>0){
			return list.get(0);
		}
		return null;
	}
	
	@SuppressWarnings("deprecation")
	@Override
	public boolean canFindPayPwd(String bankId, String userId, String realName,
			String idNo, String bankNo, String cellNo) {
		try {
			UcfUser ucfUser = queryUserInfoById(userId);
			//没有绑过卡或者选择自定义银行
			if (bANK_NAME_CELL_AUTH_FLAG.equals(bankId)) {
				//先校验姓名和身份证再走校验鉴权接口
				if (ucfUser.getRealName().equals(realName) && ucfUser.getCertNo().equals(idNo)) {
					UserAuthParamBO userAuthParamBO = new UserAuthParamBO();
					userAuthParamBO.setBankCardNo(bankNo);
					userAuthParamBO.setPhone(cellNo);
					userAuthParamBO.setUserId(userId);
					userAuthParamBO.setType(EnumAuthType.NAME_CERT_BANK_CELL);
					BaseBO baseBO = userServiceWS.userAuth(userAuthParamBO);
					return baseBO.getRespCode().equals(EnumMemberCode.SUCCESS.getCode());
				} else {
					return false;
				}
			} else {
				UcfBankCard ucfBankCard = queryUserBankInfoById(bankId);
				if (ucfUser.getRealName().equals(realName) && ucfUser.getCertNo().equals(idNo)
						&& ucfBankCard.getCardNo().equals(bankNo)) {
					return true;
				} else {
					return false;
				}
			}
		} catch (Exception e) {
			LOGGER.error(e.getMessage(), e);
			return false;
		}
	}
	
	@Override
	public boolean verifyIdentity(String bankId, String userId, String realName,
			String idNo, String bankNo, String cellNo){
		try {
			UcfUser ucfUser = queryUserInfoById(userId);
			UcfBankCard ucfBankCard = null;
			//如果绑定银行卡则查询 绑定的银行卡信息
			if(StringUtils.isNotEmpty(bankId)){
				ucfBankCard = queryUserBankInfoById(bankId);
			}
			//如果ucfBankCard不为空 则校验银行卡号
			if(ucfBankCard!=null){
				if (ucfUser.getRealName().equals(realName) && ucfUser.getCertNo().equals(idNo)
						&& ucfBankCard.getCardNo().equals(bankNo.replace(" ", ""))) {
					return true;
				} else {
					return false;
				}
			}else{
				if (ucfUser.getRealName().equals(realName) && ucfUser.getCertNo().equals(idNo)) {
					return true;
				} else {
					return false;
				}
			}
		} catch (Exception e) {
			LOGGER.error(e.getMessage(), e);
			return false;
		}
		
	}
	

	@Override
	public UcfUserLoginApp queryUcfUserLoginApp(String loginName)
			throws Exception{
		UcfUserLoginApp ucfUserLoginApp = new UcfUserLoginApp();
		List<UcfUserLoginApp> list = new ArrayList<UcfUserLoginApp>();
		ucfUserLoginApp.setLoginId(loginName);
		list = this.ucfUserLoginAppDao.queryUcfUserLoginAppListByWhere(ucfUserLoginApp);
		if (list.size() > 0) {
			return list.get(0);
		}
		return null;
	}
	
	@Override
	public void insertUserInfo(UcfUser userInfo) throws Exception {
		this.userDao.insertUcfUser(userInfo);
	}
	
	@Override
	public void insertLoginAppInfo(UcfUserLoginApp ucfUserLoginApp)
			throws Exception {
		ucfUserLoginAppDao.insertUcfUserLoginApp(ucfUserLoginApp);
	}
	
	/**
	 * 用户id生成
	 * @return
	 * @throws Exception 
	 */
	public String  queryUcfUserId() throws Exception{
		return this.userDao.queryUcfUserId();
	}
	@Override
	public String queryUcfCustomerId() throws Exception {
		return this.customerDao.queryUcfCustomerId();
	}
	
	@Override
	public String getEnterpriseMemberNO() throws Exception {
		String enterpriseMemberNO_SEQ = this.userDao.getEnterpriseMemberNO_SEQ();
		return "M" + enterpriseMemberNO_SEQ;
	}
	
	@Override
	public String monitorValidConnent() throws Exception {
		return userDao.monitorValidConnent();
	}

	
	@Override
	public List<UcfUser> findAnonymousUser() throws Exception {
		List<UcfUser> list = userDao.findAnonymousUser();
		return list;
	}

	
	@Override
	public void refreshUserInfo(String userId) throws Exception {
		userDao.refreshUserInfo(userId,EnumRedisKey.UCF_USER_QUERY_BY_USERId.getTimeout());
	}

	@Override
	public List<UcfUser> listPageUcfUser(UcfUser user) throws Exception {
		List<UcfUser> list = userDao.listPageUcfUser(user);
		return list;
	}

	@Override
	public List<String> listPageUserId(UcfUser user) throws Exception {
		List<String> list = userDao.listPageUserId(user);
		return list;
	}
}
