package com.ucf.customer.ws.service.impl;

import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import javax.annotation.Resource;
import javax.security.auth.login.AccountException;

import org.apache.commons.lang.math.RandomUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.support.TransactionCallback;
import org.springframework.transaction.support.TransactionTemplate;

import com.alibaba.dubbo.common.utils.StringUtils;
import com.ucf.account.ws.bo.OpenAccountParamBO;
import com.ucf.account.ws.bo.OpenAccountReturnValueBo;
import com.ucf.account.ws.service.OpenAccountWS;
import com.ucf.customer.api.enums.EnumBankCardUseType;
import com.ucf.customer.api.enums.EnumCertType;
import com.ucf.customer.api.enums.EnumUserType;
import com.ucf.customer.bo.ResultBo;
import com.ucf.customer.dao.UcfBankCardDao;
import com.ucf.customer.dao.UcfCardDao;
import com.ucf.customer.dao.UcfOrgDao;
import com.ucf.customer.dao.UcfUserDao;
import com.ucf.customer.dao.UcfUserLoginAppDao;
import com.ucf.customer.pojo.UcfBankCard;
import com.ucf.customer.pojo.UcfCard;
import com.ucf.customer.pojo.UcfCustomer;
import com.ucf.customer.pojo.UcfOrg;
import com.ucf.customer.pojo.UcfSubCard;
import com.ucf.customer.pojo.UcfUser;
import com.ucf.customer.pojo.UcfUserLoginApp;
import com.ucf.customer.service.BankCardService;
import com.ucf.customer.service.CardService;
import com.ucf.customer.service.LoginService;
import com.ucf.customer.service.SMSService;
import com.ucf.customer.service.UserInfoService;
import com.ucf.customer.service.UserRegService;
import com.ucf.customer.utils.BOCheckUtil;
import com.ucf.customer.utils.BeanUtilEx;
import com.ucf.customer.utils.Constants;
import com.ucf.customer.utils.TransCode;
import com.ucf.customer.utils.enums.EnumAccountType;
import com.ucf.customer.utils.enums.EnumBindBankCardStatus;
import com.ucf.customer.utils.enums.EnumResType;
import com.ucf.customer.utils.enums.EnumResultCode;
import com.ucf.customer.utils.enums.EnumSMSTemplate;
import com.ucf.customer.utils.enums.EnumTrueFalse;
import com.ucf.customer.utils.enums.EnumUserEnabledStatus;
import com.ucf.customer.utils.enums.EnumVerifyLevle;
import com.ucf.customer.utils.exception.CustomerErrorCode;
import com.ucf.customer.utils.exception.CustomerException;
import com.ucf.customer.utils.exception.P2PCustomerException;
import com.ucf.customer.ws.bo.AccountInfoBO;
import com.ucf.customer.ws.bo.AccountInfoParamBO;
import com.ucf.customer.ws.bo.BaseBO;
import com.ucf.customer.ws.bo.P2PQueryUserinfoParamBo;
import com.ucf.customer.ws.bo.P2PQueryUserinfoReturnValueBo;
import com.ucf.customer.ws.bo.QueryAuthrealParamBo;
import com.ucf.customer.ws.bo.QueryAuthrealReturnValueBo;
import com.ucf.customer.ws.bo.RegistParamBo;
import com.ucf.customer.ws.bo.RegistReturnValueBo;
import com.ucf.customer.ws.bo.SmsBO;
import com.ucf.customer.ws.bo.UcfOrgBO;
import com.ucf.customer.ws.bo.UserAuthParamBO;
import com.ucf.customer.ws.bo.UserBankInfoBO;
import com.ucf.customer.ws.bo.UserCheckResultBO;
import com.ucf.customer.ws.bo.UserInfoBO;
import com.ucf.customer.ws.bo.UserLoginReturnBO;
import com.ucf.customer.ws.enums.EnumAuthType;
import com.ucf.customer.ws.enums.EnumBankCardType;
import com.ucf.customer.ws.enums.EnumBindCardType;
import com.ucf.customer.ws.enums.EnumCertFrom;
import com.ucf.customer.ws.enums.EnumCertStatus;
import com.ucf.customer.ws.enums.Enumbase_platformCode;
import com.ucf.customer.ws.enums.EnumRegisterFrom;
import com.ucf.customer.ws.enums.EnumUserRegisterStatus;
import com.ucf.customer.ws.service.UserServiceWS;
import com.ucf.onlinepay.framework.common.util.StringUtil;
import com.ucf.payment.util.constant.PaymentEnum;
import com.ucf.payment.ws.bo.AuthRealNameParamBo;
import com.ucf.payment.ws.bo.AuthRealNameWsReturnValueBo;
import com.ucf.payment.ws.service.IRealNameAuthWS;
import com.ucf.platform.framework.core.log.UcfLogger;
import com.ucf.platform.framework.core.log.UcfLoggerFactory;
import com.ucf.platform.framework.core.util.SensitiveInfoUtils;
import com.ucf.platform.framework.log.LoggerLevel;
import com.ucf.platform.framework.log.annotation.DigestLogAnnotated;

public class UserServiceWSImpl implements UserServiceWS {
	@Autowired
	private LoginService loginService;
	private static final UcfLogger LOGGER = UcfLoggerFactory.getLogger(UserServiceWSImpl.class);

	
	@Value("${com.ucf.base_platform.url}")
	private String base_platformUrl;
	private static String loginUrl = "/login/";
	private static String registrerd = "/reg/";

	@Autowired
	private UcfUserDao ucfUserDao;

	@Autowired
	private UcfBankCardDao ucfBankCardDao;

	@Autowired
	private UcfCardDao ucfCardDao;
	
	@Autowired
	private UcfUserLoginAppDao ucfUserLoginAppDao;

	@Autowired
	private CardService cardService;
	
	@Autowired
	private UserInfoService userInfoService;

	@Autowired
	private BankCardService bankCardService;

	@Autowired
	private UserRegService userRegService;
	@Autowired
	private OpenAccountWS openAccountWSClient;
	@Resource(name = "sharedTransactionTemplate")
	private TransactionTemplate transactionTemplate;

	@Autowired
	private UcfOrgDao ucfOrgDao;

	@Autowired(required = false)
	private IRealNameAuthWS iRealNameAuthWS;
	
	@Autowired
	private SMSService smsService;
	
	@Override
	@DigestLogAnnotated(digestIdentificationCode = "1006", logFileName = "DEFAULT.DIG", loggerLevel = LoggerLevel.INFO, isSensitiveInfo=true)
	public UserCheckResultBO checkUserByIdNum(String certNo, String certName) {
		UserCheckResultBO userCheckResultBO = new UserCheckResultBO();

		try {
			UcfCustomer customer = new UcfCustomer();
			customer.setCertNo(certNo);
			customer = loginService.queryUcfCustomerInfo(customer);

			// 会员已存在
			if (customer != null) {
				userCheckResultBO
						.setEnumUserRegisterStatus(EnumUserRegisterStatus.USER_REGISTERD);
				userCheckResultBO.setReturnUrl(base_platformUrl + loginUrl + "certNo="
						+ certNo);
			} else {
				userCheckResultBO
						.setEnumUserRegisterStatus(EnumUserRegisterStatus.USER_UNREGISTERED);
				userCheckResultBO.setReturnUrl(base_platformUrl + registrerd
						+ "certNo=" + certNo);
			}

		} catch (Exception e) {
			LOGGER.error(e.getMessage(), e);
			userCheckResultBO.setEnumbase_platformCode(Enumbase_platformCode.ERROR);
			return userCheckResultBO;
		}

		userCheckResultBO.setEnumbase_platformCode(Enumbase_platformCode.SUCCESS);
		return userCheckResultBO;
	}

	@Override
	public boolean cancelAccount(String userId) {
		return false;
	}

	@DigestLogAnnotated(digestIdentificationCode = "1006",
			logFileName = "DEFAULT.DIG",
		    loggerLevel = LoggerLevel.INFO)
	@Override
	public UserInfoBO getUsreInfoByUserId(String userid) {
		UserInfoBO userInfoBO = new UserInfoBO();
		UcfUser ucfUser = ucfUserDao.getUcfUserByUserId(userid);

		if (ucfUser != null) {
			userInfoBO.setUserCertNo(ucfUser.getCertNo());
			userInfoBO.setUserRealName(ucfUser.getRealName());
			userInfoBO.setUserId(ucfUser.getUserId());
			userInfoBO.setCell(ucfUser.getCell());
			userInfoBO.setUserType(ucfUser.getUserType() ==null ? EnumUserType.PERSON.getCode() :ucfUser.getUserType().toString());
			userInfoBO.setUserCertType(ucfUser.getCertType());
		}
		return userInfoBO;
	}

	@Override
	@DigestLogAnnotated(digestIdentificationCode = "1006", logFileName = "DEFAULT.DIG", loggerLevel = LoggerLevel.INFO, isSensitiveInfo=true)
	public AccountInfoBO queryAccountNo(AccountInfoParamBO accountInfoParamBD) {
		UcfCard card = null;
		AccountInfoBO accountInfoBO = new AccountInfoBO();
		accountInfoBO.setEnumbase_platformCode(Enumbase_platformCode.SUCCESS.getCode());
		if (StringUtil.isEmpty(accountInfoParamBD.getUserId())) {
			accountInfoBO.setEnumbase_platformCode(Enumbase_platformCode.PARAM_ERROR.getCode());
			accountInfoBO.setErrorMsg("会员id不能为空！");
			return accountInfoBO;
		}
		try {
			// 设置主卡
			card = cardService.queryCardInfo(accountInfoParamBD.getUserId());
			if (card == null) {
				accountInfoBO.setErrorMsg("该用户不存在主卡");
				accountInfoBO.setEnumbase_platformCode(Enumbase_platformCode.QUERY_ERROR.getCode());
				return accountInfoBO;
			}
			UcfUser ucfUser = ucfUserDao.getUcfUserByUserId(accountInfoParamBD.getUserId());
			accountInfoBO.setMainCardAccountId(card.getAccountId());
			if(ucfUser.getUserType()!=null){
				String userType = ucfUser.getUserType().toString();
				//匿名用户类型  修改为 个人用户类型
				userType = "2".equals(userType)?"2":"1";
				accountInfoBO.setUserType(userType);
			}
			// 查询子卡
			if (accountInfoParamBD.getEnumsSubCardType() != null) {
				if ("0".equals(card.getSubCardFlag())) {// 0存在子卡
					UcfSubCard ucfSubCard = new UcfSubCard();
					ucfSubCard.setCardNo(card.getCardNo());
					ucfSubCard.setCardType(accountInfoParamBD.getEnumsSubCardType());
					List<UcfSubCard> list = cardService.queryUcfSubCard(ucfSubCard);
					if (null != list && 0 < list.size()) {
						accountInfoBO.setSubCardAccountId(list.get(0).getAccountNo());
						accountInfoBO.setEnumbase_platformCode(Enumbase_platformCode.SUCCESS.getCode());
						return accountInfoBO;
					} else {
						accountInfoBO.setErrorMsg("该用户不存在子卡");
						accountInfoBO.setEnumbase_platformCode(Enumbase_platformCode.QUERY_ERROR.getCode());
					}
				} else {
					accountInfoBO.setErrorMsg("该用户不存在子卡");
					accountInfoBO.setEnumbase_platformCode(Enumbase_platformCode.QUERY_ERROR.getCode());
				}
			}
		} catch (Exception e) {
			LOGGER.error(e.getMessage());
			accountInfoBO.setEnumbase_platformCode(Enumbase_platformCode.ERROR.getCode());
			accountInfoBO.setErrorMsg("会员系统出现异常！");
		}
		return accountInfoBO;
	}

	@Override
	@DigestLogAnnotated(digestIdentificationCode = "1006", logFileName = "DEFAULT.DIG", loggerLevel = LoggerLevel.INFO, isSensitiveInfo=true)
	public UserLoginReturnBO login(String userId, String cookieVal) {
		return null;
	}

	@Override
	@DigestLogAnnotated(digestIdentificationCode = "1006", logFileName = "DEFAULT.DIG", loggerLevel = LoggerLevel.INFO, isSensitiveInfo=true)
	public UserBankInfoBO queryUserBankInfos(String merchantId, String userId) {
		LOGGER.info("validateRealName:" + "merchantId-" + merchantId + " userId-" + userId);
		UserBankInfoBO userBankInfoBO = new UserBankInfoBO();
		try {
			LOGGER.info("----入参：merchantId :" + merchantId+ "| userId:" + userId );
			// 参数校验
			if (StringUtil.isEmpty(merchantId) || StringUtil.isEmpty(userId)) {
				userBankInfoBO.setStatus(Enumbase_platformCode.PARAM_ERROR.getCode());
				userBankInfoBO
						.setRespCode(Enumbase_platformCode.PARAM_ERROR.getCode());
				userBankInfoBO.setRespMsg(Enumbase_platformCode.PARAM_ERROR.getMsgS());
				return userBankInfoBO;
			}

//			// 查询银行卡数据
//			List<UcfBankCard> ucfBankCards = bankCardService.queryUserBankInfos(userId);
			//modify by gaoxiang 查询理财卡
			List<UcfBankCard> ucfBankCards = bankCardService.queryUserBankInfosByUseType(userId, EnumBankCardUseType.FINANCIAL.getCode());
			
			List<com.ucf.customer.ws.bo.UcfBankCard> ucfBankCardsBo = new ArrayList<com.ucf.customer.ws.bo.UcfBankCard>();
			BeanUtilEx.copyPropertiesList(ucfBankCardsBo, ucfBankCards,
					com.ucf.customer.ws.bo.UcfBankCard.class);
			userBankInfoBO.setBankCards(ucfBankCardsBo);

			userBankInfoBO.setStatus(Enumbase_platformCode.SUCCESS.getCode());
			userBankInfoBO.setRespCode(Enumbase_platformCode.SUCCESS.getCode());
			userBankInfoBO.setRespMsg(Enumbase_platformCode.SUCCESS.getMsgS());

		} catch (Exception e) {
			LOGGER.error(e.getMessage());
			userBankInfoBO.setStatus(Enumbase_platformCode.ERROR.getCode());
			userBankInfoBO.setRespCode(Enumbase_platformCode.ERROR.getCode());
			userBankInfoBO.setRespMsg(Enumbase_platformCode.ERROR.getMsgS());
		}
		return userBankInfoBO;
	}

	@Override
	@DigestLogAnnotated(digestIdentificationCode = "1006", logFileName = "DEFAULT.DIG", loggerLevel = LoggerLevel.INFO, isSensitiveInfo=true)
	public synchronized BaseBO bindBankCard(UserInfoBO userInfoBO) {
		BaseBO baseBO = new BaseBO();
		LOGGER.info("bindBankCard绑卡传入参数：" + SensitiveInfoUtils.getJson(userInfoBO));
		try {
			// 查询用户已经绑定的银行卡
			//modify by gaoxiang 查询是否绑定理财卡
			List<UcfBankCard> list = bankCardService.queryUserBankInfosByUseType(userInfoBO.getUserId(), EnumBankCardUseType.FINANCIAL.getCode());
			// 参数校验
			baseBO = checkParam(userInfoBO, baseBO, list);
			if (baseBO.getStatus().equals(Enumbase_platformCode.ERROR.getCode())) {
				return baseBO;
			}
			// 标准绑卡
			if (EnumBindCardType.O.getCode().equals(userInfoBO.getType()) || StringUtil.isEmpty(userInfoBO.getType())) {
				commonBindCard(userInfoBO, baseBO);
			} else {
				unionBindCard(userInfoBO, baseBO, list);
			}

		} catch (Exception e) {
			LOGGER.error(e.getMessage());
			baseBO.setRespCode(Enumbase_platformCode.ERROR.getCode());
			baseBO.setStatus(Enumbase_platformCode.ERROR.getCode());
			baseBO.setRespMsg((Enumbase_platformCode.ERROR.getMsgS()));

		}

		return baseBO;
	}

	private BaseBO checkParam(UserInfoBO userInfoBO, BaseBO baseBO, List<UcfBankCard> list) {
		String result = BOCheckUtil.check(userInfoBO);
		if (!result.equals(EnumTrueFalse.TRUE.getCode())) {
			baseBO.setRespCode(Enumbase_platformCode.PARAM_ERROR.getCode());
			baseBO.setStatus(Enumbase_platformCode.ERROR.getCode());
			baseBO.setRespMsg(result);
			return baseBO;
		}

		if (!EnumBankCardType.isExist(userInfoBO.getCardType())) {
			baseBO.setRespCode(Enumbase_platformCode.PARAM_ERROR.getCode());
			baseBO.setStatus(Enumbase_platformCode.ERROR.getCode());
			baseBO.setRespMsg("卡类型错误：只能绑定借记卡 和贷记卡");
			return baseBO;
		}

		if (list.size() > 4) {
			baseBO.setRespCode(Enumbase_platformCode.PARAM_ERROR.getCode());
			baseBO.setStatus(Enumbase_platformCode.ERROR.getCode());
			baseBO.setRespMsg("最大只能添加5张银行卡");
			return baseBO;
		}

		// 如果绑卡类型 是预绑卡 ，修改，提现银行卡 需要控制 卡数量必须是1
		if (EnumBindCardType.P.getCode().equals(userInfoBO.getType())
				|| EnumBindCardType.U.getCode().equals(userInfoBO.getType())
				|| EnumBindCardType.W.getCode().equals(userInfoBO.getType())) {

			if (list.size() > 1) {
				LOGGER.error("数据异常： 用户银行卡数已经超过一张！");
				baseBO.setRespCode(Enumbase_platformCode.PARAM_ERROR.getCode());
				baseBO.setStatus(Enumbase_platformCode.ERROR.getCode());
				baseBO.setRespMsg("用户银行卡数已经超过一张！");
				return baseBO;
			}

			if (list.size() == 1
					&& !EnumBindBankCardStatus.FAILE.getCode().equals(list.get(0).getStatus())
					&& EnumBindCardType.P.getCode().equals(userInfoBO.getType())) {
				LOGGER.error("请求异常： 用户当前已经绑定银行卡，无法再次预绑卡");
				baseBO.setRespCode(Enumbase_platformCode.PARAM_ERROR.getCode());
				baseBO.setStatus(Enumbase_platformCode.ERROR.getCode());
				baseBO.setRespMsg("用户当前已经绑定银行卡，无法再次预绑卡");
				return baseBO;
			}

			if (EnumBindCardType.U.getCode().equals(userInfoBO.getType()) && list.size() == 0) {
				LOGGER.error("数据异常： 用户没有绑定过一张银行卡无法进行修改！");
				baseBO.setRespCode(Enumbase_platformCode.PARAM_ERROR.getCode());
				baseBO.setStatus(Enumbase_platformCode.ERROR.getCode());
				baseBO.setRespMsg("用户没有绑定过一张银行卡无法进行修改！");
				return baseBO;
			}
			
			if (EnumBindCardType.U.getCode().equals(userInfoBO.getType()) && list.size() == 1) {
				if (!list.get(0).getCardNo().equals(userInfoBO.getCardNo()) || 
					!list.get(0).getBankId().equals(userInfoBO.getBankCode())) {
					baseBO.setRespCode(Enumbase_platformCode.PARAM_ERROR.getCode());
					baseBO.setStatus(Enumbase_platformCode.ERROR.getCode());
					baseBO.setRespMsg("银行卡号不一致，无法修改");
					return baseBO;
				}
			}
		}
		baseBO.setStatus(Enumbase_platformCode.SUCCESS.getCode());
		return baseBO;
	}

	/**
	 * 同卡绑卡
	 * @param userInfoBO
	 * @param baseBO
	 * @param list
	 * @throws Exception
	 */
	private void unionBindCard(UserInfoBO userInfoBO, BaseBO baseBO, List<UcfBankCard> list) throws Exception {
		UcfBankCard insertBankCard = null;
		if (list.size() == 0) {
			insertBankCard = new UcfBankCard();
			StringBuffer id = new StringBuffer();
			SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
			StringBuffer buf = id.append(sdf.format(new Date()));
			StringBuffer seq = buf.append(ucfBankCardDao.getBankCardSeq());
			insertBankCard.setId(seq.toString());
			insertBankCard.setGmtCreate(new Date());
			insertBankCard.setUnionSeq(0);
			//add by gaoxiang P2P预绑卡 使用类型为理财卡
			insertBankCard.setUseType(EnumBankCardUseType.FINANCIAL.getCode());
		} else {
			insertBankCard = list.get(0);
			LOGGER.info("修改前银行卡数据：" + SensitiveInfoUtils.getJson(insertBankCard));
		}
		// 企业用户绑卡，则设置银行卡类型为对公账户
		UcfUser ucfUser = ucfUserDao.getUcfUserByUserId(userInfoBO.getUserId());
		String userType = String.valueOf(ucfUser.getUserType());
		if (EnumUserType.ENTERPRISE.getCode().equals(userType)) {
			insertBankCard.setCardType(com.ucf.customer.api.enums.EnumBankCardType.BUSINESS_ACCOUNT.getCode());
		} else {
			insertBankCard.setCardType(userInfoBO.getCardType());
		}
		if(userInfoBO.isAduit()){
			insertBankCard.setCertStatus(com.ucf.customer.api.enums.EnumCertStatus.AUDIT_CERT.getCode());
		}
		// 设置绑卡状态
		if(EnumBindCardType.P.getCode().equals(userInfoBO.getType())){
			insertBankCard.setStatus( EnumBindBankCardStatus.INIT.getCode());
		}else {
			insertBankCard.setStatus( EnumBindBankCardStatus.SUCCESS.getCode());
		}
		insertBankCard.setUserId(userInfoBO.getUserId());
		insertBankCard.setBankId(userInfoBO.getBankCode());
		insertBankCard.setBankName(userInfoBO.getBankName());
		insertBankCard.setProvince(userInfoBO.getProvince());
		insertBankCard.setCity(userInfoBO.getCity());
		insertBankCard.setCardNo(userInfoBO.getCardNo().replace(" ", ""));
		insertBankCard.setBranchname(userInfoBO.getBranchBankName());
		insertBankCard.setIssuer(userInfoBO.getBranchBankId());
		insertBankCard.setIssuer(userInfoBO.getBranchBankId());
		insertBankCard.setGmtModified(new Date());
		insertBankCard.setPhone(userInfoBO.getCell());
		if (list.size() == 0) {
			this.ucfBankCardDao.insertUcfBankCard(insertBankCard);
			LOGGER.info("-------预绑卡/绑提现卡：" + SensitiveInfoUtils.getJson(insertBankCard));
		} else {
			this.ucfBankCardDao.updateUcfBankCard(insertBankCard);
			LOGGER.info("修改后银行卡数据：" + SensitiveInfoUtils.getJson(insertBankCard));
			//add by gaoxiang P2P 覆盖提现卡 设置用户认证级别高 和 状态 为 人工审核认证
			UcfUser user = ucfUserDao.getUcfUserByUserId(userInfoBO.getUserId());
			ResultBo rsbo = userInfoService.realName(user.getUserId(), user.getRealName(), user.getCertType(), user.getCertNo(), com.ucf.customer.api.enums.EnumCertStatus.AUDIT_CERT.getCode());
			if(!EnumResultCode.SUCCESS.getCode().equals(rsbo.getResult())){
				LOGGER.error("设置提现卡成功，为用户设置高级认证级别失败，异常信息:"+rsbo.getMsg());
				throw new P2PCustomerException();
			}
		}
		baseBO.setRespCode(Enumbase_platformCode.SUCCESS.getCode());
		baseBO.setStatus(Enumbase_platformCode.SUCCESS.getCode());
		baseBO.setRespMsg((Enumbase_platformCode.SUCCESS.getMsgS()));
	}

	/**
	 * 标准绑卡
	 * @param userInfoBO
	 * @param baseBO
	 * @throws Exception
	 * @throws AccountException
	 */
	private void commonBindCard(UserInfoBO userInfoBO, BaseBO baseBO) throws Exception, AccountException {
		// 卡校验，是否被绑定过
		UcfBankCard card = new UcfBankCard();
		UcfUser ucfUser = new UcfUser();
		ucfUser.setUserId(userInfoBO.getUserId());
		if (!bankCardService.checkCardNum(ucfUser)) {
			baseBO.setRespCode(Enumbase_platformCode.PARAM_ERROR.getCode());
			baseBO.setRespMsg("最大只能添加5张银行卡");
			return;
		}
		// 新增提现银行卡
		UcfBankCard cardnew = new UcfBankCard();
		List<UcfBankCard> listnew = new ArrayList<UcfBankCard>();
		cardnew.setUserId(ucfUser.getUserId());
		cardnew.setCardNo(userInfoBO.getCardNo().replace(" ", ""));
		listnew = this.loginService.queryUcfBankCard(card);

		if (listnew != null && listnew.size() > 0) {
			baseBO.setRespCode(Enumbase_platformCode.PARAM_ERROR.getCode());
			baseBO.setRespMsg("本卡已经被绑定，不能重复绑定！");
			return;
		}

		// 插入卡
		UcfBankCard insertBankCard = new UcfBankCard();
		StringBuffer id = new StringBuffer();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
		StringBuffer buf = id.append(sdf.format(new Date()));
		StringBuffer seq = buf.append(ucfBankCardDao.getBankCardSeq());
		insertBankCard.setId(seq.toString());
		insertBankCard.setUserId(userInfoBO.getUserId());
		insertBankCard.setBankId(userInfoBO.getBankCode());
		insertBankCard.setBankName(userInfoBO.getBankName());
		insertBankCard.setProvince(userInfoBO.getProvince());
		insertBankCard.setCity(userInfoBO.getCity());
		insertBankCard.setCardNo(userInfoBO.getCardNo().replace(" ", ""));
		insertBankCard.setBranchname(userInfoBO.getBankName());
		insertBankCard.setIssuer(userInfoBO.getBranchBankId());
//		insertBankCard.setCertStatus(EnumBankCardStatus.NORMAL.getCode());
		insertBankCard.setIssuer(userInfoBO.getBranchBankId());
		insertBankCard.setCardType(userInfoBO.getCardType());
		insertBankCard.setGmtCreate(new Date());
		insertBankCard.setGmtModified(new Date());
		insertBankCard.setPhone(userInfoBO.getCell());
		insertBankCard.setUnionSeq(ucfBankCardDao.getUnionSeq());
		insertBankCard.setStatus(EnumBindBankCardStatus.SUCCESS.getCode());
		this.ucfBankCardDao.insertUcfBankCard(insertBankCard);
		LOGGER.info("-------标准绑卡：" + SensitiveInfoUtils.getJson(insertBankCard));
		baseBO.setRespCode(Enumbase_platformCode.SUCCESS.getCode());
		baseBO.setRespMsg((Enumbase_platformCode.SUCCESS.getMsgS()));
	}

	@DigestLogAnnotated(digestIdentificationCode = "1006",
			logFileName = "DEFAULT.DIG",
		    loggerLevel = LoggerLevel.INFO)
	@Override
	public BaseBO updateBankCardStatus(String merchantId, String userId,
			String bankCardNo, String status) {
		BaseBO baseBO = new BaseBO();
		LOGGER.info("预绑卡后修改状态传染参数：merchantId[" + merchantId + "] userId[" + merchantId + "] status [" + status + "]  bankCardNo[" + SensitiveInfoUtils.bankCard(bankCardNo) + "]");
		try {
			baseBO.setRespCode(Enumbase_platformCode.SUCCESS.getCode());
			UcfBankCard ucfBankCard = bankCardService.queryUserBankInfo(userId, bankCardNo, Constants.STATUS_ING);
			if(ucfBankCard==null){
				baseBO.setRespMsg((Enumbase_platformCode.NO_EXIST_USER_BANK_CARD.getMsgS()));
				baseBO.setStatus(Enumbase_platformCode.NO_EXIST_USER_BANK_CARD.getCode());	
			}else{
				ucfBankCard.setStatus(status);
				bankCardService.updateUcfBankCard(ucfBankCard);
				baseBO.setRespMsg((Enumbase_platformCode.SUCCESS.getMsgS()));
				baseBO.setStatus(Enumbase_platformCode.SUCCESS.getCode());
			}
		} catch (Exception e) {
			LOGGER.error("预绑卡后修改状态失败", e);
			baseBO.setRespCode(Enumbase_platformCode.ERROR.getCode());
			baseBO.setRespMsg((Enumbase_platformCode.ERROR.getMsgS()));
			baseBO.setStatus(Enumbase_platformCode.ERROR.getCode());
		}
		LOGGER.info("预绑卡后修改状态输出参数：" + SensitiveInfoUtils.getJson(baseBO));
		return baseBO;
	}

	@DigestLogAnnotated(digestIdentificationCode = "1006",
			logFileName = "DEFAULT.DIG",
		    loggerLevel = LoggerLevel.INFO)
	@Override
	public SmsBO sendSms(String merchantId, String phoneNumber) {
		LOGGER.info("发送短信：sendSms[" + merchantId + "] phoneNumber[" + SensitiveInfoUtils.mobilePhone(phoneNumber) + "]");
		SmsBO smsBO = new SmsBO();
		if (StringUtil.isEmpty(merchantId) || StringUtil.isEmpty(phoneNumber)) {
			smsBO.setRespCode(Enumbase_platformCode.PARAM_ERROR.getCode());
			smsBO.setRespMsg(Enumbase_platformCode.PARAM_ERROR.getMsgS());
			return smsBO;
		}
		try{	
			ResultBo checkVfbo = smsService.sendVfyCodeSMS(merchantId,phoneNumber, EnumSMSTemplate.base_platformVfyCode.getContent());
			if(EnumResultCode.SUCCESS.getCode().equals(checkVfbo.getResult())){
				smsBO.setRespCode(Enumbase_platformCode.SUCCESS.getCode());
				smsBO.setRespMsg(Enumbase_platformCode.SUCCESS.getMsgS());
				smsBO.setStatus(Enumbase_platformCode.SUCCESS.getCode());
				smsBO.setCode(checkVfbo.getResultObject().toString());
			}else{
				smsBO.setRespCode(Enumbase_platformCode.ERROR.getCode());
				smsBO.setRespMsg(checkVfbo.getMsg());
				smsBO.setStatus(Enumbase_platformCode.ERROR.getCode());
				smsBO.setCode("");
			}			
		}catch(Exception e){
			smsBO.setRespCode(Enumbase_platformCode.ERROR.getCode());
			smsBO.setRespMsg(Enumbase_platformCode.ERROR.getMsgS());
			smsBO.setStatus(Enumbase_platformCode.ERROR.getCode());
			smsBO.setCode("");
			LOGGER.error(e.getMessage(), e);
		}
		return smsBO;
	}

	@DigestLogAnnotated(digestIdentificationCode = "1006",
			logFileName = "DEFAULT.DIG",
		    loggerLevel = LoggerLevel.INFO)
	@Override
	public SmsBO checkSms(String merchantId, String phoneNumber, String code) {
		LOGGER.info("发送短信：checkSms[" + merchantId + "] phoneNumber[" + SensitiveInfoUtils.mobilePhone(phoneNumber) + "]");
		SmsBO smsBO = new SmsBO();
		try{
			if (StringUtil.isEmpty(code)) {
				smsBO.setRespCode(Enumbase_platformCode.PARAM_ERROR.getCode());
				smsBO.setRespMsg("校验码为不能为空！");
				smsBO.setCode(null);
				smsBO.setCheckResult(false);
				return smsBO;
			}			
			ResultBo checkVfbo = smsService.checkVfyCode(merchantId,phoneNumber, code);
			if(EnumResultCode.SUCCESS.getCode().equals(checkVfbo.getResult())){
				smsBO.setRespCode(Enumbase_platformCode.SUCCESS.getCode());
				smsBO.setRespMsg(Enumbase_platformCode.SUCCESS.getMsgS());
				smsBO.setCheckResult(true);
			}else if(EnumResultCode.FAI.getCode().equals(checkVfbo.getResult())){
				smsBO.setRespCode(Enumbase_platformCode.QUERY_ERROR.getCode());
				smsBO.setRespMsg("校验码错误！");
				if(checkVfbo.getResultObject()!=null){
					smsBO.setCode(checkVfbo.getResultObject().toString());
				}				
				smsBO.setCheckResult(false);
				return smsBO;
			}else{
				smsBO.setRespCode(Enumbase_platformCode.QUERY_CODE_NO_EXIST.getCode());
				smsBO.setRespMsg("校验失败，短信验证码过期或不存在！");
				if(checkVfbo.getResultObject()!=null){
					smsBO.setCode(checkVfbo.getResultObject().toString());
				}	
				smsBO.setCheckResult(false);
				return smsBO;
			}
		}catch(Exception e){
			smsBO.setRespCode(Enumbase_platformCode.ERROR.getCode());
			smsBO.setRespMsg("系统异常！");
			smsBO.setCode(Enumbase_platformCode.ERROR.getCode());
			smsBO.setCheckResult(false);
			LOGGER.error(e.getMessage(), e);
		}
		return smsBO;
	}

	@Override
	@DigestLogAnnotated(digestIdentificationCode = "1006", logFileName = "DEFAULT.DIG", loggerLevel = LoggerLevel.INFO, isSensitiveInfo=true)
	public RegistReturnValueBo openAccount(RegistParamBo bo) {
		LOGGER.info("注册开户 openAccount:" + SensitiveInfoUtils.getJson(bo));
		RegistReturnValueBo returnBo = new RegistReturnValueBo();

		// 参数校验
		String result = BOCheckUtil.check(bo);
		if (!result.equals(EnumTrueFalse.TRUE.getCode())) {
			returnBo.setRespCode(Enumbase_platformCode.PARAM_ERROR.getCode());
			returnBo.setRespMsg(result);
			return returnBo;
		}

		try {
			final UcfUser user = new UcfUser();
			user.setCell(bo.getPhoneNo());
			user.setRefMerchant(bo.getMerchantId());
			List<UcfUser> ucfUsers = ucfUserDao.queryUcfUserListByWhere(user);

			if (ucfUsers.size() > 0) {
				UcfUser u = ucfUsers.get(0);
				if(u.getRealName().equals(bo.getRealName()) && u.getCertNo().equals(bo.getIdNo())){
					returnBo.setRespCode(Enumbase_platformCode.SUCCESS.getCode());
					returnBo.setRespMsg(Enumbase_platformCode.EXIST_USER.getMsgS());
					returnBo.setUserId(u.getUserId());
					returnBo.setStatus(Enumbase_platformCode.EXIST_USER.getCode());
				}else{
					returnBo.setRespCode(Enumbase_platformCode.SUCCESS.getCode());
					returnBo.setRespMsg(Enumbase_platformCode.EXIST_MOBLEPHOE.getMsgS());
					returnBo.setStatus(Enumbase_platformCode.EXIST_MOBLEPHOE.getCode());
				}	
				return returnBo;
			}

			String userId = userRegService.queryUcfUserId();
			Date date = new Date();

			user.setCell(bo.getPhoneNo());
			user.setCertType(bo.getIdType());
			user.setCertNo(bo.getIdNo());
			user.setUserId(userId);
			user.setRealName(bo.getRealName());
			user.setGmtCreate(date);
			String userType = bo.getUserType();
			long ut = Long.parseLong(userType);
			BigDecimal but = BigDecimal.valueOf(ut);
			user.setUserType(but);
			user.setLoginId(bo.getPhoneNo());
			// add by lwj p2p注册默认实名通过
			//modify by gaoxiang 如果传递认证状态 则以传递的值为准
			user.setRealnameStatus(StringUtils.isNotEmpty(bo.getRealNameStatus())?bo.getRealNameStatus():Constants.VERIFY_STATUS_T);
			user.setVerifyStatus(EnumVerifyLevle.REGISTER.getCode());//注册实名认证级别
			final UcfCard card = new UcfCard();
			card.setCardNo(userId);
			card.setUserId(userId);
			card.setCardType(bo.getIdType());
			card.setRegisterFrom(EnumRegisterFrom.P2P_FROM.getCode());
			card.setGmtCreate(date);

			// add by lwj p2p注册默认实名通过
			//modify by gaoxiang 如果传递认证类型 则以传递的值为准
			card.setCertFrom(EnumCertFrom.APP_FROM.getCode());
			card.setCertStatus(StringUtils.isNotEmpty(bo.getCertStatus())?bo.getCertStatus():EnumCertStatus.P2P_CERT.getCode());

			OpenAccountParamBO openAccountParamBO = new OpenAccountParamBO();
			openAccountParamBO.setCardId(card.getCardNo());
			openAccountParamBO.setAccountType(EnumAccountType.PERSON.getCode());
			openAccountParamBO.setCreateOperator(Constants.OPERATE);
			openAccountParamBO.setCurrency(Constants.TRANS_CUR);
			openAccountParamBO.setBalanceDirection(Constants.BANLANCE_DIR);
			openAccountParamBO.setTransCode(TransCode.OPENACCOUNT
					.getTransCode());
			openAccountParamBO.setSubTransCode(TransCode.OPENACCOUNT
					.getSubTransCode());
			openAccountParamBO.setOutOrderNo("" + UUID.randomUUID());
			openAccountParamBO.setTransRule(Constants.TRANS_RULE_YES);
			if (LOGGER.isDebugEnabled()) {
				LOGGER.debug("调用开户接口传入参数："
						+ SensitiveInfoUtils.getJson(openAccountParamBO));//账务系统修改
			}
			final OpenAccountReturnValueBo ret = openAccountWSClient
					.openAccount(openAccountParamBO);
			if (null == ret || !ret.getCode().equals("0000")) {
				LOGGER.error("账户返回：" + SensitiveInfoUtils.getJson(ret));//账务系统修改
				returnBo.setRespMsg("调用账户开户失败");
				returnBo.setRespCode(Enumbase_platformCode.ERROR.getCode());
				return returnBo;

			} else {
				card.setAccountId(ret.getAccountNo());
				boolean commit = (Boolean) transactionTemplate
						.execute(new TransactionCallback<Object>() {
							public Object doInTransaction(
									final TransactionStatus status) {
								try {
									// 保存用户信息
									userRegService.insertUserInfo(user);
									// 保存卡信息
									loginService.insertCardInfo(card);
								} catch (final Exception e) {
									status.setRollbackOnly();
									LOGGER.error(e.getMessage());
									return false;
								}
								return true;
							}
						});

				if (!commit) {
					final String errMsg = "用户注册失败，事务提交失败";
					LOGGER.info("from OpenAccountWsImpl : ", errMsg);
					returnBo.setRespMsg(errMsg);
				} else {
					returnBo.setUserId(userId);
					returnBo.setStatus(Enumbase_platformCode.SUCCESS.getCode());
					returnBo.setRespCode(Enumbase_platformCode.SUCCESS.getCode());
					returnBo.setRespMsg(Enumbase_platformCode.SUCCESS.getMsgS());
					LOGGER.info("注册成功 ，userId:", userId);
				}

			}
		} catch (Exception e) {
			LOGGER.error(e.getMessage(), e);
			returnBo.setRespCode(Enumbase_platformCode.ERROR.getCode());
			returnBo.setRespMsg("用户注册失败");
			returnBo.setStatus(Enumbase_platformCode.ERROR.getCode());
		}

		return returnBo;
	}
	
	@DigestLogAnnotated(digestIdentificationCode = "1006",
			logFileName = "DEFAULT.DIG",
		    loggerLevel = LoggerLevel.INFO)
	@Override
	public RegistReturnValueBo register(RegistParamBo bo) {
		RegistReturnValueBo registReturnValueBo = new RegistReturnValueBo();
		try {
			if(bo.getIdNo()==null || "".equals(bo.getIdNo().trim())
					|| bo.getMerchantId()==null || "".equals(bo.getMerchantId().trim())
					|| bo.getPhoneNo()==null || "".equals(bo.getPhoneNo().trim())
					|| bo.getRealName()==null || "".equals(bo.getRealName().trim())
					){
				registReturnValueBo.setRespCode(Enumbase_platformCode.PARAM_ERROR.getCode());
				registReturnValueBo.setRespMsg(Enumbase_platformCode.PARAM_ERROR.getMsgS());
				registReturnValueBo.setStatus(Enumbase_platformCode.PARAM_ERROR.getCode());
				return registReturnValueBo;
			}
			UcfUserLoginApp loginApp = new UcfUserLoginApp();
			loginApp.setPhone(bo.getPhoneNo().replace(" ", ""));
			List<UcfUserLoginApp> loginAppList = ucfUserLoginAppDao.queryUcfUserLoginAppListByWhere(loginApp);
			if(loginAppList.size()==1){
				UcfUser user = new UcfUser();
				user.setCell(bo.getPhoneNo().replace(" ", ""));
				user.setRefMerchant(bo.getMerchantId().replace(" ", ""));
				user.setUserType(BigDecimal.valueOf(Integer.valueOf(EnumUserType.PERSON.getCode())));
				user.setRealName(bo.getRealName().replace(" ", ""));
				user.setCertNo(bo.getIdNo().replace(" ", ""));
				List<UcfUser> userList = this.loginService.queryUcfUser(user);
				if(userList.size()>0){
					registReturnValueBo.setStatus(Enumbase_platformCode.SUCCESS.getCode());
					registReturnValueBo.setRespCode(Enumbase_platformCode.SUCCESS.getCode());
					registReturnValueBo.setRespMsg(Enumbase_platformCode.EXIST_USER.getMsgS());
					registReturnValueBo.setUserId(((UcfUser)userList.get(0)).getUserId());
					return registReturnValueBo;
				}else{
					registReturnValueBo.setStatus(Enumbase_platformCode.CELL_IS_USING.getCode());
					registReturnValueBo.setRespCode(Enumbase_platformCode.CELL_IS_USING.getCode());
					registReturnValueBo.setRespMsg(Enumbase_platformCode.CELL_IS_USING.getMsgS());
					return registReturnValueBo;
				}
			}	
			//生成用户ID
			String userId = userRegService.queryUcfUserId();
			
			// 此时生成用户信息
			final UcfUser ucfUser = new UcfUser();
			ucfUser.setUserId(userId);
			ucfUser.setRefMerchant(bo.getMerchantId().replace(" ", ""));
			ucfUser.setEnabledStatus(EnumUserEnabledStatus.Q.getCode());//Q：快速注册
			ucfUser.setCell(bo.getPhoneNo().replace(" ", ""));
			ucfUser.setCertNo(bo.getIdNo().replace(" ", ""));
			ucfUser.setCertType(EnumCertType.ID_CARD.getCode());
			ucfUser.setRealName(bo.getRealName().replace(" ", ""));
			ucfUser.setGmtCreate(new Date());
			ucfUser.setGmtLastModified(new Date());
			ucfUser.setUserType(BigDecimal.valueOf(Integer.valueOf(EnumUserType.PERSON.getCode())));
			ucfUser.setVerifyStatus(EnumVerifyLevle.REGISTER.getCode());
			
			// 生成卡信息
			final UcfCard ucfCard = new UcfCard();
			ucfCard.setCardNo(userId);
			ucfCard.setUserId(userId);
			ucfCard.setCardType(EnumCertType.ID_CARD.getCode());
			ucfCard.setGmtCreate(new Date());
			ucfCard.setCertFrom(EnumCertFrom.APP_FROM.getCode());
			ucfCard.setCertStatus(EnumCertStatus.NO_CERT.getCode());
			ucfCard.setRegisterFrom(EnumRegisterFrom.ENTERPRISE_FROM.getCode()); 
			
			//生成用户登录信息
			final UcfUserLoginApp userLoginApp = new UcfUserLoginApp();
			userLoginApp.setLoginId(bo.getPhoneNo().replace(" ", ""));
			userLoginApp.setFrozenState(Constants.FROZEN_NO);
			userLoginApp.setLoginType(Constants.LOGIN_TYPE_CELL);
			userLoginApp.setPhone(bo.getPhoneNo().replace(" ", ""));
			userLoginApp.setUserId(userId);
			userLoginApp.setUserType(EnumUserType.PERSON.getCode());
			
			String result =loginService.createAcccount(null,EnumAccountType.PERSON,ucfCard);
			if (!result.equals("success")) {
				registReturnValueBo.setStatus(Enumbase_platformCode.OPEN_ACCOUNT_FAIL.getCode());
				registReturnValueBo.setRespCode(Enumbase_platformCode.OPEN_ACCOUNT_FAIL.getCode());
				registReturnValueBo.setRespMsg(Enumbase_platformCode.OPEN_ACCOUNT_FAIL.getMsgS());
				return registReturnValueBo;
			}
			
			boolean commit = (Boolean)transactionTemplate.execute(new TransactionCallback<Object>() {
			    public Object doInTransaction(final TransactionStatus status) {
			    	try {
			    		UcfUserLoginApp queryUcfUserLoginApp = loginService.queryUserAppInfo(userLoginApp.getLoginId());
	        			if(queryUcfUserLoginApp!=null){
	        				throw new CustomerException(CustomerErrorCode.ERROR_USERINFO_ERR);
	        			}
						//保存用户信息
						userRegService.insertUserInfo(ucfUser);
						 //保存卡信息
						loginService.insertCardInfo(ucfCard);
						//
						loginService.insertLoginAppInfo(userLoginApp);
						}catch (final Exception e) {
						LOGGER.error(e.getMessage(),e);
						status.setRollbackOnly();
					    return false;
			    		}
					return true;
			    	}
			});
			if(commit) {
				registReturnValueBo.setStatus(Enumbase_platformCode.SUCCESS.getCode());
				registReturnValueBo.setRespCode(Enumbase_platformCode.SUCCESS.getCode());
				registReturnValueBo.setRespMsg(Enumbase_platformCode.SUCCESS.getMsgS());
				registReturnValueBo.setUserId(userId);
				return registReturnValueBo;
			}else{
				registReturnValueBo.setStatus(Enumbase_platformCode.ERROR.getCode());
				registReturnValueBo.setRespCode(Enumbase_platformCode.ERROR.getCode());
				registReturnValueBo.setRespMsg(Enumbase_platformCode.ERROR.getMsgS());
				return registReturnValueBo;
			}
		} catch (Exception e) {
			LOGGER.error(e.getMessage(),e);
			registReturnValueBo.setStatus(Enumbase_platformCode.ERROR.getCode());
			registReturnValueBo.setRespCode(Enumbase_platformCode.ERROR.getCode());
			registReturnValueBo.setRespMsg(Enumbase_platformCode.ERROR.getMsgS());
			return registReturnValueBo;
		}
	}
	
	@DigestLogAnnotated(digestIdentificationCode = "1006",
			logFileName = "DEFAULT.DIG",
		    loggerLevel = LoggerLevel.INFO)
	@Override
	public String searchUserId(String phoneNumber){
		if(phoneNumber==null || "".equals(phoneNumber)){
			return "";
		}
		UcfUserLoginApp loginApp = new UcfUserLoginApp();
		loginApp.setPhone(phoneNumber);
		try {
			List<UcfUserLoginApp> loginAppList = ucfUserLoginAppDao.queryUcfUserLoginAppListByWhere(loginApp);
			if(loginAppList.size()>0){
				return ((UcfUserLoginApp)loginAppList.get(0)).getUserId();
			}else{
				return "";
			}
		} catch (Exception e) {
			LOGGER.error(e.getMessage(),e);
			return "";
		}
	}

	@Override
	@DigestLogAnnotated(digestIdentificationCode = "1006", logFileName = "DEFAULT.DIG", loggerLevel = LoggerLevel.INFO, isSensitiveInfo=true)
	public QueryAuthrealReturnValueBo queryAuthreal(QueryAuthrealParamBo bo) {
		LOGGER.debug("queryAuthreal : " + SensitiveInfoUtils.getJson(bo));
		UcfUser user = new UcfUser();
		UcfCard ucfCard = null;
		QueryAuthrealReturnValueBo ret = new QueryAuthrealReturnValueBo();
		// 参数校验
		String result = BOCheckUtil.check(bo);
		if (!result.equals(EnumTrueFalse.TRUE.getCode())) {
			ret.setRespCode(Enumbase_platformCode.PARAM_ERROR.getCode());
			ret.setRespMsg(result);
			return ret;
		}

		String userId = bo.getUserId();

		try {
			user = this.loginService.queryUserInfo(userId);
			ucfCard = loginService.queryUcfCardByUserId(userId);
		} catch (Exception e) {
			LOGGER.debug("from P2PQueryAuthrealWsImpl queryAuthreal : ",
					e.getMessage());
			ret.setRespMsg(e.getMessage());
		}
		if (user != null) {
			String verfyStatus = user.getRealnameStatus();
			if (verfyStatus != null
					&& verfyStatus.equals(Constants.VERIFY_STATUS_T)) {
				ret.setStatus(EnumResType.SUCCESS_TYPE.getCode());
				ret.setRespCode(EnumResType.SUCCESS_TYPE.getCode());
				ret.setType(ucfCard.getCertStatus());
				ret.setRespMsg("用户通过实名认证");
			} else {
				ret.setStatus(EnumResType.FAIL_TYPE.getCode());
				ret.setRespCode(EnumResType.FAIL_TYPE.getCode());
				ret.setRespMsg("用户未通过实名认证");
			}
		} else {
			ret.setStatus(EnumResType.FAIL_TYPE.getCode());
			ret.setRespCode(EnumResType.FAIL_TYPE.getCode());
			ret.setRespMsg("未查询到用户信息");
		}
		return ret;
	}

	@DigestLogAnnotated(digestIdentificationCode = "1006",
			logFileName = "DEFAULT.DIG",
		    loggerLevel = LoggerLevel.INFO)
	@Override
	public P2PQueryUserinfoReturnValueBo queryUserinfo(
			P2PQueryUserinfoParamBo bo) {
		LOGGER.info("queryUserinfo" + SensitiveInfoUtils.getJson(bo));
		UcfUser user = new UcfUser();
		P2PQueryUserinfoReturnValueBo ret = new P2PQueryUserinfoReturnValueBo();
		ret.setRespCode(EnumResType.FAIL_TYPE.getCode());

		// 参数校验
		String result = BOCheckUtil.check(bo);
		if (!result.equals(EnumTrueFalse.TRUE.getCode())) {
			ret.setRespCode(Enumbase_platformCode.PARAM_ERROR.getCode());
			ret.setRespMsg(result);
			return ret;
		}

		String userId = bo.getUserId();
		try {
			user = this.loginService.queryUserInfo(userId);
		} catch (Exception e) {
			LOGGER.debug("from P2PQueryUserinfoWsImpl queryUserinfo : ",
					e.getMessage());
			ret.setRespMsg(e.getMessage());
			ret.setRespCode(EnumResType.FAIL_TYPE.getCode());
			return ret;
		}
		if (user != null) {
			try {
				UcfCard ucfCard = new UcfCard();
				ucfCard.setUserId(userId);
				List<UcfCard> ucfCardList = ucfCardDao
						.queryUcfCardListByWhere(ucfCard);
				if (ucfCardList.size() > 0) {
					ucfCard = ucfCardList.get(0);
				}
				if (null != ucfCard.getPaymentPassword()
						&& !"".equals(ucfCard.getPaymentPassword())) {
					ret.setPayPasswdSet(true);
				} else {
					ret.setPayPasswdSet(false);
				}
				ret.setName(user.getRealName());
				ret.setEmail(user.getEmail());
				ret.setGender(user.getGender());
				ret.setCertType(user.getCertType());
				ret.setCertNo(user.getCertNo());
				ret.setPhone(user.getCell());
				ret.setAmount(user.getAmount());
				ret.setStatus(EnumResType.SUCCESS_TYPE.getCode());
				ret.setRespCode(EnumResType.SUCCESS_TYPE.getCode());
				ret.setRespMsg(EnumResType.SUCCESS_TYPE.getDesc());
			} catch (Exception e) {
				ret.setRespCode(EnumResType.FAIL_TYPE.getCode());
				ret.setRespMsg("查询支付密码失败");
			}
		} else {
			ret.setRespCode(EnumResType.FAIL_TYPE.getCode());
			ret.setRespMsg("未查询到用户信息");
		}
		return ret;
	}

	@DigestLogAnnotated(digestIdentificationCode = "1006",
			logFileName = "DEFAULT.DIG",
		    loggerLevel = LoggerLevel.INFO)
	@Override
	public UserInfoBO queryUnsignedUser(com.ucf.customer.ws.enums.EnumUserType userType) throws Exception {
		List<UcfUser> userList = ucfUserDao.queryUcfUserListByType(userType);
		UcfUser ucfUser = null;
		if (userList != null && userList.size() > 0) {
			ucfUser = userList.get(RandomUtils.nextInt(userList.size()));
			UserInfoBO userInfoBO = new UserInfoBO();
			if (ucfUser != null) {
				userInfoBO.setUserCertNo(ucfUser.getCertNo());
				userInfoBO.setUserRealName(ucfUser.getRealName());
				userInfoBO.setUserId(ucfUser.getUserId());
				userInfoBO.setCell(ucfUser.getCell());
				return userInfoBO;
			}
		}
		return null;
	}

	@DigestLogAnnotated(digestIdentificationCode = "1006",
			logFileName = "DEFAULT.DIG",
		    loggerLevel = LoggerLevel.INFO)
	@Override
	public UcfOrgBO getUcfOrgBoById(String id) {
		UcfOrg ucfOrg = ucfOrgDao.quertUcfByUserId(id);
		UcfOrgBO ucfOrgBO = new UcfOrgBO();
		if (ucfOrg != null) {
			BeanUtilEx.copyProperties(ucfOrgBO, ucfOrg);

		}
		return ucfOrgBO;
	}

	@Override
	@DigestLogAnnotated(digestIdentificationCode = "1006", logFileName = "DEFAULT.DIG", loggerLevel = LoggerLevel.INFO, isSensitiveInfo=true)
	public BaseBO missContactUserBankCard(String merchantId, String userId,
			String bankCardNo) {
		LOGGER.info("missContactUserBankCard:" + "merchantId-" + merchantId + " userId-" + userId+ " bankCardNo-" + SensitiveInfoUtils.bankCard(bankCardNo));
		BaseBO baseBO = new BaseBO();
		// 参数校验
		if (StringUtil.isEmpty(merchantId) || StringUtil.isEmpty(userId)
				|| StringUtil.isEmpty(bankCardNo)) {
			baseBO.setStatus(Enumbase_platformCode.PARAM_ERROR.getCode());
			baseBO.setRespCode(Enumbase_platformCode.PARAM_ERROR.getCode());
			baseBO.setRespMsg(Enumbase_platformCode.PARAM_ERROR.getMsgS());
			return baseBO;
		}
		try {
			final UcfBankCard card = new UcfBankCard();
			card.setUserId(userId);
			card.setCardNo(bankCardNo);
			List<UcfBankCard> bankCardList = this.loginService
					.queryUcfBankCard(card);
			if (bankCardList == null || bankCardList.size() <= 0) {
				baseBO.setStatus(Enumbase_platformCode.NO_EXIST_USER_BANK_CARD
						.getCode());
				baseBO.setRespCode(Enumbase_platformCode.NO_EXIST_USER_BANK_CARD
						.getCode());
				baseBO.setRespMsg(Enumbase_platformCode.NO_EXIST_USER_BANK_CARD
						.getMsgS());
			} else {
				UcfBankCard ncard = bankCardList.get(0);
				ncard.setIsDelete("Y");
				this.loginService.updateBankCard(ncard);
				baseBO.setStatus(Enumbase_platformCode.SUCCESS.getCode());
				baseBO.setRespCode(Enumbase_platformCode.SUCCESS.getCode());
				baseBO.setRespMsg(Enumbase_platformCode.SUCCESS.getMsgS());
			}

		} catch (Exception e) {
			baseBO.setStatus(Enumbase_platformCode.ERROR.getCode());
			baseBO.setRespCode(Enumbase_platformCode.ERROR.getCode());
			baseBO.setRespMsg(Enumbase_platformCode.ERROR.getMsgS());
		}
		return baseBO;
	}

	@DigestLogAnnotated(digestIdentificationCode = "1006",
			logFileName = "DEFAULT.DIG",
		    loggerLevel = LoggerLevel.INFO)
	@Override
	public BaseBO userAuth(UserAuthParamBO userAuthParamBO) {
		LOGGER.info("鉴权[userAuth]：" + SensitiveInfoUtils.getJson(userAuthParamBO));
		BaseBO baseBO = new BaseBO();
		try {
			// 参数校验
			String result = BOCheckUtil.check(userAuthParamBO);
			if (!result.equals(EnumTrueFalse.TRUE.getCode())) {
				baseBO.setRespCode(Enumbase_platformCode.PARAM_ERROR.getCode());
				baseBO.setRespMsg(result);
				return baseBO;
			}
			UcfUser ucfUser = ucfUserDao.getUcfUserByUserId(userAuthParamBO
					.getUserId());
			if (ucfUser == null) {
				baseBO.setRespCode(Enumbase_platformCode.NO_EXIST_USER.getCode());
				baseBO.setRespMsg(Enumbase_platformCode.NO_EXIST_USER.getMsgS());
				baseBO.setStatus(Enumbase_platformCode.NO_EXIST_USER.getCode());
				return baseBO;
			}
			baseBO = userAuthBasic(userAuthParamBO, baseBO, ucfUser);
			return baseBO;
		} catch (Exception e) {
			baseBO.setRespCode(Enumbase_platformCode.AUTH_ERROR.getCode());
			baseBO.setStatus(Enumbase_platformCode.AUTH_ERROR.getCode());
			baseBO.setRespMsg("系统异常");
			LOGGER.error(e.getMessage(), e);
		}
		return baseBO;
	}

	private BaseBO userAuthBasic(UserAuthParamBO userAuthParamBO,
			BaseBO baseBO, UcfUser ucfUser) throws Exception {
		AuthRealNameParamBo authRealNameParamBo = new AuthRealNameParamBo();
		// 姓名、身份证鉴权
		if (userAuthParamBO.getType().equals(EnumAuthType.NAME_CERT)) {
			authRealNameParamBo.setAuthType(PaymentEnum.PAY_TOOL_AUTH_IDENTITY
					.getCode());
			authRealNameParamBo.setRealName(ucfUser.getRealName());
			authRealNameParamBo.setCertificateNo(ucfUser.getCertNo());
			authRealNameParamBo.setCertificateType(PaymentEnum.CERTIFICATE_TYPE
					.getMsg());
		}
		// 银行卡、银行预留手机号鉴权
		if (userAuthParamBO.getType().equals(EnumAuthType.BANK_CELL_NO)) {
			authRealNameParamBo.setAuthType(PaymentEnum.PAY_TOOL_AUTH_CARD
					.getCode());
			authRealNameParamBo.setCertificateType(PaymentEnum.CERTIFICATE_TYPE
					.getMsg());
			authRealNameParamBo.setCardNo(userAuthParamBO.getBankCardNo()
					.replace(" ", ""));
			authRealNameParamBo.setMoblie(userAuthParamBO.getPhone());
		}
		// 姓名、身份证、银行卡、银行预留手机号鉴权
		if (userAuthParamBO.getType().equals(EnumAuthType.NAME_CERT_BANK_CELL)) {
			authRealNameParamBo.setAuthType(PaymentEnum.PAY_TOOL_AUTH_CARD
					.getCode());
			authRealNameParamBo.setRealName(ucfUser.getRealName());
			authRealNameParamBo.setCertificateNo(ucfUser.getCertNo());
			authRealNameParamBo.setCertificateType(PaymentEnum.CERTIFICATE_TYPE
					.getMsg());
			authRealNameParamBo.setCardNo(userAuthParamBO.getBankCardNo()
					.replace(" ", ""));
			authRealNameParamBo.setMoblie(userAuthParamBO.getPhone());
		}
		// 产品
		authRealNameParamBo.setMerchantId(userAuthParamBO.getMerchantId());
		authRealNameParamBo.setBizProduct("100");
		LOGGER.info("统一支付用户鉴权入参：" + SensitiveInfoUtils.getJson(authRealNameParamBo));//统一支付系统修改
		AuthRealNameWsReturnValueBo authRealNameWsReturnValueBo = iRealNameAuthWS
				.authRealName(authRealNameParamBo);
		LOGGER.info("统一支付用户鉴权出参："
				+ SensitiveInfoUtils.getJson(authRealNameWsReturnValueBo));//统一支付系统修改
		if (PaymentEnum.PAYMENT_DEAL_RESULT_SUCCESS.getCode().equals(
				authRealNameWsReturnValueBo.getReturnValueMap().get("result"))) {
			baseBO.setRespCode(Enumbase_platformCode.SUCCESS.getCode());
			baseBO.setStatus(Enumbase_platformCode.SUCCESS.getCode());
			baseBO.setRespMsg(Enumbase_platformCode.SUCCESS.getMsgS());
			return baseBO;
		} else {
			baseBO.setRespCode(Enumbase_platformCode.AUTH_ERROR.getCode());
			baseBO.setStatus(Enumbase_platformCode.AUTH_ERROR.getCode());
			baseBO.setRespMsg(Enumbase_platformCode.AUTH_ERROR.getMsgS());
			return baseBO;
		}
	}

	@Override
	public BaseBO individualUserAuth(String realName, String certNo,
			String bankCardNo) {
		BaseBO baseBO = new BaseBO();
		try {
			AuthRealNameParamBo authRealNameParamBo = new AuthRealNameParamBo();
			authRealNameParamBo.setAuthType(PaymentEnum.PAY_TOOL_AUTH_CARD
					.getCode());
			authRealNameParamBo.setRealName(realName);
			authRealNameParamBo.setCertificateNo(certNo);
			authRealNameParamBo.setCertificateType(PaymentEnum.CERTIFICATE_TYPE
					.getMsg());
			authRealNameParamBo.setCardNo(bankCardNo.replace(" ", ""));
			// 产品
			authRealNameParamBo.setBizProduct("100");
			LOGGER.info("统一支付用户鉴权入参：" + SensitiveInfoUtils.getJson(authRealNameParamBo));//统一支付系统修改
			AuthRealNameWsReturnValueBo authRealNameWsReturnValueBo = iRealNameAuthWS
					.authRealName(authRealNameParamBo);
			LOGGER.info("统一支付用户鉴权出参："
					+ SensitiveInfoUtils.getJson(authRealNameWsReturnValueBo));//统一支付系统修改
			if (PaymentEnum.PAYMENT_DEAL_RESULT_SUCCESS.getCode().equals(
					authRealNameWsReturnValueBo.getReturnValueMap().get(
							"result"))) {
				baseBO.setRespCode(Enumbase_platformCode.SUCCESS.getCode());
				baseBO.setStatus(Enumbase_platformCode.SUCCESS.getCode());
				baseBO.setRespMsg(Enumbase_platformCode.SUCCESS.getMsgS());
				return baseBO;
			} else {
				baseBO.setRespCode(Enumbase_platformCode.AUTH_ERROR.getCode());
				baseBO.setStatus(Enumbase_platformCode.AUTH_ERROR.getCode());
				baseBO.setRespMsg(Enumbase_platformCode.AUTH_ERROR.getMsgS());
				return baseBO;
			}
		} catch (Exception e) {
			baseBO.setRespCode(Enumbase_platformCode.AUTH_ERROR.getCode());
			baseBO.setStatus(Enumbase_platformCode.AUTH_ERROR.getCode());
			baseBO.setRespMsg("系统异常");
			LOGGER.error(e.getMessage(), e);
		}
		return baseBO;
	}
	
	@DigestLogAnnotated(digestIdentificationCode = "1006",
			logFileName = "DEFAULT.DIG",
		    loggerLevel = LoggerLevel.INFO)
	@Override
	public SmsBO sendSms(String merchantId, String phoneNumber,String template) {
		SmsBO smsBO = new SmsBO();
		if (StringUtil.isEmpty(merchantId) || StringUtil.isEmpty(phoneNumber)) {
			smsBO.setRespCode(Enumbase_platformCode.PARAM_ERROR.getCode());
			smsBO.setRespMsg(Enumbase_platformCode.PARAM_ERROR.getMsgS());
			return smsBO;
		}
		try{
			ResultBo checkVfbo = smsService.sendVfyCodeSMS(merchantId,phoneNumber, template);
			if(EnumResultCode.SUCCESS.getCode().equals(checkVfbo.getResult())){
				smsBO.setRespCode(Enumbase_platformCode.SUCCESS.getCode());
				smsBO.setRespMsg(Enumbase_platformCode.SUCCESS.getMsgS());
				smsBO.setStatus(Enumbase_platformCode.SUCCESS.getCode());
				smsBO.setCode(checkVfbo.getResultObject().toString());
			}else{
				smsBO.setRespCode(Enumbase_platformCode.ERROR.getCode());
				smsBO.setRespMsg(checkVfbo.getMsg());
				smsBO.setStatus(Enumbase_platformCode.ERROR.getCode());
				smsBO.setCode("");
			}
		}catch(Exception e){
			smsBO.setRespCode(Enumbase_platformCode.ERROR.getCode());
			smsBO.setRespMsg(Enumbase_platformCode.ERROR.getMsgS());
			smsBO.setStatus(Enumbase_platformCode.ERROR.getCode());
			smsBO.setCode("");
			LOGGER.error(e.getMessage(), e);
		}
		return smsBO;
	}
}
