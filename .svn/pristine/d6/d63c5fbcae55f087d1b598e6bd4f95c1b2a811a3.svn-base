package com.ucf.customer.utils;

import java.lang.reflect.Field;
import java.net.URLEncoder;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.methods.GetMethod;
import org.apache.commons.httpclient.params.HttpConnectionManagerParams;

import com.ucf.customer.utils.enums.EnumTrueFalse;
import com.ucf.customer.ws.enums.EnumFieldType;
import com.ucf.customer.ws.enums.FieldAccess;
import com.ucf.customer.ws.enums.FieldName;
import com.ucf.onlinepay.framework.common.util.StringUtil;
import com.ucf.platform.framework.core.log.UcfLogger;
import com.ucf.platform.framework.core.log.UcfLoggerFactory;
import com.ucf.platform.framework.core.util.SensitiveInfoUtils;

public class CommonUtils {

	private static UcfLogger LOGGER_BIZ = UcfLoggerFactory.getLogger(CommonUtils.class);
	
	public static String mobileNoEncrypt(String mobileNo) {
		if (StringUtil.isEmpty(mobileNo)) {
			return "";
		}
		return mobileNo.substring(0, 3) + "****" + mobileNo.substring(7, 11);
	}
	
	public static String cardNoEncrypt(String cardNo){
		if (null!=cardNo&&cardNo.length()>4)
			return cardNo.substring(0,4)+"********" + cardNo.substring(cardNo.length()-4, cardNo.length());
		return cardNo;
	}

	public static Date StringToDate(String dateStr , String format){
		DateFormat sdf=new SimpleDateFormat(format);
		Date date = null;
		try {
			date = sdf.parse(dateStr);
		} catch (ParseException e) {
			LOGGER_BIZ.error("from StringToDate:"+e.getMessage(),e);
		}
		return date;
	}
	
	public static String dateToString(Date date,String formatStr){
		return new SimpleDateFormat(formatStr).format(date);
	}
	
	 public static boolean isMobileNO(String mobiles) {
		    Pattern p = Pattern.compile("^((1[0-9])|(1[^4,\\D])|(1[0,5-9]))\\d{9}$");
		    Matcher m = p.matcher(mobiles);
		    return m.matches();
	}

	 public static boolean isEmail(String email) {
	    String str = "^([a-zA-Z0-9]*[-_]?[a-zA-Z0-9]+)*@([a-zA-Z0-9]*[-_]?[a-zA-Z0-9]+)+[\\.][A-Za-z]{2,3}([\\.][A-Za-z]{2})?$";
	    Pattern p = Pattern.compile(str);
	    Matcher m = p.matcher(email);
	    return m.matches();
	  }
		 
	public static StringBuffer  hidenchar(String param,int begin,int end)throws Exception{
			StringBuffer  buffer = new StringBuffer();
			char[]  chars =param.toCharArray();
			for(int i=0;i<chars.length;i++){
				if(i>begin && i<end){
					chars[i]='*';
					buffer.append(chars[i]);
				}
				buffer.append(chars[i])	;
				
			}
			return buffer;
	}
	
	public static String IdCardNoEncrypt(String cardNo){
		if (StringUtil.isEmpty(cardNo)) {
			return "";
		}
		return cardNo.substring(0,1)+"****************" + cardNo.substring(cardNo.length()-1, cardNo.length());
	}
	
	public static String check(Object object) {
		try {
			for (Field field : object.getClass().getDeclaredFields()) {
				FieldAccess fieldAcces = field.getAnnotation(FieldAccess.class);
				if (fieldAcces!= null) {
					for (EnumFieldType t : fieldAcces.value()) {
						if (t == EnumFieldType.NOT_NULL) {
							field.setAccessible(true); // 设置些属性是可以访问的
							Object val = field.get(object);// 得到此属性的值
							if (val==null || StringUtil.isEmpty((String) val)) {
								
								FieldName fieldName = field.getAnnotation(FieldName.class);
								return fieldName==null?field.getName()+"不能为空":fieldName.value()+"不能为空";
							}
						}
					}
				}
				

			}
		} catch (Exception e1) {
			LOGGER_BIZ.error(e1.getMessage());
		}
		return EnumTrueFalse.TRUE.getCode();
	}

	public static String getToken(){
		return UUID.randomUUID().toString().replaceAll("-", "");
	}
	
}
