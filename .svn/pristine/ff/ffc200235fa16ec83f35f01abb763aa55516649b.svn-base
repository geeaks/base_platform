package com.ucf.customer.dao.base;

import java.util.List;
import java.util.Random;

import org.apache.ibatis.session.RowBounds;
import org.mybatis.spring.SqlSessionTemplate;
import org.mybatis.spring.support.SqlSessionDaoSupport;
import org.springframework.beans.factory.annotation.Autowired;

/**
 * 
 * Description: 公共的DAO类，所有DAO All Rights Reserved.
 * 
 * @version 1.0 2014-1-20 下午2:43:03 by 王星皓（wangxinghao@ucfgroup.com）创建
 */
public class BaseCustomerDao extends SqlSessionDaoSupport {

	@Autowired
	public void setSqlSessionTemplate(SqlSessionTemplate sqlSessionTemplate_customer) {
		super.setSqlSessionTemplate(sqlSessionTemplate_customer);
	}
	
	/**
	 * 
	 * Description: 新增一条记录
	 * 
	 * @Version1.0 2014-1-21 下午3:45:23 by 王星皓（wangxinghao@ucfgroup.com）创建
	 * @param statementName
	 *            SQL语句的ID
	 * @param object
	 *            参数
	 */
	public void insert(String statementName, Object object) {
		getSqlSession().insert(statementName, object);
	}

	/**
	 * 
	 * Description: 更新一条记录
	 * 
	 * @Version1.0 2014-1-21 下午3:45:23 by 王星皓（wangxinghao@ucfgroup.com）创建
	 * @param statementName
	 *            SQL语句的ID
	 * @param object
	 *            参数
	 */
	public void update(String statementName, Object object) {
		getSqlSession().update(statementName, object);
	}

	/**
	 * 
	 * Description: 删除一条记录
	 * 
	 * @Version1.0 2014-1-21 下午3:45:23 by 王星皓（wangxinghao@ucfgroup.com）创建
	 * @param statementName
	 *            SQL语句的ID
	 * @param object
	 *            参数
	 */
	public void delete(String statementName, Object object) {
		getSqlSession().delete(statementName, object);
	}

	/**
	 * 
	 * Description: 获取一条记录(一般根据逐渐获取)
	 * 
	 * @Version1.0 2014-1-21 下午3:46:07 by 王星皓（wangxinghao@ucfgroup.com）创建
	 * @param statementName
	 *            SQL语句ID
	 * @param object
	 *            参数
	 * @return 符合条件的一条记录
	 */
	public <T> T getOne(String statementName, Object object) {
		return getSqlSession().selectOne(statementName, object);
	}

	/**
	 * 
	 * Description: 查询所有
	 * 
	 * @Version1.0 2014-1-21 下午3:46:39 by 王星皓（wangxinghao@ucfgroup.com）创建
	 * @param statementName
	 *            SQL语句的ID
	 * @return
	 */
	public <T> List<T> queryForList(String statementName) {
		return getSqlSession().selectList(statementName);
	}

	/**
	 * 
	 * Description: 根据条件查询
	 * 
	 * @Version1.0 2014-1-21 下午3:47:08 by 王星皓（wangxinghao@ucfgroup.com）创建
	 * @param statementName
	 *            SQL语句的ID
	 * @param paramObj
	 *            查询条件
	 * @return
	 */
	public <T> List<T> queryForList(String statementName, Object paramObj) {
		return getSqlSession().selectList(statementName, paramObj);
	}
	/**
	 * 分页查询
	 * @author yuzengjia
	 * @date 2014-6-19 下午3:47:03
	 * @param statementName
	 * @param paramObj
	 * @param start 开始记录数
	 * @param limit 每页大小
	 * @return
	 */
	public <T> List<T> queryForPageList(String statementName, Object paramObj,int start,int limit){
		RowBounds bounds = new RowBounds(start,limit);
		return getSqlSession().selectList(statementName, paramObj,bounds);
	}
	
}
