package com.ucf.customer.service.impl;

import com.dp.client.dpApiHelper;
import com.dp.client.st.DataSt;
import com.dp.client.st.THostInfoSt;
import com.ucf.customer.service.ProtectionSystemService;
import com.ucf.customer.utils.exception.P2PCustomerException;
import com.ucf.platform.framework.core.log.UcfLogger;
import com.ucf.platform.framework.core.log.UcfLoggerFactory;

public class ProtectionSystemServiceImpl implements ProtectionSystemService {

	private static UcfLogger LOGGER_BIZ = UcfLoggerFactory .getLogger(ProtectionSystemServiceImpl.class);
	
	private String protectionIp;
	private int protectionPort;
	public void setProtectionIp(String protectionIp) {
		this.protectionIp = protectionIp;
	}
	public void setProtectionPort(int protectionPort) {
		this.protectionPort = protectionPort;
	}
	@Override
	public String getProtectionIp() {
		return protectionIp;
	}
	@Override
	public int getProtectionPort() {
		return protectionPort;
	}
	public String getPlainPassword(String encryptedPassword) throws P2PCustomerException{
		
		String hostIP = getProtectionIp();
		int hostport = getProtectionPort();
		String szErrMsg = "";
		String szData = "";
		DataSt oriData = new DataSt();
		oriData.setRet(-1);
		THostInfoSt hostInfo = new THostInfoSt();
		hostInfo.setSvrIP(hostIP);
		hostInfo.setPort(hostport);
		try {
			// 服务器初始化
			dpApiHelper.getInstance().initialize(hostIP,hostport,30000,false,3000);
			dpApiHelper.getInstance().setTimeout(10000);
			// ParseData 函数解码后返回用户输入密码原文
			oriData = dpApiHelper.getInstance().ParseData(encryptedPassword,hostInfo);
			// 获取服务器解码返回
			szData = oriData.getData();
			//获取返回错误码，0为解码成功，其他请参见错误码列表，getRet()返回错误码
			szErrMsg = ""+oriData.getRet();
			if(szErrMsg.equals("0")){
				szErrMsg="还原解析成功，ErrorCode: 0";
			}else{
				LOGGER_BIZ.error("还原解析失败，ErrorCode："+szErrMsg);
			}
		} catch (Exception e) {
			LOGGER_BIZ.error(e.getMessage(), e);
		}
		return szData;
	}
}
