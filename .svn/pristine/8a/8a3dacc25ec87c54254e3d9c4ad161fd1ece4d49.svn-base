package com.ucf.customer.dao.impl;

import java.util.List;
import java.util.concurrent.TimeUnit;

import javax.annotation.Resource;

import org.springframework.stereotype.Repository;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.TypeReference;
import com.ucf.customer.dao.UcfCardDao;
import com.ucf.customer.dao.base.BaseCustomerDao;
import com.ucf.customer.pojo.UcfCard;
import com.ucf.customer.utils.enums.EnumRedisKey;
import com.ucf.platform.framework.core.log.UcfLogger;
import com.ucf.platform.framework.core.log.UcfLoggerFactory;
import com.ucf.platform.framework.redis.support.ICache;

@Repository
public class UcfCardDaoImpl extends BaseCustomerDao implements UcfCardDao {
	
	private static final UcfLogger LOGGER = UcfLoggerFactory.getLogger(UcfCardDaoImpl.class);
	
	private static final long serialVersionUID = 3217861411278476237L;
	
	@Resource(name = "redisKVManager")
	private ICache<String> cache = null;
	
	public void insertUcfCard(UcfCard ucfCard) throws Exception {
		this.insert("com.ucf.customer.insertUcfCard", ucfCard);
		refreshCardInfo(ucfCard.getUserId(), EnumRedisKey.UCF_CARD_QUERY_BY_USERId.getTimeout());
	}
	
	public void updateUcfCard(UcfCard ucfCard) throws Exception {
		this.update("com.ucf.customer.updateUcfCard", ucfCard);
		refreshCardInfo(ucfCard.getUserId(), EnumRedisKey.UCF_CARD_QUERY_BY_USERId.getTimeout());
	}
	
	public void deleteUcfCard(String cardNo) throws Exception {
		this.delete("com.ucf.customer.deleteUcfCard", cardNo);
	}
	
	public List<UcfCard> queryUcfCardListByWhere(UcfCard ucfCard) throws Exception {
		boolean isUserId = ucfCard.booleanUserId();
		if (isUserId) {
			if (cache.isExist(EnumRedisKey.UCF_CARD_QUERY_BY_USERId.getKey() + ucfCard.getUserId())) {
				try {
					String resultString = cache.get(EnumRedisKey.UCF_CARD_QUERY_BY_USERId.getKey() + ucfCard.getUserId(), String.class);
					return JSON.parseObject(resultString, new TypeReference<List<UcfCard>>() {
					});
				} catch (Exception e) {
					LOGGER.warn("从redis获得用户卡信息异常", e);
				}
			} 
			return searchUcfCardsByUserId(ucfCard);
		} else {
			return this.queryForList("com.ucf.customer.queryUcfCardByWhere", ucfCard);
		}
	}
	
	@Override
	public void refreshCardInfo(String userId, int timeout) {
		UcfCard c = new UcfCard();
		c.setUserId(userId);
		List<UcfCard> ucfCards = this.queryForList("com.ucf.customer.queryUcfCardByWhere", c);
		if (ucfCards != null && ucfCards.size() > 0) {
			cache.set(EnumRedisKey.UCF_CARD_QUERY_BY_USERId.getKey() + userId, JSON.toJSONString(ucfCards), timeout, TimeUnit.SECONDS);
		}
	}
	
	private List<UcfCard> searchUcfCardsByUserId(UcfCard ucfCard) {
		List<UcfCard> ucfCards = this.queryForList("com.ucf.customer.queryUcfCardByWhere", ucfCard);
		if (ucfCards != null && ucfCards.size() > 0) {
			cache.set(EnumRedisKey.UCF_CARD_QUERY_BY_USERId.getKey() + ucfCard.getUserId(), JSON.toJSONString(ucfCards),
					EnumRedisKey.UCF_CARD_QUERY_BY_USERId.getTimeout(), TimeUnit.SECONDS);
		}
		return ucfCards;
	}
}