package com.ucf.customer.test.api;

import java.util.Date;
import java.util.List;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import javax.annotation.Resource;

import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;

import com.ucf.customer.dao.UcfCardDao;
import com.ucf.customer.dao.UcfUserDao;
import com.ucf.customer.dao.plugin.Page;
import com.ucf.customer.pojo.UcfUser;
import com.ucf.customer.service.UserService;
import com.ucf.customer.test.BaseTest;
import com.ucf.customer.utils.enums.EnumRedisKey;
import com.ucf.platform.framework.core.log.UcfLogger;
import com.ucf.platform.framework.core.log.UcfLoggerFactory;
import com.ucf.platform.framework.redis.RedisKVManager;

public class RefreshUserTest  extends BaseTest{

	private static UcfLogger logger = UcfLoggerFactory.getLogger(RefreshUserTest.class);
	
	@Autowired
	private UcfUserDao ucfUserDao;
	@Autowired
	private UcfCardDao ucfCardDao;
	
	@Autowired
	private UserService userService;
	
	@Resource(name="redisKVManager")
	private RedisKVManager cache = null;
	
	private int randomTimeout(int min,int max) {
		return new Random().nextInt(max * 86400)%(max * 86400-min * 86400+1) + min * 86400;
	}
	
	@Test
	public void refresh() {
		logger.info("刷新用户缓存数据定时任务执行开始!");
		long s  = System.currentTimeMillis();
		ExecutorService ExecutorService =  Executors.newFixedThreadPool(10);
		try {
			UcfUser fuser = getFindUser(1);
			List<String> firseUserIds = userService.listPageUserId(fuser);
			int totalPage = fuser.getPage().getTotalPage();
			System.out.println("53数量：" + totalPage);
			ExecutorService.submit(new FlushUser(firseUserIds));
			for(int p = 2;p<= totalPage;p++){
				UcfUser ruser = getFindUser(p);
				List<String> userIds = userService.listPageUserId(ruser);
				ExecutorService.submit(new FlushUser(userIds));
			}			
			logger.info("刷新用户缓存数据定时任务执行成功");
		} catch (Exception e) {		
			logger.error("刷新用户缓存数据异常",e);
		}
		System.out.println("执行时间" + (System.currentTimeMillis()-s));
		System.out.println("执行时间" + new Date());
		logger.info("刷新用户缓存数据定时任务执行结束!");
	}

	private UcfUser getFindUser(int p){
		UcfUser user = new UcfUser();
		Page page = new Page();
		page.setCurrentPage(p);
		page.setShowCount(1000);
		user.setPage(page);
		return user;
	}
	
	class FlushUser implements Runnable {
		private List<String> userIds = null;
		public FlushUser(List<String> userIds){
			this.userIds = userIds;
		}
		public void run() {
			System.out.println(Thread.currentThread().getName() + " 85  数量：" + userIds.size());
			System.out.println(Thread.currentThread().getName() + " 86  " + new Date());
			try {
				for(String  userId : userIds){			
					Thread.sleep(10);
					//查询用户的缓存keys
					String  userKey = EnumRedisKey.UCF_USER_QUERY_BY_USERId.getKey() + userId;
					if(cache.isExist(userKey)){
						ucfUserDao.refreshUserInfo(userId, randomTimeout(4,14));
						logger.info("刷新用户["+userId+"]UCF_USER缓存数据执行成功");
					}
					//查询card缓存keys
					String cardKey = EnumRedisKey.UCF_CARD_QUERY_BY_USERId.getKey() + userId;
					if(cache.isExist(cardKey)){
						ucfCardDao.refreshCardInfo(userId, randomTimeout(4,14));
						logger.info("刷新用户["+userId+"]UCF_CARD缓存数据执行成功");
					}
				}
			}catch (Exception e) {			
				logger.error("刷新用户缓存数据异常",e);
			}
			System.out.println(Thread.currentThread().getName() + " 105  " + new Date());
		}
	}	
	
}
