package com.ucf.customer.ws.service.impl;

import java.util.UUID;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.ucf.customer.ws.bo.IDCardBo;
import com.ucf.customer.ws.service.CheckAutherRealNameWS;
import com.ucf.gateway.ws.bo.RealAuthParamBo;
import com.ucf.gateway.ws.bo.RealAuthResultBo;
import com.ucf.gateway.ws.service.SearchTransactionWS;
import com.ucf.platform.framework.core.util.SensitiveInfoUtils;
import com.ucf.platform.framework.log.LoggerLevel;
import com.ucf.platform.framework.log.annotation.DigestLogAnnotated;
/**
 * 实名认证业务类
 * CheckAutherRealNameBiz
 * @author yuzengjia
 * @date 2014-5-21 上午10:42:03
 *
 */
@Service
public class CheckAutherRealNameWSImpl implements CheckAutherRealNameWS{
	private static Logger LOGGER = LoggerFactory.getLogger(CheckAutherRealNameWSImpl.class);
	@Autowired
	private SearchTransactionWS searchGetWayTransaction;
	/**
	 * 实名认证是否通过
	 * 参数：idCardNumber realName必须
	 * @author yuzengjia
	 * @date 2014-5-21 上午11:10:29
	 * @param cardInfo
	 * @return
	 */
	@Override
	@DigestLogAnnotated(digestIdentificationCode = "1006",
	logFileName = "DEFAULT.DIG",
    loggerLevel = LoggerLevel.INFO)
	public boolean validateRealName(String iDCardNumber,String realName){
		IDCardBo cardInfo = new IDCardBo(iDCardNumber,realName);
		cardInfo = getIDCardInfoByCardParam(cardInfo);
		if(VALIDATE_STATUS_SUCCESS.equals(cardInfo.getStatus())){
			return false;
		}
		return true;
	}
	/**
	 * 获取身份证及相关信息
	 * 参数：idCardNumber realName必须
	 * @author yuzengjia
	 * @date 2014-5-21 上午11:32:49
	 * @param cardInfo
	 * @return
	 */
	@Override
	@DigestLogAnnotated(digestIdentificationCode = "1006",
	logFileName = "DEFAULT.DIG",
    loggerLevel = LoggerLevel.INFO)
	public IDCardBo getIDCardInfoByCardParam(IDCardBo cardInfo){
		RealAuthParamBo param = new RealAuthParamBo();
		param.setOrderId(UUID.randomUUID()+"");
		param.setIdCardNumber(cardInfo.getCardNo());
		param.setRealName(cardInfo.getRealName());
		param.setFinanceChannel(FINANACE_CHANNEL);
		param.setPlateno(NEW_PLAT_FORM);
		RealAuthResultBo result = searchGetWayTransaction.realNameCheck(param);
		if(result==null){
			cardInfo.setStatus(VALIDATE_STATUS_FAILE);
			cardInfo.setRespCode(VALIDATE_CODE_CONN_ERROR);
			cardInfo.setRespMsg("认证服务调用失败！");
			LOGGER.info("认证服务调用失败，cardNumber:"+SensitiveInfoUtils.idCardNum(cardInfo.getCardNo())+"　　realName:"+SensitiveInfoUtils.chineseName(cardInfo.getRealName()));
			return cardInfo;
		}
		cardInfo.setPhotoStrbuf(result.getCheckPhoto());
		cardInfo.setPoliceAdd(result.getPoliceadd());
		cardInfo.setIdcOriCt2(result.getIdcOriCt2());
		cardInfo.setRespMsg(result.getExceptionMessage());
		cardInfo.setStatus("SUCCESS".equals(result.getCompStatus())?VALIDATE_STATUS_SUCCESS:VALIDATE_STATUS_FAILE);
		cardInfo.setRespCode("SUCCESS".equals(result.getCompStatus())?VALIDATE_CODE_VALIDATE:VALIDATE_CODE_INVALIDATE);
		return cardInfo;
	}
}
