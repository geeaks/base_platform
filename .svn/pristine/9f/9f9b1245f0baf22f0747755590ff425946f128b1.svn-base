package com.ucf.customer.utils;

import java.io.File;
import java.util.Date;
import java.util.Properties;

import javax.activation.DataHandler;
import javax.activation.FileDataSource;
import javax.mail.Authenticator;
import javax.mail.Message;
import javax.mail.Multipart;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import javax.mail.internet.MimeUtility;

import com.ucf.platform.framework.core.log.UcfLogger;
import com.ucf.platform.framework.core.log.UcfLoggerFactory;
import com.ucf.platform.framework.core.util.SensitiveInfoUtils;

/**
 * The class can send email and supply different method
 * @author liguoqing
 * @date 2012.11.16
 * @version 1.0
 * 
 */
public class EmailSender {
	private static UcfLogger LOGGER = UcfLoggerFactory.getLogger(EmailSender.class);

	
	// ResourceBundle rBundle = ResourceBundle.getBundle("app");
	
	static class SingletonHolder{
		static EmailSender instance = new EmailSender();
	}
	
	public static EmailSender getInstance(){
		return SingletonHolder.instance;
	}
	
	private static String emailPort = null;
	private static String emailHost = null;
	private static String userName = null;
	private static String password = null;
	private static final String charset = "UTF-8";
	private static final String defaultMimetype = "text/plain";

//	static {
//		try {
//			emailPort = Constants.EmailPort;
//			emailHost = Constants.EmailHost;
//			userName = Constants.EmailUserName;
//			password = Constants.EmailPassword;
//		} catch (Exception e) {
//			LOGGER.error(e.getMessage(),e);
//		}
//	}

	/**
	 * 发送邮件
	 * @param receiver 收件人
	 * @param subject  标题
	 * @param mailContent 邮件内容
	 * @param mimetype  内容类型 默认为text/plain,如果要发送HTML内容,应设置为text/html
	 */
	public void send(String receiver, String subject, String mailContent,
			String mimetype) {
		send(new String[] { receiver }, subject, mailContent, mimetype);
	}

	/**
	 * 发送邮件
	 * @param receivers 收件人
	 * @param subject  标题
	 * @param mailContent  邮件内容
	 * @param mimetype 内容类型 默认为text/plain,如果要发送HTML内容,应设置为text/html
	 */
	public void send(String[] receivers, String subject, String mailContent,
			String mimetype) {
		send(receivers, subject, mailContent, null, mimetype);
	}

	/**
	 * 发送邮件
	 * @param receivers 收件人
	 * @param subject 标题
	 * @param mailContent 邮件内容
	 * @param attachements 附件
	 * @param mimetype 内容类型 默认为text/plain,如果要发送HTML内容,应设置为text/html
	 */
	public void send(String[] receivers, String subject, String mailContent,
			File[] attachements, String mimetype) {

		Properties props = new Properties();
		// props.put("mail.smtp.port", emailPort);
		// smtp服务器地址
		props.put("mail.smtp.host", emailHost);
		props.put("mail.smtp.auth", "true");// 需要校验
		props.setProperty("mail.smtp.port", emailPort);
		props.setProperty("mail.smtp.socketFactory.port", emailPort);
		props.setProperty("mail.smtp.socketFactory.fallback", "false");
		props.setProperty("mail.smtp.socketFactory.class","javax.net.ssl.SSLSocketFactory");

		Session session = Session.getDefaultInstance(props,
				new Authenticator() {
					protected PasswordAuthentication getPasswordAuthentication() {
						LOGGER.info("userName:"+SensitiveInfoUtils.chineseName(userName)+",password"+password);
						// 登录用户名/密码
						return new PasswordAuthentication(userName, password);
					}
				});
		session.setDebug(true);
		try {
			MimeMessage mimeMessage = new MimeMessage(session);
			// 发件人邮件
			mimeMessage.setFrom(new InternetAddress(userName));

			InternetAddress[] toAddress = new InternetAddress[receivers.length];
			for (int i = 0; i < receivers.length; i++) {
				toAddress[i] = new InternetAddress(receivers[i]);
			}
			mimeMessage.setRecipients(Message.RecipientType.TO, toAddress);// 收件人邮件
			mimeMessage.setSubject(subject, charset);

			Multipart multipart = new MimeMultipart();
			// 正文
			MimeBodyPart body = new MimeBodyPart();
			// body.setText(message, charset);不支持html
			body.setContent(mailContent,
					(mimetype != null && !"".equals(mimetype) ? mimetype
							: defaultMimetype) + ";charset=" + charset);
			multipart.addBodyPart(body);// 发件内容
			// 附件
			if (attachements != null) {
				for (File attachement : attachements) {
					MimeBodyPart attache = new MimeBodyPart();
					// ByteArrayDataSource bads = new
					// ByteArrayDataSource(byte[],"application/x-any");
					attache.setDataHandler(new DataHandler(new FileDataSource(
							attachement)));
					String fileName = getLastName(attachement.getName());
					attache.setFileName(MimeUtility.encodeText(fileName,
							charset, null));
					multipart.addBodyPart(attache);
				}
			}
			mimeMessage.setContent(multipart);
			// SimpleDateFormat formcat = new SimpleDateFormat("yyyy-MM-dd");
			mimeMessage.setSentDate(new Date());// formcat.parse("2010-5-23")
			try {
				Transport.send(mimeMessage);
			} catch (Exception e) {
				LOGGER.error(e.getMessage(),e);
				throw new RuntimeException(e);
			}
		} catch (Exception e) {
			LOGGER.error(e.getMessage(),e);
			throw new RuntimeException(e);
		}
	}
    /*
     * this method can get file  name 
     * @param fileName
     * @Exception  no exception
     */
	private static String getLastName(String fileName) {
		int pos = fileName.lastIndexOf("\\");
		if (pos > -1) {
			fileName = fileName.substring(pos + 1);
		}
		pos = fileName.lastIndexOf("/");
		if (pos > -1) {
			fileName = fileName.substring(pos + 1);
		}
		return fileName;
	}
	
}
