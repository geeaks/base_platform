package com.ucf.customer.task;

import java.util.Random;
import java.util.Set;

import javax.annotation.Resource;

import org.springframework.beans.factory.annotation.Autowired;

import com.ucf.customer.dao.UcfCardDao;
import com.ucf.customer.dao.UcfUserDao;
import com.ucf.customer.utils.enums.EnumRedisKey;
import com.ucf.platform.framework.core.log.UcfLogger;
import com.ucf.platform.framework.core.log.UcfLoggerFactory;
import com.ucf.platform.framework.redis.RedisKVManager;
import com.ucf.schedule.client.AbstractTaskService;
import com.ucf.schedule.client.ScheduleStatusEnum;
import com.ucf.schedule.client.UcfScheduleResponse;

/**
 * @Description: 自动刷新用户数据缓存
 * @ClassName: AutoRefreshUserCache
 * @author gaoxiang
 * @date 2015-4-7 下午2:56:36
 */ 
public class AutoRefreshUserCache extends AbstractTaskService {
	
	private static UcfLogger logger = UcfLoggerFactory.getLogger(AutoRefreshUserCache.class);
	
	@Autowired
	private UcfUserDao ucfUserDao;
	@Autowired
	private UcfCardDao ucfCardDao;
	
	@Resource(name="redisKVManager")
	private RedisKVManager cache = null;

	private int randomTimeout(int min,int max) {
		return new Random().nextInt(max * 86400)%(max * 86400-min * 86400+1) + min * 86400;
	}
	
	@Override
	public UcfScheduleResponse execute() {
		logger.info("刷新用户缓存数据定时任务执行开始!");
		UcfScheduleResponse response = new UcfScheduleResponse();
		try {
			//查询用户的缓存keys
			String  userKey = EnumRedisKey.UCF_USER_QUERY_BY_USERId.getKey()+"*";
			for(int i=0;i<=99;i++){
				String tempkey = userKey;
				if(i<10){
					tempkey = tempkey +"0";
				}
				tempkey = tempkey + i;
				Set<String> userKeys = cache.getRedisTemplate().keys(tempkey);
				for(String key : userKeys){
					String userId = key.replace(EnumRedisKey.UCF_USER_QUERY_BY_USERId.getKey(), "");
					ucfUserDao.refreshUserInfo(userId, randomTimeout(4,14));
					logger.info("刷新用户["+userId+"]UCF_USER缓存数据执行成功");
				}
				userKeys = null;
			}
			//查询card缓存keys
			String cardKey = EnumRedisKey.UCF_CARD_QUERY_BY_USERId.getKey()+"*";
			for(int i=0;i<=99;i++){
				String tempkey = cardKey;
				if(i<10){
					tempkey = tempkey +"0";
				}
				tempkey = tempkey + i;
				Set<String> cardKeys = cache.getRedisTemplate().keys(tempkey);
				for(String key : cardKeys){
					String userId = key.replace(EnumRedisKey.UCF_CARD_QUERY_BY_USERId.getKey(), "");
					ucfCardDao.refreshCardInfo(userId, randomTimeout(4,14));
					logger.info("刷新用户["+userId+"]UCF_CARD缓存数据执行成功");
				}
				cardKeys = null;
			}
			response.setStatus(ScheduleStatusEnum.SUCCESS);
			logger.info("刷新用户缓存数据定时任务执行成功");
		} catch (Exception e) {
			response.setStatus(ScheduleStatusEnum.FAILED);
			logger.error("刷新用户缓存数据异常",e);
		}
		logger.info("刷新用户缓存数据定时任务执行结束!");
		return response;
	}
	
}
