package com.ucf.customer.utils;

import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import com.dp.client.dpApiHelper;
import com.dp.client.st.DataSt;
import com.dp.client.st.THostInfoSt;
import com.ucf.platform.framework.core.log.UcfLogger;
import com.ucf.platform.framework.core.log.UcfLoggerFactory;

/**
 * Title: Description: Copyright: Copyright (c) 2014
 * 
 * @author gavin
 * @version 1.0
 * @since 1.0
 * 
 */
public class ProtectionSystem {

	private static UcfLogger LOGGER_BIZ = UcfLoggerFactory.getLogger(ProtectionSystem.class);
	
	public static Map<String, String> data(String pan, String szBackData,
			String len, String hostip, int hostport, String fingerprint,
			String isMac) throws Exception {
		Map<String, String> map = new HashMap<String, String>();
		map.put("szData", "1");
		map.put("szErrMsg", "失败");
		String szErrMsg = StringUtils.EMPTY;
		String szData = StringUtils.EMPTY;

		String signRet = StringUtils.EMPTY;
		String macAddress = StringUtils.EMPTY;
		String diskNumber = StringUtils.EMPTY;
		String cpuInfo = StringUtils.EMPTY;
		if ("no".equals(isMac)) {
			TrippleDes tDes = new TrippleDes();
			// 判断是否被篡改
			boolean isOK = tDes.isSignRight(fingerprint, "random");
			if (isOK) {
				signRet = "机器指纹报文未被篡改";
			} else {
				signRet = "机器指纹报文已被篡改";
			}
			// 解密机器指纹
			macAddress = tDes.getMacAddress(fingerprint);
			diskNumber = tDes.getDiskNumber(fingerprint);
			cpuInfo = tDes.getCPUInfo(fingerprint);
		} else {
			signRet = "MAC OS 不支持机器指纹获取";
			macAddress = "MAC OS 不支持机器指纹获取";
			diskNumber = "MAC OS 不支持机器指纹获取";
			cpuInfo = "MAC OS 不支持机器指纹获取";
		}

		if(LOGGER_BIZ.isDebugEnabled()){
			LOGGER_BIZ.info("signRet=" + signRet + "，macAddress=" + macAddress + "，diskNumber=" + diskNumber + "，cpuInfo=" + cpuInfo);
		}		
		DataSt oriData = new DataSt();
		oriData.setRet(-1);
		THostInfoSt hostInfo = new THostInfoSt();
		hostInfo.setSvrIP(hostip);
		hostInfo.setPort(hostport);

		// 服务器初始化
		dpApiHelper.getInstance().initialize(hostip, hostport, 30000, false,
				3000);
		dpApiHelper.getInstance().setTimeout(10000);

		// ParseData 函数解码后返回用户输入密码原文
		oriData = dpApiHelper.getInstance().ParseData(szBackData, hostInfo);

		// ParseDataAndEncryptKY
		// 对数据进行解密和解析，并返回原始数据的加密结果，加密算法采用科友的算法(PAN如果小于12字节，前补00)
		// oriData =
		// dpApiHelper.getInstance().ParseDataAndEncrypt(szBackData,pan,hostInfo);

		// 获取用户输入明文
		szData = oriData.getData();

		// 获取返回错误码，0为解码成功，其他请参见错误码列表，getRet()返回错误码
		szErrMsg = "" + oriData.getRet();

		map.put("szData", szData);
		map.put("szErrMsg", szErrMsg);

		return map;
	}
}
