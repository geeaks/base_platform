package com.ucf.customer.utils;

import java.io.Serializable;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.ucf.onlinepay.framework.common.util.Serializer;

import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;
import redis.clients.jedis.JedisPoolConfig;
/*
 * Redis操作工具类
 * @version 1.0
 * @date 2014.03.26
 */
public class RedisUtils {
	
	private final static transient Log logger = LogFactory.getLog(RedisUtils.class);
	public static Map<Integer,String> redismap = new ConcurrentHashMap<Integer,String>();

	private static JedisPool pool;
		
	private String poolHost;
	private int poolPort;
	private int maxIdle;
	private int maxTotal;
	private int timeBetweenEvictionRunsMillis;
	private int minEvictableIdleTimeMillis;
	private boolean testOnBorrow;
	private String encode;
	private String expire;
	private boolean unlock;
	
	public void init(){
		JedisPoolConfig config = new JedisPoolConfig();
		config.setMaxIdle(maxIdle);
		config.setMaxTotal(maxTotal);
		config.setTimeBetweenEvictionRunsMillis(timeBetweenEvictionRunsMillis);
		config.setMinEvictableIdleTimeMillis(minEvictableIdleTimeMillis);
		config.setTestOnBorrow(testOnBorrow);
		pool = new JedisPool(config,poolHost,poolPort);
	}
	
	public static JedisPool getPool() {
		return pool;
	}

	public static void setPool(JedisPool pool) {
		RedisUtils.pool = pool;
	}
	
	/*
	 * this method is responsible for push a message into queue
	 */
	public static void push(byte[] name,byte[] message){
		Jedis jedis =null;
		try{
			jedis = getPool().getResource();
			jedis.lpush(name, message);
		}catch(Exception e){
			logger.error("Push data into queue is failure"+e);
			getPool().returnBrokenResource(jedis);
		}finally{
			getPool().returnResource(jedis);
		}	
	}


	/*
	 * @method 
	 * this method can pull a message through the queue name
	 */
	public static  byte[] pull(byte[] name) {
		byte[] result =null;
		Jedis jedis =null;
		try{
			jedis = getPool().getResource();
			boolean b = jedis.exists(name);
			if(b != false){
				long len = jedis.llen(name);
				if(len != 0){
					result = jedis.rpop(name);
				}else{
					throw new IllegalArgumentException("The queue is empty in the redis");
				}
			}else{
				throw new IllegalArgumentException("there is not the queue in the redis");
			}
		}catch(Exception  e){
			logger.error("Push data into queue is failure"+e);
			getPool().returnBrokenResource(jedis);
		}finally{
			getPool().returnResource(jedis);
		}	
		return result;
	}
	
	public static int getQueueSize(final byte[] name ) {
		Jedis jedis = null;
		int result = 0;
		try{
			jedis = getPool().getResource();
			result = jedis.lrange(name, 0, -1).size();
			logger.info("the current queue size is =" +result);
		}catch(Exception e){
			logger.error(e);
			getPool().returnBrokenResource(jedis);
		}finally{
			getPool().returnResource(jedis);
		}
		return result;
	}
	/*
	 * set key-value structure
	 * @param key:name  key:value
	 * @Exception exception
	 */
	public static void setKeyValue(String name,String value){
		Jedis jedis = null;
		try{
			jedis = getPool().getResource();
			jedis.set(name, value);
		}catch(Exception e){
			getPool().returnBrokenResource(jedis);
		}finally{
			getPool().returnResource(jedis);
		}
	}
	/**
	 * Description: Save data into redis by byte
	 * @param key
	 * @param value
	 */
	public static void setKeyvalue(byte[] key,byte[] value){
		Jedis jedis = null;
		try{
			jedis = getPool().getResource();
			jedis.set(key, value);
		}catch(Exception e){
			getPool().returnBrokenResource(jedis);
		}finally{
			getPool().returnResource(jedis);
		}
	}
	
	/*
	 * set key-value structure
	 * @param key:name  key:value
	 * @Exception exception
	 */
	public static void setKeyValue(Serializable name,Serializable value){
		Jedis jedis = null;
		try{
			jedis = getPool().getResource();
			byte[] key = SerializableSerializer.raw(name);
			byte[] vv = SerializableSerializer.raw(value);
			jedis.set(key, vv);
		}catch(Exception e){
			getPool().returnBrokenResource(jedis);
		}finally{
			getPool().returnResource(jedis);
		}
	}
	/*
	 * get the value for the key name
	 * @param name ----key
	 * @Exception exception  
	 */
	public static String getVaueByKey(String name){
		
		Jedis jedis = null;
		String value = null;
		try{
			jedis = getPool().getResource();
			value = jedis.get(name);
		}catch(Exception e){
			getPool().returnBrokenResource(jedis);
		}finally{
			getPool().returnResource(jedis);
		}
		return value;
	}
	
	public static void upadteValue(String name,long value){
		Jedis jedis = null;
		try{
			jedis = getPool().getResource();
			jedis.incrBy(name, value);
		}catch(Exception e){
			getPool().returnBrokenResource(jedis);
		}finally{
			getPool().returnResource(jedis);
		}
	}

	/*
	 * @method add hashmap structure into hashmset
	 * @Exception
	 */
	public static void saveHash(String key,String value){
		Jedis jedis = null;
		try{
			jedis = getPool().getResource();
		}catch(Exception e){
			getPool().returnBrokenResource(jedis);
		}finally{
			getPool().returnResource(jedis);
		}
	}
	
	/*
	 * clear up the redis db
	 * @Exception no
	 * @param 
	 */
	public static void clearRedisDB(){
		Jedis jedis = null;
		try{
			jedis = getPool().getResource();
			jedis.flushDB();
		}catch(Exception e){
			getPool().returnBrokenResource(jedis);
		}finally{
			getPool().returnResource(jedis);
		}
	}
	
	
	public static void hashPutDemo(String redisKey,String mapKey,String mapValue){
		Jedis jedis = null;
		try{
			jedis = getPool().getResource();
			byte[] redisKey1 = null;
			if(redisKey !=null){
				redisKey1 = Serializer.serializeToByteArray(redisKey);
			}
			byte[] mapKey1 = null;
			if(mapKey !=null){
				mapKey1 = Serializer.serializeToByteArray(mapKey);
			}
			byte[] mapValue1 = null;
			if(mapValue!=null){
				mapValue1 = Serializer.serializeToByteArray(mapValue);
			}
			jedis.hset(redisKey1, mapKey1, mapValue1);
//			jedis.expire(redisKey1, 30000);
		}catch(Exception e){
			logger.info("Hash setValue is wrong" + e.getMessage());
			logger.info("hashPutDemo: redisKey [" + redisKey + "] mapKey [" + mapKey + "] mapValue ["+ mapValue + "]");
			getPool().returnBrokenResource(jedis);
		}finally{
			getPool().returnResource(jedis);
		}
	}
	public static void hashPut(String redisKey,String mapKey,Serializable mapValue){
		Jedis jedis = null;
		try{
			jedis = getPool().getResource();
			byte[] redisKey1 = SerializableSerializer.raw(redisKey);
			byte[] mapKey1 = SerializableSerializer.raw(mapKey);
			byte[] mapValue1 = SerializableSerializer.raw(mapValue);
			jedis.hset(redisKey1, mapKey1, mapValue1);
//			jedis.expire(redisKey1, 30000);
		}catch(Exception e){
			logger.error("Hash setValue is wrong" + e.getMessage());
			getPool().returnBrokenResource(jedis);
		}finally{
			getPool().returnResource(jedis);
		}
	}
	public static void hashPut(String redisKey,String mapKey,String mapValue){
		Jedis jedis = null;
		try {
			jedis = getPool().getResource();
			byte[] redisKey1 = redisKey.getBytes();
			byte[] mapKey1 = mapKey.getBytes();
			byte[] mapValue1 = mapValue.getBytes();
			jedis.hset(redisKey1, mapKey1, mapValue1);
		} catch (Exception e) {
			logger.error("Hash setValue is wrong" + e.getMessage());
			getPool().returnBrokenResource(jedis);
		}finally{
			getPool().returnResource(jedis);
		}
	}

	public static Serializable hashGet(String redisKey,String mapKey){
		Jedis jedis = null;
		try{
			jedis = getPool().getResource();
			byte[] redisKey1 = SerializableSerializer.raw(redisKey);
			byte[] mapKey1 = SerializableSerializer.raw(mapKey);
			byte[] mapValue1 = jedis.hget(redisKey1, mapKey1);
			return (Serializable)SerializableSerializer.unRaw(mapValue1);
		}catch(Exception e){
			getPool().returnBrokenResource(jedis);
		}finally{
			getPool().returnResource(jedis);
		}
		return null;
	}
	
	
	public static boolean hashExsit(String redisKey,String mapKey){
		Jedis jedis = null;
		try{
			jedis = getPool().getResource();
			byte[] redisKey1 = SerializableSerializer.raw(redisKey);
			byte[] mapKey1 = SerializableSerializer.raw(mapKey);
			return jedis.hexists(redisKey1, mapKey1);
		}catch(Exception e){
			getPool().returnBrokenResource(jedis);
		}finally{
			getPool().returnResource(jedis);
		}
		return false;
	}
	
	
	public static void hashDelete(String redisKey,String mapKey){
		Jedis jedis = null;
		try{
			jedis = getPool().getResource();
			byte[] redisKey1 = SerializableSerializer.raw(redisKey);
			byte[] mapKey1 = SerializableSerializer.raw(mapKey);
			jedis.hdel(redisKey1, mapKey1);
		}catch(Exception e){
			getPool().returnBrokenResource(jedis);
		}finally{
			getPool().returnResource(jedis);
		}
	}
	
	
	public static void deleteKey(String redisKey){
		Jedis jedis = null;
		try{
			jedis = getPool().getResource();
			jedis.del(redisKey);
		}catch(Exception e){
			getPool().returnBrokenResource(jedis);
		}finally{
			getPool().returnResource(jedis);
		}
	}
	
	public static void setExpire(String redisKey,int seconds){
		Jedis jedis = null;
		try{
			jedis = getPool().getResource();
			jedis.expire(redisKey, seconds);
		}catch(Exception e){
			getPool().returnBrokenResource(jedis);
		}finally{
			getPool().returnResource(jedis);
		}
	}
	
	
	public static boolean hasKey(String redisKey){
		Jedis jedis = null;
		try{
			jedis = getPool().getResource();
			return jedis.exists(redisKey);
		}catch(Exception e){
			getPool().returnBrokenResource(jedis);
		}finally{
			getPool().returnResource(jedis);
		}
		return false;
	}
	
	
	
	
	/*
	 * @Exeption 
	 * @method get special field value
	 */
	public static String readHash(String key,String field){
		String value =null;
		Jedis jedis = null;
		try{
			jedis = getPool().getResource();
			value = jedis.hget(key, field);
		}catch(Exception e){
			getPool().returnBrokenResource(jedis);
		}finally{
			getPool().returnResource(jedis);
		}
		return value;
	}
	/*
	 * @method update hashmap
	 */
	public static void updateHash(String key,String field,long value){
		Jedis jedis = null;
		try{
			jedis = getPool().getResource();
			jedis.hincrBy(key, field, value);
		}catch(Exception e){
			getPool().returnBrokenResource(jedis);
		}finally{
			getPool().returnResource(jedis);
		}
	}


	public String getPoolHost() {
		return poolHost;
	}

	public void setPoolHost(String poolHost) {
		this.poolHost = poolHost;
	}

	public int getPoolPort() {
		return poolPort;
	}

	public void setPoolPort(int poolPort) {
		this.poolPort = poolPort;
	}

	public int getMaxIdle() {
		return maxIdle;
	}

	public void setMaxIdle(int maxIdle) {
		this.maxIdle = maxIdle;
	}

	public int getMaxTotal() {
		return maxTotal;
	}

	public void setMaxTotal(int maxTotal) {
		this.maxTotal = maxTotal;
	}

	public int getTimeBetweenEvictionRunsMillis() {
		return timeBetweenEvictionRunsMillis;
	}

	public void setTimeBetweenEvictionRunsMillis(int timeBetweenEvictionRunsMillis) {
		this.timeBetweenEvictionRunsMillis = timeBetweenEvictionRunsMillis;
	}

	public int getMinEvictableIdleTimeMillis() {
		return minEvictableIdleTimeMillis;
	}

	public void setMinEvictableIdleTimeMillis(int minEvictableIdleTimeMillis) {
		this.minEvictableIdleTimeMillis = minEvictableIdleTimeMillis;
	}

	public boolean isTestOnBorrow() {
		return testOnBorrow;
	}

	public void setTestOnBorrow(boolean testOnBorrow) {
		this.testOnBorrow = testOnBorrow;
	}

	public String getEncode() {
		return encode;
	}

	public void setEncode(String encode) {
		this.encode = encode;
	}

	public String getExpire() {
		return expire;
	}

	public void setExpire(String expire) {
		this.expire = expire;
	}

	public boolean isUnlock() {
		return unlock;
	}

	public void setUnlock(boolean unlock) {
		this.unlock = unlock;
	}

}
