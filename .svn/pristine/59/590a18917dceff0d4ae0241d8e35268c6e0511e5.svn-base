package com.ucf.customer.service.out;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.ucf.customer.api.enums.EnumAuthType;
import com.ucf.customer.bo.ResultBo;
import com.ucf.customer.utils.enums.EnumResultCode;
import com.ucf.payment.util.constant.PaymentEnum;
import com.ucf.payment.ws.bo.AuthRealNameParamBo;
import com.ucf.payment.ws.bo.AuthRealNameWsReturnValueBo;
import com.ucf.payment.ws.service.IRealNameAuthWS;
import com.ucf.platform.framework.core.log.UcfLogger;
import com.ucf.platform.framework.core.log.UcfLoggerFactory;
import com.ucf.platform.framework.core.util.SensitiveInfoUtils;

@Service
public class PaymentService {

	private static final UcfLogger LOGGER = UcfLoggerFactory
			.getLogger(PaymentService.class);
	
	@Autowired(required = false)
	private IRealNameAuthWS iRealNameAuthWS;
	
	public ResultBo userAuth(String merchantId,String authType, String realName, String certNo,
			String bankCardNo, String phone, String cardType, String cvn2, String validDate, String bankId) {
		AuthRealNameParamBo authRealNameParamBo = new AuthRealNameParamBo();
		// 姓名、身份证鉴权
		if (authType.equals(EnumAuthType.NAME_CERT.getCode())) {
			authRealNameParamBo.setAuthType(PaymentEnum.PAY_TOOL_AUTH_IDENTITY.getCode());
			authRealNameParamBo.setRealName(realName);
			authRealNameParamBo.setCertificateNo(certNo);
			authRealNameParamBo.setCertificateType(PaymentEnum.CERTIFICATE_TYPE.getMsg());
		}
		// 银行卡、银行预留手机号鉴权
		if (authType.equals(EnumAuthType.BANK_CELL_NO.getCode())) {
			authRealNameParamBo.setAuthType(PaymentEnum.PAY_TOOL_AUTH_CARD.getCode());
			authRealNameParamBo.setCertificateType(PaymentEnum.CERTIFICATE_TYPE.getMsg());
			authRealNameParamBo.setCardNo(bankCardNo.replace(" ", ""));
			authRealNameParamBo.setMoblie(phone);
		}
		// 姓名、身份证、银行卡、银行预留手机号鉴权
		if (authType.equals(EnumAuthType.NAME_CERT_BANK_CELL.getCode())) {
			authRealNameParamBo.setAuthType(PaymentEnum.PAY_TOOL_AUTH_CARD.getCode());
			authRealNameParamBo.setRealName(realName);
			authRealNameParamBo.setCertificateNo(certNo);
			authRealNameParamBo.setCertificateType(PaymentEnum.CERTIFICATE_TYPE.getMsg());
			authRealNameParamBo.setCardNo(bankCardNo.replace(" ", ""));
			authRealNameParamBo.setMoblie(phone);
		}
		//贷记卡需要 增加
		if(StringUtils.isNotEmpty(bankCardNo) && StringUtils.isNotEmpty(cardType) && PaymentEnum.BANK_CARK_DAI.getMsg().equals(cardType)){
			authRealNameParamBo.setCardType(cardType);
			authRealNameParamBo.setCvn2(cvn2);
			authRealNameParamBo.setValidDate(validDate);
			authRealNameParamBo.setBankId(bankId);
		}
		// 产品
		authRealNameParamBo.setBizProduct("100");
		authRealNameParamBo.setMerchantId(merchantId);
		ResultBo bo = new ResultBo();
		try {
			AuthRealNameWsReturnValueBo authRealNameWsReturnValueBo;
			authRealNameWsReturnValueBo = iRealNameAuthWS.authRealName(authRealNameParamBo);
			if (PaymentEnum.PAYMENT_DEAL_RESULT_SUCCESS.getCode().equals(
					authRealNameWsReturnValueBo.getReturnValueMap().get("result"))) {
				bo.setResult(EnumResultCode.SUCCESS.getCode());
			} else {
				LOGGER.info("统一支付用户鉴权出参：" + SensitiveInfoUtils.getJson(authRealNameWsReturnValueBo));//统一支付系统修改
				LOGGER.info("统一支付用户鉴权入参：" + SensitiveInfoUtils.getJson(authRealNameParamBo));//统一支付系统修改
				bo.setResult(EnumResultCode.FAI.getCode());
			}
		} catch (Exception e) {
			bo.setResult(EnumResultCode.ERROR.getCode());
			LOGGER.error("鉴权异常", e);
		}
		return bo;
	}
	
}
