package com.ucf.customer.utils;

import java.util.UUID;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Component;

/**
 * 
 * Description: redisSession工厂类
 * All Rights Reserved.
 * @version 1.0  2014-3-13 下午2:56:12  by 李晓明（lixiaoming@ucfgroup.com）创建
 */
@Component
public class RedisSessionFactory {
	
	private static RedisSessionFactory instance= null;
	private RedisSessionFactory(){}
	
	public static synchronized RedisSessionFactory getInstance(){
		if(null==instance){
			instance = new RedisSessionFactory();
		}
		return instance;
	}
	
	
	private int maxAge = 3600;
	
//	private int timeout = 3600;
	
	private static final String REDIS_SESSIONID = "redis_sessionId";
	
	public RedisSession getSession(HttpServletRequest request, HttpServletResponse response){
		return getSession(request,response,false);
	}
	
	public RedisSession getSession(HttpServletRequest request, HttpServletResponse response,boolean isNew){
		String sessionId ="";
		Cookie[] cookies = request.getCookies();
		boolean sessionExsit = false;
		if(cookies!=null){
			for(Cookie cookie:cookies){
				if(cookie.getName().compareTo(REDIS_SESSIONID)==0){
					sessionExsit = true;
					sessionId = cookie.getValue();
					 cookie.setPath("/");
					cookie.setMaxAge(maxAge);
					response.addCookie(cookie);
				}
			}
		}
		if(isNew || !sessionExsit){
			sessionId = UUID.randomUUID()+"";
			addCookie(response,REDIS_SESSIONID,sessionId,maxAge);
			//设置过期时间
			RedisUtils.setExpire(sessionId, maxAge);
		}
		
		return new RedisSession(sessionId);
	}
	
	
	
	
	
	/**
	 * 
	 * Description: 
	 * @Version1.0 2014-4-3 上午11:40:58 by 李悦（liyue3@ucfgroup.com）创建
	 * @param newSessionId
	 * @return
	 */
	public RedisSession getSession(String newSessionId){
		String sessionId ="";
		boolean sessionExsit = false;
		String sessId = RedisUtils.getVaueByKey(newSessionId);
		if(sessId!=null){
			if(sessId.compareTo(newSessionId)==0){
				sessionExsit = true;
			}
		}
		if(!sessionExsit){
			sessionId = newSessionId;
			//设置过期时间
			RedisUtils.setExpire(sessionId, maxAge);
		}
		
		return new RedisSession(sessionId);
	}
	
	private void addCookie(HttpServletResponse response,String name,String value,int maxAge){
	    Cookie cookie = new Cookie(name,value);
	    cookie.setPath("/");
	    if(maxAge>0)  cookie.setMaxAge(maxAge);
	    response.addCookie(cookie);
	}
}
