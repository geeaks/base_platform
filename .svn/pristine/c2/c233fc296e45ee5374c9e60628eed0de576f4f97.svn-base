package com.ucf.customer.service.impl;

import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.support.TransactionCallback;
import org.springframework.transaction.support.TransactionTemplate;
import org.springframework.util.StringUtils;

import com.ucf.customer.api.bo.MemberCommonResult;
import com.ucf.customer.api.enums.EnumBankCardType;
import com.ucf.customer.api.enums.EnumBankCardUseType;
import com.ucf.customer.api.enums.EnumCertStatus;
import com.ucf.customer.api.enums.EnumCertType;
import com.ucf.customer.api.enums.EnumRealnameStatus;
import com.ucf.customer.api.enums.EnumRespStatusCode;
import com.ucf.customer.api.enums.EnumUserType;
import com.ucf.customer.api.enums.EnumsUserCardType;
import com.ucf.customer.bo.EnterpriseParamBO;
import com.ucf.customer.bo.RegisterParamBO;
import com.ucf.customer.bo.ResultBo;
import com.ucf.customer.pojo.UcfBankCard;
import com.ucf.customer.pojo.UcfCard;
import com.ucf.customer.pojo.UcfCustomer;
import com.ucf.customer.pojo.UcfOrg;
import com.ucf.customer.pojo.UcfPerson;
import com.ucf.customer.pojo.UcfSubCard;
import com.ucf.customer.pojo.UcfUser;
import com.ucf.customer.pojo.UcfUserLoginApp;
import com.ucf.customer.security.Cryptos;
import com.ucf.customer.service.BankCardService;
import com.ucf.customer.service.CardService;
import com.ucf.customer.service.LoginService;
import com.ucf.customer.service.UserInfoService;
import com.ucf.customer.service.UserService;
import com.ucf.customer.service.out.AccountService;
import com.ucf.customer.utils.Constants;
import com.ucf.customer.utils.enums.EnumBindBankCardStatus;
import com.ucf.customer.utils.enums.EnumRedisKey;
import com.ucf.customer.utils.enums.EnumResultCode;
import com.ucf.customer.utils.enums.EnumUserEnabledStatus;
import com.ucf.customer.utils.enums.EnumVerifyLevle;
import com.ucf.onlinepay.framework.common.util.DateUtil;
import com.ucf.platform.framework.core.log.UcfLogger;
import com.ucf.platform.framework.core.log.UcfLoggerFactory;
import com.ucf.platform.framework.core.util.SensitiveInfoUtils;

@Service("userInfoService")
public class UserInfoServiceImpl implements UserInfoService {
	
	private static UcfLogger LOGGER = UcfLoggerFactory .getLogger(UserInfoServiceImpl.class);
	
	@Autowired
	private AccountService accountService;
	@Autowired
	private BankCardService bankCardService;
	@Autowired
	private CardService cardService;	
	@Autowired
	private LoginService loginService;
	@Autowired
	private UserService userService;
	@Autowired
	private ExpriseTimesService expriseSerivce;
	
	
	@Resource(name = "sharedTransactionTemplate")
	private TransactionTemplate transactionTemplate;
	
	@Override
	public ResultBo realName(final String userId,final String realName,final String certType,final String certNo,final String certSatus) {
		ResultBo ro  = new ResultBo();
		try {
			final UcfUser user = loginService.queryUserInfo(userId);
			final UcfCard card = cardService.queryCardInfo(userId);
			/**修改用户认证级别**/
			//快捷支付、小额打款认证属于 普通认证级别
			if(EnumCertStatus.FASTPAY_CERT.getCode().equals(certSatus) 
					|| EnumCertStatus.REMIT_CERT.getCode().equals(certSatus)){
				//如果未高级认证过 则设置用户认证级别为 普通实名认证级别
				if(!EnumVerifyLevle.SENIOR.getCode().equals(user.getVerifyStatus())){
					user.setVerifyStatus(EnumVerifyLevle.ORDINARY.getCode());
				}
			//照片审核、小额转账认证属于 高级认证级别
			}else if(EnumCertStatus.TRANSFER_CERT.getCode().equals(certSatus) 
					|| EnumCertStatus.AUDIT_CERT.getCode().equals(certSatus)){
				user.setVerifyStatus(EnumVerifyLevle.SENIOR.getCode());
			}
			//如果用户已实名认证过
			if(Constants.VERIFY_STATUS_T.equals(user.getRealnameStatus())){
				if (card.getCertStatus()==null ) {
					card.setCertStatus(certSatus);
				}else if(card.getCertStatus().indexOf(certSatus) == -1){
					card.setCertStatus(card.getCertStatus() + ";"+ certSatus);
				}
				cardService.updateUcfCard(card);
				loginService.updateUcfUser(user);
				ro.setResult(EnumResultCode.SUCCESS.getCode());
				ro.setMsg("处理成功");
			}else{
				card.setCertStatus(certSatus);
				boolean commit = (Boolean) transactionTemplate.execute(new TransactionCallback<Object>() {
					public Object doInTransaction(final TransactionStatus status) {
						try {
							user.setRealnameStatus(Constants.VERIFY_STATUS_T);
							user.setCertNo(certNo);
							user.setCertType(certType);
							loginService.updateUcfUser(user);
							// 判断customer表是否存在记录
							UcfCustomer customer = new UcfCustomer();
							customer.setCertNo(certNo);
							customer.setCertType(certType);
							customer = loginService.queryUcfCustomerInfo(customer);
							if (customer == null) {
								customer = new UcfCustomer();
								customer.setCertNo(certNo);
								customer.setCertType(certType);
								customer.setName(realName);
								customer.setCardNo(card.getCardNo());
								customer.setOpenStatus(Constants.OPEN_STATUS_YES);
								customer.setCertStatus(Constants.VERIFY_STATUS_T);
								customer.setNational("CHA");
								customer.setType(Constants.CUSTOMER_TYPE_PERSON);
								customer.setEnableStatus(Constants.ENABLE_STATUS_T);
								customer.setExtFlag(Constants.EXT_FLAG_T);
								loginService.insertCustomer(customer);
								// 插入Ucf_Person表
								final UcfPerson person = new UcfPerson();
								UcfCustomer existscustomer = new UcfCustomer();
								existscustomer.setCertNo(certNo);
								existscustomer.setCertType(certType);
								UcfCustomer exist =loginService.queryUcfCustomerInfo(existscustomer);
								person.setCustomerId(exist.getCustomerId());
								person.setRealName(realName);
								person.setCell(user.getCell());
								loginService.insertPersonInfo(person);
								card.setCustomerId(exist.getCustomerId());
							}else{
								card.setCustomerId(customer.getCustomerId());
							}
							cardService.updateUcfCard(card);
						} catch (final Exception e) {
							status.setRollbackOnly();
							LOGGER.error(e.getMessage(), e);
							return false;
						}
						return true;
					}
			});
			if (commit) {
				ro.setResult(EnumResultCode.SUCCESS.getCode());
				ro.setMsg("处理成功");
			} else {
				ro.setResult(EnumResultCode.ERROR_DB.getCode());
				ro.setMsg("数据库操作异常");
			}
		}
	  } catch (Exception e) {
			 LOGGER.error(e.getMessage(),e);
			 ro.setResult(EnumResultCode.ERROR.getCode());
			 ro.setMsg("系统异常");
	   }
	   return ro;
	}
	
	/**
	 * 判断用户的两个密码是否相同
	 * @param userId
	 * @param pwd1
	 * @param pwd2
	 * @return
	 */ 
	@Override
	public boolean isUserPwdMatch(String userId, String pwd1,String pwd2){
		if(pwd1==null || pwd2 == null){
			LOGGER.warn("用户[" + userId + "] 密码异常" );
			return false;
		}
		if(pwd1.equals(pwd2)){
			return true;
		}
		String pwdSec1 = Cryptos.encrypt(pwd1, userId);
		String pwdSec2 = Cryptos.encrypt(pwd2, userId);
		if(pwdSec1.equals(pwdSec2) || pwdSec1.equals(pwd2) || pwd1.equals(pwdSec2)){
			return true;
		}
		return false;
	}
	
	private boolean isUserPayPwdMatch(String userId, byte [] payPwd)
			throws Exception {
		UcfCard ucfcard = cardService.queryCardInfo(userId);
		if(isUserPwdMatch(userId,new String(payPwd),ucfcard.getPaymentPassword())){
			return true;
		}
		return false;
	}
	
	@Override
	public void resetLgnPwd(String userId, byte[] pwd) throws Exception {
		UcfUserLoginApp query = new UcfUserLoginApp();
		query.setUserId(userId);
		UcfUserLoginApp userApp = loginService.queryUserLoginApp(query);
		userApp.setLoginPwd(Cryptos.encrypt(new String(pwd), userId));
		loginService.updateUcfUserApp(userApp);
		expriseSerivce.clearExpriseTimes(EnumRedisKey.LGN_PWD_ERROR_TIME_KEY.getKey()  + userId);
	}

	@Override
	public void resetPayPwd(String userId, byte[] pwd) throws Exception {
		UcfCard card = loginService.queryUcfCardByUserId(userId);
		if(card!=null){
			card.setCardNo(userId);
			card.setPaymentPassword(Cryptos.encrypt(new String(pwd), userId));
			loginService.updateUcfCard(card);
			expriseSerivce.clearExpriseTimes(EnumRedisKey.PAY_PWD_ERROR_TIME_KEY.getKey()  + userId);
		}else{
			throw new Exception("未查询到该用户，请确认该用户存在");
		}
	}

	@Override
	public ResultBo checkLoginPwd(String userId,  byte []  lgnPwd) {
		ResultBo bo = new ResultBo();
		try {
			String rediskey = EnumRedisKey.LGN_PWD_ERROR_TIME_KEY.getKey()  + userId;
			if (!expriseSerivce.canDo(rediskey,EnumRedisKey.LGN_PWD_ERROR_TIME_KEY.getNumber())) {
				bo.setResult(EnumResultCode.FAI.getCode());
				bo.setMsg("用户被冻结,24小时后自动解冻!");
				bo.setErrorTimes(EnumRedisKey.LGN_PWD_ERROR_TIME_KEY.getNumber());
				return bo;
			} 
			UcfUserLoginApp query = new UcfUserLoginApp();
			query.setUserId(userId);
			UcfUserLoginApp userApp = loginService.queryUserLoginApp(query);
			boolean flag = isUserPwdMatch(userId,userApp.getLoginPwd(),new String(lgnPwd));
			if (flag) {
				expriseSerivce.clearExpriseTimes(rediskey);
				bo.setResult(EnumResultCode.SUCCESS.getCode());
				//TODO 处理
				//userApp.setFrozenState(Constants.FROZEN_NO);
				//userService.updateUcfUserApp(userApp);
			} else {
				int errorTimes = expriseSerivce.doneUnSuccess(rediskey,EnumRedisKey.LGN_PWD_ERROR_TIME_KEY.getTimeout());
				bo.setResult(EnumResultCode.FAI.getCode());
				if (EnumRedisKey.LGN_PWD_ERROR_TIME_KEY.getNumber() == errorTimes) {
					//userApp.setFrozenState(Constants.FROZEN_YES);
					//userService.updateUcfUserApp(userApp);
					bo.setMsg("登录密码错误超过" + errorTimes + "次,24小时后自动解冻!");
				} else {
					bo.setMsg("登录密码错误" + errorTimes + "次!");
				}
			}
		} catch (Exception e) {
			LOGGER.error(e.getMessage(), e);
			bo.setResult(EnumResultCode.ERROR.getCode());
			bo.setMsg("系统异常");
		}
		return bo;
	}
	
	@Override
	public ResultBo checkPayPwd(String userId,  byte []  payPwd) {
		ResultBo bo = new ResultBo();
		try {
			String rediskey = EnumRedisKey.PAY_PWD_ERROR_TIME_KEY.getKey()  + userId;
			if (!expriseSerivce.canDo(rediskey,EnumRedisKey.PAY_PWD_ERROR_TIME_KEY.getNumber())) {
				bo.setResult(EnumResultCode.FAI.getCode());
				bo.setMsg("支付密码被冻结,24小时后自动解冻");
				bo.setErrorTimes(EnumRedisKey.PAY_PWD_ERROR_TIME_KEY.getNumber());
				return bo;
			} 
			boolean flag = isUserPayPwdMatch(userId,payPwd);
			if (flag) {
				expriseSerivce.clearExpriseTimes(rediskey);
				bo.setResult(EnumResultCode.SUCCESS.getCode());
			} else {
				int errorTimes = expriseSerivce.doneUnSuccess(rediskey,EnumRedisKey.PAY_PWD_ERROR_TIME_KEY.getTimeout());
				bo.setResult(EnumResultCode.FAI.getCode());
				if (EnumRedisKey.PAY_PWD_ERROR_TIME_KEY.getNumber() == errorTimes) {
					bo.setMsg("支付密码超过" + errorTimes + "次,24小时后自动解冻");
					bo.setErrorTimes(errorTimes);
				} else {
					bo.setMsg("支付密码错误" + errorTimes + "次");
					bo.setErrorTimes(errorTimes);
				}
			}
		} catch (Exception e) {
			LOGGER.error(e.getMessage(), e);
			bo.setResult(EnumResultCode.ERROR.getCode());
			bo.setMsg("系统异常");
		}
		return bo;
	}
	
	@Override
	public ResultBo isExistSubCard(String userId, EnumsUserCardType cardType) {
		ResultBo bo = new  ResultBo();
		try {
			UcfCard ucfcard = cardService.queryCardInfo(userId);
			UcfSubCard ucfSubCard = new UcfSubCard();
			ucfSubCard.setCardNo(ucfcard.getCardNo());
			ucfSubCard.setCardType(cardType.getCode());
			List<UcfSubCard> subCards = cardService.queryUcfSubCard(ucfSubCard);
			//子卡已存在
			if (subCards!=null&&subCards.size()>0) {
				bo.setResult(EnumResultCode.SUCCESS.getCode());
				bo.setMsg("已开通基金子卡");
			}else{
				bo.setResult(EnumResultCode.FAI.getCode());
				bo.setMsg("未开通基金子卡");
			}
		} catch (Exception e) {
			bo.setResult(EnumResultCode.ERROR.getCode());
			bo.setMsg("很抱歉，系统异常,异常信息:"+e.getMessage());
			LOGGER.error("创建子卡异常",e);
		}
		return bo;
	}
	
	@Override
	public ResultBo createSubCard(String userId,EnumsUserCardType cardType){
		ResultBo bo = new  ResultBo();
		try {
			ResultBo exRo = isExistSubCard(userId,cardType);
			if(EnumResultCode.SUCCESS.getCode().equals(exRo.getResult())){
				bo.setResult(EnumResultCode.EXIST.getCode());
				bo.setMsg("子卡已存在");
				return bo;
			}else if(EnumResultCode.ERROR.getCode().equals(exRo.getResult())){
				bo.setResult(EnumResultCode.ERROR.getCode());
				bo.setMsg("系统异常");
				return bo;
			}
			// 不存在资金子卡，进行开子卡
			UcfCard ucfcard = cardService.queryCardInfo(userId);
			String subCardNo = cardService.getSubCardNo();
			UcfSubCard subCard = new UcfSubCard();
			subCard.setSubCardNo(subCardNo);
			subCard.setCardNo(ucfcard.getCardNo());
			subCard.setCardType(cardType.getCode());
			ResultBo rsbo = accountService.createAcccount(subCard.getSubCardNo(), cardType.getAccountCode());
			LOGGER.info("创建基金卡返回信息:"+rsbo);
			if(EnumResultCode.SUCCESS.getCode().equals(rsbo.getResult())){
				subCard.setAccountNo(rsbo.getResultObject().toString());
				cardService.inserUcfSubCard(subCard);
				ucfcard.setSubCardFlag("Y");
				cardService.updateUcfCard(ucfcard);
				bo.setResult(EnumResultCode.SUCCESS.getCode());
			}else{
				bo.setResult(EnumResultCode.FAI.getCode());
				bo.setMsg(rsbo.getMsg());
				LOGGER.info("调用账务开户失败" + SensitiveInfoUtils.getJson(rsbo));
			}
		} catch (Exception e) {
			bo.setResult(EnumResultCode.ERROR.getCode());
			bo.setMsg("系统异常");
			LOGGER.error("创建子卡异常",e);
		}
		return bo;
	}
	
	private UcfUser findExistsMerchantCellUser(String merchantId,String cell){
		try {
			UcfUser user = new UcfUser();
			user.setRefMerchant(merchantId);
			user.setCell(cell);
			List<UcfUser> list = loginService.queryUcfUser(user);
			if(list!=null && !list.isEmpty()){
				return list.get(0);
			}
		} catch (Exception e) {
			LOGGER.error("查询用户",e);
		}
		return null;
	}
	
	@Override
	public UcfUser isExistsMerchantUser(String merchantId,String refUser){
		try {
			UcfUser user = new UcfUser();
			user.setRefMerchant(merchantId);
			user.setRefUser(refUser);
			List<UcfUser> list = loginService.queryUcfUser(user);
			if(list!=null && !list.isEmpty()){
				return list.get(0);
			}
		} catch (Exception e) {
			LOGGER.error("查询用户",e);
		}
		return null;
	}
	
	private UcfUser findExistsUser(String loginNmae){
		try {
			UcfUserLoginApp loginApp = loginService.queryUserAppInfo(loginNmae);
			if(loginApp!=null){
				return loginService.queryUserInfo(loginApp.getUserId());
			}
		} catch (Exception e) {
			LOGGER.error("查询用户",e);
		}
		return null;
	}
	
	private boolean isSame(UcfUser user,RegisterParamBO registerBo){
		if(user.getRealName().equals(registerBo.getRealName())
				&& user.getCertNo().equals(registerBo.getCertNo())){
			return true;
		}
		return false;
	}
	
	public ResultBo register(final RegisterParamBO registerBo){
	ResultBo ro  = new ResultBo();
		UcfUser existUser = null;
		if(RegisterParamBO.COMMON_ACCOUNT.equals(registerBo.getType())){
			existUser = findExistsUser(registerBo.getPhoneNo());
		}else{
			existUser = findExistsMerchantCellUser(registerBo.getRefMerchant(),registerBo.getPhoneNo());
		}
		if(existUser != null){
			if(isSame(existUser,registerBo)){
				ro.setResult(EnumResultCode.EXIST.getCode());
				ro.setMsg("用户已经存在");
			}else{
				ro.setResult(EnumResultCode.REPEAT.getCode());
				ro.setMsg("手机号已被占用");
			}
			return ro;
		}		
		try {
			final String userId = userService.queryUcfUserId();
			final UcfUser user = new UcfUser();
			user.setUserId(userId);
			user.setCell(registerBo.getPhoneNo());
			user.setRealName(registerBo.getRealName());
			user.setRefMerchant(registerBo.getRefMerchant());
			user.setRefUser(registerBo.getRefUser());
			user.setCertType(registerBo.getCertType());
			user.setCertNo(registerBo.getCertNo());
			user.setPinQues(registerBo.getQues());
			user.setPinAnsw(registerBo.getAnsw());
			user.setUserType(BigDecimal.valueOf(registerBo.getUserType()));
			user.setRealnameStatus(EnumRealnameStatus.NOT_REALNAMED.getCode());
			user.setCertValidBeginDate(registerBo.getCertValidBeginDate());
			user.setCertValidEndDate(registerBo.getCertValidEndDate());
			if(registerBo.getLoginPwd()!=null){
				user.setLgnPwd(Cryptos.encrypt(new String(registerBo.getLoginPwd()),userId));
			}
			user.setEnabledStatus(EnumUserEnabledStatus.T.getCode());//W：注册未激活
			user.setVerifyStatus(EnumVerifyLevle.REGISTER.getCode());//注册实名认证 级别
			final UcfCard card = new UcfCard();
			card.setCardNo(userId);
			card.setUserId(userId);
			card.setCardType(EnumsUserCardType.PERSON_CARD.getCode());
			card.setRegisterFrom(registerBo.getRegFrom());
			card.setCertFrom(registerBo.getSource());
			card.setCertStatus(EnumCertStatus.NO_CERT.getCode());
			if(registerBo.getPayPwd()!=null){
				card.setPaymentPassword(Cryptos.encrypt(new String(registerBo.getPayPwd()),userId));
			}
			
			ResultBo rsBo = accountService.createAcccount(card.getCardNo(), EnumsUserCardType.PERSON_CARD.getAccountCode());
			LOGGER.info(SensitiveInfoUtils.getJson(rsBo));
			if (EnumResultCode.SUCCESS.getCode().equals(rsBo.getResult())) {
				card.setAccountId(rsBo.getResultObject().toString());
			}else{
				ro.setResult(EnumResultCode.FAI.getCode());
				ro.setMsg(rsBo.getMsg());
				return ro;
			}

			boolean commit = (Boolean)transactionTemplate.execute(new TransactionCallback<Object>() {
	            // the code in this method executes in a transactional context
	            public Object doInTransaction(final TransactionStatus status) {
	            	try {
	        			//保存用户信息
	        			if(RegisterParamBO.COMMON_ACCOUNT.equals(registerBo.getType())){
	        				user.setLoginId(registerBo.getPhoneNo());
	        				userService.insertUserInfo(user);
	        				final UcfUserLoginApp userLoginApp = new UcfUserLoginApp();
	        				userLoginApp.setLoginId(registerBo.getPhoneNo());
	        				userLoginApp.setFrozenState(Constants.FROZEN_NO);
	        				userLoginApp.setLoginType(Constants.LOGIN_TYPE_CELL);
	        				userLoginApp.setPhone(registerBo.getPhoneNo());
	        				userLoginApp.setUserId(userId);
	        				userLoginApp.setLoginPwd(user.getLgnPwd());
	        				//add by gaoxiang 
	        				userLoginApp.setUserType(registerBo.getUserType()+"");
	        				userService.insertLoginAppInfo(userLoginApp);
	        			}else{
	        				userService.insertUserInfo(user);
	        			}
	        			cardService.insertUcfCard(card);
	        		}catch (final Exception e) {
	        			status.setRollbackOnly();
	        		    LOGGER.error(e.getMessage(),e);
	        		    return false;
	        		} 
					return true;
	            }
	        });
			if(!commit){
				ro.setResult(EnumResultCode.ERROR_DB.getCode());
				ro.setMsg("数据库操作异常");
			}else{
				ro.setResult(EnumResultCode.SUCCESS.getCode());
				ro.setResultObject(userId);
			}
		} catch (Exception e) {
			 LOGGER.error(e.getMessage(),e);
			 ro.setResult(EnumResultCode.ERROR.getCode());
			 ro.setMsg("系统异常");
		}
		return ro;
	}
	
	private boolean isSame(UcfUser user,EnterpriseParamBO registerBo){
		if(user.getRealName().equals(registerBo.getEnterpriseFullName())
				&& user.getCertNo().equals(registerBo.getBusinessLicense())){
			return true;
		}
		return false;
	}
	
	/**
	 * 
	 * @param registerBo
	 * @return
	 */
	public ResultBo register(final EnterpriseParamBO registerBo){
		ResultBo bo = new ResultBo();
		try{
			UcfUser existUser = null;
			if(EnterpriseParamBO.COMMON_ACCOUNT.equals(registerBo.getType())){
				existUser = findExistsUser(registerBo.getAgentPersonEmail());
			}else{
				existUser = findExistsMerchantCellUser(registerBo.getMerchantId(),registerBo.getAgentPersonPhone());
			}
			if(existUser != null){
				if(isSame(existUser,registerBo)){
					bo.setResult(EnumResultCode.EXIST.getCode());
					bo.setMsg("用户已经存在");
				}else{
					bo.setResult(EnumResultCode.REPEAT.getCode());
					if(EnterpriseParamBO.COMMON_ACCOUNT.equals(registerBo.getType())){
						bo.setMsg("邮箱已被占用");
					}else{
						bo.setMsg("手机号已被占用");
					}
				}
				return bo;
			}	
			//生成用户ID
			String userId = userService.queryUcfUserId();
			if("Y".equals(registerBo.getIsSignCustomer())){
				userId = userService.getEnterpriseMemberNO();
			}
			// 此时生成用户信息
			final UcfUser ucfUser = new UcfUser();
			ucfUser.setUserId(userId);
			ucfUser.setRefUser(registerBo.getOuterUserId());
			ucfUser.setRefMerchant(registerBo.getMerchantId());
			ucfUser.setEnabledStatus(registerBo.getEnabledStatus());
			ucfUser.setCertNo(registerBo.getBusinessLicense());
			ucfUser.setCertType(EnumCertType.BUSINESS_LICENSE_CRET.getCode());
			ucfUser.setRealName(registerBo.getEnterpriseFullName());
			ucfUser.setFirmName(registerBo.getEnterpriseShortName());//企业简称
			ucfUser.setRealnameStatus(EnumRealnameStatus.NOT_REALNAMED.getCode());
			ucfUser.setUserType(BigDecimal.valueOf(Integer.valueOf(EnumUserType.ENTERPRISE.getCode())));
			ucfUser.setReturnUrl(registerBo.getEnterpriseURL());
			if(!StringUtils.isEmpty(registerBo.getEndDate())){
				ucfUser.setCertValidEndDate(DateUtil.formatStringToDate(registerBo.getEndDate(), "yyyyMMdd"));
			}
			ucfUser.setEnabledStatus(EnumUserEnabledStatus.T.getCode());
			ucfUser.setPhone(registerBo.getEnterprisePhone());
			ucfUser.setCell(registerBo.getAgentPersonPhone());
			ucfUser.setEmail(registerBo.getAgentPersonEmail());
			ucfUser.setIsSignCustomer(registerBo.getIsSignCustomer());
			
			// 生成卡信息
			final UcfCard ucfCard = new UcfCard();
			ucfCard.setCardNo(userId);
			ucfCard.setUserId(userId);
			ucfCard.setCardType(EnumCertType.BUSINESS_LICENSE_CRET.getCode());
			ucfCard.setRegisterFrom(registerBo.getRegFrom());	
			ucfCard.setCertFrom(registerBo.getSource());
			ucfCard.setCertStatus(EnumCertStatus.NO_CERT.getCode());
			if(registerBo.getPayPwd()!=null){
				ucfCard.setPaymentPassword(Cryptos.encrypt(new String(registerBo.getPayPwd()),userId));
			}
			
			//生成客户信息
			final UcfCustomer  customer  = new UcfCustomer();
			customer.setCertNo(registerBo.getBusinessLicense());//企业执照号
			customer.setCertType(EnumCertType.BUSINESS_LICENSE_CRET.getCode());
			customer.setName(registerBo.getEnterpriseFullName());//企业全称
			customer.setNational("CHA"); 
			customer.setType(Constants.CUSTOMER_TYPE_ORG);
			customer.setExtFlag(Constants.EXT_FLAG_T);
			customer.setOpenStatus(Constants.OPEN_STATUS_YES);
			customer.setEnableStatus(Constants.ENABLE_STATUS_T);
			customer.setCertStatus(Constants.VERIFY_STATUS_T);
			customer.setCardNo(userId);
			//生成机构信息
			String ucfOrgId = userService.queryUcfUserId();
			final UcfOrg ucfOrg = new UcfOrg();
			ucfOrg.setId(ucfOrgId);
			ucfOrg.setRealName(registerBo.getEnterpriseFullName());
			ucfOrg.setCoperation(registerBo.getEnterpriseFullName());//公司
			ucfOrg.setCoperationCard(registerBo.getBusinessLicense());//公司卡
			ucfOrg.setLegalPerson(registerBo.getLegalPersonName());//法人
			ucfOrg.setLegalIdentity(registerBo.getLegalPersonNo());
			ucfOrg.setAgentCard(registerBo.getAgentPersonNo());//代理人证件号码
			ucfOrg.setAgentName(registerBo.getAgentPersonName());//代理人姓名
			ucfOrg.setCountry("CHA");//国家
			ucfOrg.setProvince(registerBo.getProvinces());
			ucfOrg.setCity(registerBo.getCity());
			ucfOrg.setAddress(registerBo.getEnterpriseAddress());
			ucfOrg.setCell(registerBo.getEnterprisePhone());
			ucfOrg.setGmtCreate(new Date());
			ucfOrg.setGmtModified(new Date());
			ucfOrg.setUserId(userId);
			ucfOrg.setCompanyFullName(registerBo.getEnterpriseFullName());
			ucfOrg.setCompanyName(registerBo.getEnterpriseShortName());
			ucfOrg.setCharetNo(registerBo.getBusinessLicense());
		
			ucfOrg.setLicenseCopy(registerBo.getLicenseCopy());
			ucfOrg.setOrgCertificate(registerBo.getOrgCertificate());
			ucfOrg.setTaxCertificate(registerBo.getTaxCertificate());
			ucfOrg.setLegalIdentityCop(registerBo.getLegalIdentityCopy());	
			
			//设置结算银行卡
			final UcfBankCard ucfBankCard = new UcfBankCard();
			if(registerBo.isBindBankCard()){
				StringBuffer id = new StringBuffer();
				StringBuffer seq = id.append(new SimpleDateFormat("yyyyMMdd").format(new Date())).append(bankCardService.getBankCardSeq());
			    ucfBankCard.setId(seq.toString());
				ucfBankCard.setUserId(userId);
				ucfBankCard.setBankName(registerBo.getBankName());
				ucfBankCard.setBankId(registerBo.getBankCode());
				ucfBankCard.setCardNo(registerBo.getBankCardNo());
				ucfBankCard.setCardName(registerBo.getEnterpriseFullName());
				ucfBankCard.setCardType(EnumBankCardType.BUSINESS_ACCOUNT.getCode());
				ucfBankCard.setCertFrom("system");
				ucfBankCard.setRegisterFrom("system");
				ucfBankCard.setGmtCreate(new Date());
				ucfBankCard.setCertifyInfo("system");//branchName
				ucfBankCard.setBranchname(registerBo.getIssuerName());
				ucfBankCard.setIssuer(registerBo.getIssuer());
				ucfBankCard.setCity(registerBo.getCity());
				ucfBankCard.setProvince(registerBo.getProvinces());
				ucfBankCard.setUnionSeq(bankCardService.getUnionSeq());
				ucfBankCard.setStatus(EnumBindBankCardStatus.SUCCESS.getCode());
				if(EnterpriseParamBO.COMMON_ACCOUNT.equals(registerBo.getType())){
					ucfBankCard.setUseType(EnumBankCardUseType.SETTLE.getCode());
				}else{
					ucfBankCard.setUseType(EnumBankCardUseType.FINANCIAL.getCode());
				}
			}
			
			ResultBo rsBo = accountService.createAcccount(ucfCard.getCardNo(), EnumsUserCardType.MERCHANT_CARD.getAccountCode());
			if (!EnumResultCode.SUCCESS.getCode().equals(rsBo.getResult())) {
				bo.setResult(EnumResultCode.FAI.getCode());
				bo.setMsg("账务开户失败");
				return bo;
			}
			ucfCard.setAccountId(rsBo.getResultObject().toString());
			boolean commit = (Boolean)transactionTemplate.execute(new TransactionCallback<Object>() {
	            public Object doInTransaction(final TransactionStatus status) {
	            	try {
	        			//保存用户信息
	        			if(RegisterParamBO.COMMON_ACCOUNT.equals(registerBo.getType())){
	        				ucfUser.setLoginId(registerBo.getAgentPersonEmail());
	        				userService.insertUserInfo(ucfUser);
	        				final UcfUserLoginApp userLoginApp = new UcfUserLoginApp();
	        				userLoginApp.setLoginId(registerBo.getAgentPersonEmail());
	        				userLoginApp.setFrozenState(Constants.FROZEN_NO);
	        				userLoginApp.setLoginType(Constants.LOGIN_TYPE_EMAIL);
	        				userLoginApp.setUserId(ucfUser.getUserId());
	        				//add by gaoxiang 生成用户登录信息
	        				userLoginApp.setEmail(registerBo.getAgentPersonEmail());
	        				if(registerBo.getLoginPwd()!=null){
	        					userLoginApp.setLoginPwd(Cryptos.encrypt(new String(registerBo.getLoginPwd()),ucfUser.getUserId()));
	        				}
	        				userLoginApp.setUserType(EnumUserType.ENTERPRISE.getCode());
	        				userService.insertLoginAppInfo(userLoginApp);
	        			}else{
	        				userService.insertUserInfo(ucfUser);
	        			}
	        			UcfCustomer validateCustomer = new UcfCustomer();
	        			validateCustomer.setCertNo(customer.getCertNo());
	        			validateCustomer.setCertType(customer.getCertType());
	        			UcfCustomer validateCustomerRep = loginService.queryUcfCustomerInfo(validateCustomer);
	        			String customerId = null;
	        			if(validateCustomerRep==null){
	        				loginService.insertCustomer(customer);
	        				customerId = loginService.queryUcfCustomerInfo(customer).getCustomerId();
	        			}else{
	        				customerId = validateCustomerRep.getCustomerId();
	        			}
	        			 //保存卡信息
	        			ucfCard.setCustomerId(customerId);
	        			cardService.insertUcfCard(ucfCard);
	        			ucfOrg.setCustomerId(customerId);
	        			loginService.insertOrganizational(ucfOrg);
	        			if(registerBo.isBindBankCard()){
	        				bankCardService.insertUcfBankCard(ucfBankCard);
	        			}
	        		}catch (final Exception e) {
	        			LOGGER.error(e.getMessage(),e);
	        			status.setRollbackOnly();
	        		    return false;
	            	}
					return true;
	           }
			});
			if(commit) {
				bo.setResult(EnumResultCode.SUCCESS.getCode());
				bo.setMsg("注册成功 ");
				bo.setResultObject(userId);
			}else{
				bo.setResult(EnumResultCode.ERROR_DB.getCode());
				bo.setMsg(EnumResultCode.ERROR_DB.getMsg());
			}
		} catch (Exception e) {
			LOGGER.error(e.getMessage(),e);
			bo.setResult(EnumResultCode.ERROR.getCode());
			bo.setMsg(EnumResultCode.ERROR.getMsg());
		}
		return bo;
	}
	
	public MemberCommonResult<String> registerManagedUser(final RegisterParamBO memberBo){
		synchronized (this) {
			UcfUser u = isExistsMerchantUser(memberBo.getRefMerchant(),memberBo.getRefUser());
			if(u != null){
				return  new  MemberCommonResult<String>(EnumRespStatusCode.EXIST_USER.getCode(),EnumRespStatusCode.EXIST_USER.getMsg(),u.getUserId());
			}	
			MemberCommonResult<String>  result = null;
			try {
				final String userId = userService.queryUcfUserId();
				final UcfUser user = new UcfUser();
				user.setUserId(userId);
				user.setCell(memberBo.getPhoneNo());
				user.setEmail(memberBo.getEmail());
				user.setRealName(memberBo.getRealName());
				user.setRefMerchant(memberBo.getRefMerchant());
				user.setRefUser(memberBo.getRefUser());
				user.setCertType(memberBo.getCertType());
				user.setCertNo(memberBo.getCertNo());
				user.setPinQues(memberBo.getQues());
				user.setPinAnsw(memberBo.getAnsw());
				user.setUserType(BigDecimal.valueOf(memberBo.getUserType()));
				user.setRealnameStatus(EnumRealnameStatus.NOT_REALNAMED.getCode());
				user.setCertValidBeginDate(memberBo.getCertValidBeginDate());
				user.setCertValidEndDate(memberBo.getCertValidEndDate());
				if(memberBo.getLoginPwd()!=null){
					user.setLgnPwd(Cryptos.encrypt(new String(memberBo.getLoginPwd()),userId));
				}
				user.setEnabledStatus(EnumUserEnabledStatus.T.getCode());//W：注册未激活
				user.setVerifyStatus(EnumVerifyLevle.REGISTER.getCode());//注册实名认证级别
				final UcfCard card = new UcfCard();
				card.setCardNo(userId);
				card.setUserId(userId);
				card.setCardType(EnumsUserCardType.PERSON_CARD.getCode());
				card.setRegisterFrom(memberBo.getRegFrom());
				card.setCertFrom(memberBo.getSource());
				card.setCertStatus(EnumCertStatus.NO_CERT.getCode());
				if(memberBo.getPayPwd()!=null){
					card.setPaymentPassword(Cryptos.encrypt(new String(memberBo.getPayPwd()),userId));
				}
				
				ResultBo rsBo = accountService.createAcccount(card.getCardNo(), EnumsUserCardType.PERSON_CARD.getAccountCode());
				LOGGER.info(SensitiveInfoUtils.getJson(rsBo));
				if (EnumResultCode.SUCCESS.getCode().equals(rsBo.getResult())) {
					card.setAccountId(rsBo.getResultObject().toString());
				}else{
					result = new  MemberCommonResult<String>(EnumRespStatusCode.ERROR.getCode(),"帐务开户失败","");
					return result;
				}
				boolean commit = (Boolean)transactionTemplate.execute(new TransactionCallback<Object>() {
					// the code in this method executes in a
					// transactional context
					public Object doInTransaction(final TransactionStatus status) {
						try {
							// 保存用户信息
							userService.insertUserInfo(user);
							cardService.insertUcfCard(card);
						} catch (final Exception e) {
							status.setRollbackOnly();
							LOGGER.error(e.getMessage(), e);
							return false;
						}
						return true;
					}
				});
				if(!commit){
					result = new  MemberCommonResult<String>(EnumRespStatusCode.ERROR_DB_OPERATE.getCode(),"数据库操作异常","");
				}else{
					result = new  MemberCommonResult<String>(EnumRespStatusCode.SUCCESS.getCode(),"注册成功",userId);
				}
			} catch (Exception e) {
				 LOGGER.error(e.getMessage(),e);
				 result =  new  MemberCommonResult<String>(EnumRespStatusCode.ERROR.getCode(),"系统异常","S");
			}
			return result;
		}
	}
	
	
}