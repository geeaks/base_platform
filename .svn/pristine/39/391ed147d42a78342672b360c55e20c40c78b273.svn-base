package com.ucf.customer.controller;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.support.TransactionCallback;
import org.springframework.transaction.support.TransactionTemplate;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSON;
import com.ucf.customer.action.BaseAction;
import com.ucf.customer.api.enums.EnumBankCardType;
import com.ucf.customer.api.enums.EnumBankCardUseType;
import com.ucf.customer.api.enums.EnumCertType;
import com.ucf.customer.bo.RealAuthBO;
import com.ucf.customer.bo.ResultBo;
import com.ucf.customer.dao.UcfBankCardDao;
import com.ucf.customer.pojo.UcfBankCard;
import com.ucf.customer.pojo.UcfCard;
import com.ucf.customer.pojo.UcfCustomer;
import com.ucf.customer.pojo.UcfPerson;
import com.ucf.customer.pojo.UcfUser;
import com.ucf.customer.security.Enumbase_platformUserType;
import com.ucf.customer.security.base_platformAccess;
import com.ucf.customer.security.base_platformAgent;
import com.ucf.customer.service.BankCardService;
import com.ucf.customer.service.LoginService;
import com.ucf.customer.service.RealAuthService;
import com.ucf.customer.service.UserInfoService;
import com.ucf.customer.service.UserService;
import com.ucf.customer.utils.BankCardUtil;
import com.ucf.customer.utils.Constants;
import com.ucf.customer.utils.IdCardUtil;
import com.ucf.customer.utils.MobileUtil;
import com.ucf.customer.utils.enums.EnumBindBankCardStatus;
import com.ucf.customer.utils.enums.EnumConfirmStatus;
import com.ucf.customer.utils.enums.EnumResultCode;
import com.ucf.customer.utils.enums.EnumVerifyLevle;
import com.ucf.customer.ws.enums.EnumCertFrom;
import com.ucf.customer.ws.enums.EnumCertStatus;
import com.ucf.gateway.ws.bo.BankNumParamBo;
import com.ucf.gateway.ws.bo.BankNumResultBo;
import com.ucf.gateway.ws.bo.CityResultBo;
import com.ucf.gateway.ws.bo.ProvinceResultBo;
import com.ucf.gateway.ws.bo.SubBankIdentityResultBo;
import com.ucf.gateway.ws.service.SearchTransactionWS;
import com.ucf.platform.framework.core.util.SensitiveInfoUtils;
import com.ucf.trade.ws.bo.TradeUcfWsParamBo;
import com.ucf.trade.ws.bo.TradeUcfWsReturnValueBo;
import com.ucf.trade.ws.service.TradeUcfSearchCardBINServiceWs;

/**
 * 
 * 
 * 项目名称：base_platform <br>
 * 类名称：BankCardAction <br>
 * 类描述：银行卡绑定查询等操作 <br>
 * 创建人：李文静 <br>
 * 创建时间：2014-5-7 上午9:37:58 <br>
 * 修改人：李文静 <br>
 * 修改时间：2014-5-7 上午9:37:58 <br>
 * 修改备注： <br>
 * 
 * @version
 * 
 */

@RequestMapping({ "/bank" })
@Controller
public class BankCardAction extends BaseAction {
	
	@Autowired
	private LoginService loginService;
	@Autowired
	private BankCardService bankCardService;
	@Autowired
	private UcfBankCardDao ucfBankCardDao;

	@Autowired
	UserService userService;
	@Autowired
	private RealAuthService realAuthService;

	@Resource(name = "sharedTransactionTemplate")
	private TransactionTemplate transactionTemplate;
	
	@Autowired
	private SearchTransactionWS searchTransactionWS; 
	
	@Autowired
	private TradeUcfSearchCardBINServiceWs tradeUcfSearchCardBINServicews; 
	
	@Autowired
	private UserInfoService userInfoService;
	
	/**
	 * 银行卡管理页面
	 * 
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 * @throws Exception
	 */
	@RequestMapping({ "/index.htm" })
	@base_platformAccess(Enumbase_platformUserType.Logined)
	public String toManageBankCard(HttpServletRequest request,
			HttpServletResponse response, Model model) throws Exception {
		LOGGER.debug("  manageBankCard   !");
		UcfUser user = loginService.queryUserInfo(getbase_platformAgent(request,response).getId());
		// 判断用户是否绑卡
		UcfBankCard verifyBank = new UcfBankCard();
		verifyBank.setUserId(user.getUserId());
		List<UcfBankCard> UcfBankCardlist = loginService.queryUcfBankCard(verifyBank);
		if(UcfBankCardlist==null){
			return "realNameAuth/index";
		}
		Iterator<UcfBankCard> it = UcfBankCardlist.iterator();
		while (it.hasNext()) {
			UcfBankCard ucfBankCard = it.next();
			ucfBankCard.setCardNo(BankCardUtil.cardNoEncrypt(ucfBankCard.getCardNo()));
		}
		if (UcfBankCardlist.size() == 1) {
			model.addAttribute("del", "0");
		}
		String name = user.getRealName();
		user.getCertNo();
		user.getCell();
		model.addAttribute("name", name);
		model.addAttribute("list", UcfBankCardlist);
		model.addAttribute("userName", user.getRealName());
		String msg="";
		if (UcfBankCardlist.size() == 5) {
			model.addAttribute("full", "0");
			msg="您已达到绑卡上限(最多绑定5张银行卡)！";
		}
		//判断支付密码是否错误5次
		loginService.checkPWD(model, user.getUserId());
		msg=StringUtils.isEmpty(request.getParameter("msg"))?msg:request.getParameter("msg");
		model.addAttribute("msg", msg);
		return "bank/index";
	}
	
	
	/**
	 * 第一次绑卡初始化
	 * 
	 * @param model
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(value = "/firstaddbank.htm")
	@base_platformAccess(Enumbase_platformUserType.Logined)
	public String firstaddbank(Model model, HttpServletRequest request,
			HttpServletResponse response) {
		base_platformAgent base_platformAgent = getbase_platformAgent(request, response);
		
		// 判断用户是否绑卡
		UcfBankCard verifyBank = new UcfBankCard();
		verifyBank.setUserId(base_platformAgent.getId());
		List<UcfBankCard> list = loginService.queryUcfBankCard(verifyBank);
		if (list != null) {
			model.addAttribute("msg", "用户已经绑卡,不能再次进行首次绑卡");
			model.addAttribute("url", "/user/overview.htm");
			return "redirect:/bank/authSuc.htm";
		}

		String certNo = base_platformAgent.getCertNo();
		String mobile = base_platformAgent.getMobile();
		Map<Object, Object> mapo = loginService.queryUcfUserCell(base_platformAgent
				.getId());
		String cell = (String) mapo.get("cell");
		model.addAttribute("cell", cell);
		model.addAttribute("userName", base_platformAgent.getRealName());
		model.addAttribute("mobile", MobileUtil.mobileNoEncrypt(mobile));
		model.addAttribute("certNo", certNo);
		model.addAttribute("certNohidden", IdCardUtil.IdCardNoEncrypt(certNo));
		return "realNameAuth/firstaddbank";
	}



	@RequestMapping({ "/firstAddBankCardPro.htm" })
	public String firstAddBankCardPro(@RequestParam("vercode") String vercode,
			@RequestParam("userName") 	final String userName,
			@RequestParam("certNo") 	final String certNo,
			@RequestParam("bankCardNo") final String cardNo,
			@RequestParam("pwd") 		String paypwd,
			@RequestParam("bankName") 	final String bankName,
			@RequestParam("prov") 		final String prov,
			@RequestParam("cityna") 	final String cityna,
			@RequestParam("branchName") final String branchName,
			@RequestParam("bankCode") 	final String bankCode,
			@RequestParam("issure") 	final String issuer,
			HttpServletRequest request, HttpServletResponse response,
			Model model) throws Exception {
		LOGGER.debug("add  bankpro  entry !");
		paypwd = (String)request.getAttribute("payPassword");
		final HttpSession session = request.getSession();
		//记录绑卡日志
		base_platformAgent base_platformAgent = getbase_platformAgent(request, response);
		LOGGER.info("会员["+SensitiveInfoUtils.chineseName(base_platformAgent.getRealName())+","+base_platformAgent.getId()+"]进行了实名绑卡!");
		
		final UcfUser ucfUser = loginService.queryUserInfo(base_platformAgent.getId());
		UcfBankCard insertUcfBankCard = new UcfBankCard();
		insertUcfBankCard.setBankId(cardNo);
		insertUcfBankCard.setUserId(ucfUser.getUserId());
		List<UcfBankCard> ucfBankCardList = this.loginService.queryUcfBankCard(insertUcfBankCard);
		if(ucfBankCardList!=null && ucfBankCardList.size()>0){
			LOGGER.info("账号"+SensitiveInfoUtils.bankCard(cardNo)+"已绑卡，不能重复绑卡！");
			model.addAttribute("errMsg", "账号"+cardNo+"已绑卡，不能重复绑卡！");
			return "common/error";
		}
		
		Map<Object, Object> mapo = new HashMap<Object, Object>();
		mapo = loginService.queryUcfUserCell(ucfUser.getUserId());
		String cell = (String) mapo.get("cell");
		final String mobile = ucfUser.getCell();
		model.addAttribute("mobile", MobileUtil.mobileNoEncrypt(cell));
		model.addAttribute("certNo", certNo);
		model.addAttribute("userName", userName);
		model.addAttribute("cardNo", cardNo.replace(" ", ""));
		model.addAttribute("user", ucfUser);
		model.addAttribute("cell", cell);

		RealAuthBO bo = new RealAuthBO();
		bo.setBankId(bankCode);
		bo.setBankName(bankName);
		bo.setBranchName(branchName);
		bo.setCardType(EnumBankCardType.DEBIT_CARD.getCode());// jiejika 1 daijika 2
		bo.setCertNo(certNo);
		bo.setCity(cityna);
		bo.setProvince(prov);
		bo.setUserName(userName);
		bo.setIssuer(issuer);
		String userId = ucfUser.getUserId();
		
		bo.setBankCardNo(cardNo.replace(" ", ""));

		if (!checkmMbileCode(request, response, vercode, cell)) {
			LOGGER.debug("验证码错误");
			model.addAttribute("msg", "手机验证码错误");
			return "realNameAuth/firstaddbank";
		}

		ResultBo resultBo = userInfoService.checkPayPwd(userId, paypwd.getBytes());
		if(!EnumResultCode.SUCCESS.getCode().equals(resultBo.getResult())){
			model.addAttribute("msg", resultBo.getMsg());
			LOGGER.debug("支付密码错误");
			return "realNameAuth/firstaddbank";
		}
		
		boolean flag =  realAuthService.realAuth(userId, null, bo);
		if (!flag) {
			model.addAttribute("msg", "实名认证未通过审核!");
			return "realNameAuth/firstaddbank";
		}
		final UcfCard ucfCard = this.loginService.queryUcfCardByUserId(userId);

		// 新增提现银行卡
		// 生成客户信息/个人信息
		if (!base_platformAgent.isCustomer()) {
			Date date = new Date();
			final UcfCustomer customer = new UcfCustomer();
			if (certNo.contains("*")) {
				customer.setCertNo(ucfUser.getCertNo());
			} else {
				customer.setCertNo(certNo);
			}
			customer.setCertType(EnumCertType.ID_CARD.getCode());
			customer.setName(userName);
			customer.setCardNo(cardNo.replace(" ", ""));
			customer.setOpenStatus(Constants.OPEN_STATUS_YES);
			customer.setCertStatus(Constants.VERIFY_STATUS_T);
			customer.setNational("CHA");
			customer.setType(Constants.CUSTOMER_TYPE_PERSON);
			customer.setEnableStatus(Constants.ENABLE_STATUS_T);
			customer.setGmtCreate(date);
			customer.setExtFlag(Constants.EXT_FLAG_T);
			boolean commit = (Boolean) transactionTemplate.execute(new TransactionCallback<Object>() {
						// the code in this method executes in a transactional
						// context
						public Object doInTransaction(final TransactionStatus status) {
							try {
								// 判断customer表是否存在记录
								UcfCustomer anotherCustomer = new UcfCustomer();
								anotherCustomer.setCertNo(customer.getCertNo());
								anotherCustomer = loginService.queryUcfCustomerInfo(anotherCustomer);
								if (anotherCustomer == null) {
									loginService.insertCustomer(customer);
									anotherCustomer = new UcfCustomer();
									anotherCustomer.setCertNo(customer.getCertNo());
									anotherCustomer = loginService.queryUcfCustomerInfo(anotherCustomer);
								}
								final UcfPerson person = new UcfPerson();
								person.setCustomerId(anotherCustomer.getCustomerId());
								person.setRealName(userName);
								person.setCell(mobile);
								loginService.insertPersonInfo(person);
								ucfCard.setCustomerId(anotherCustomer.getCustomerId());
								// add by liwenjing 添加实名认证 来源
								ucfCard.setCertFrom(EnumCertFrom.WEB_FROM.getCode());
								if(StringUtils.isEmpty(ucfCard.getCertStatus())){
									ucfCard.setCertStatus(EnumCertStatus.WIH_CERT.getCode());
								}else{
									if(ucfCard.getCertStatus().indexOf(EnumCertStatus.WIH_CERT.getCode())==-1){
										ucfCard.setCertStatus(ucfCard.getCertStatus()+";"+EnumCertStatus.WIH_CERT.getCode());
									}
								}
								loginService.updateUcfCard(ucfCard);
								UcfBankCard insertBankCard = new UcfBankCard();
								StringBuffer id = new StringBuffer();
								SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
								StringBuffer buf = id.append(sdf.format(new Date()));
								StringBuffer seq = buf.append(ucfBankCardDao.getBankCardSeq());
								insertBankCard.setId(seq.toString());
								insertBankCard.setUserId(ucfUser.getUserId());
								insertBankCard.setBankId(bankCode);
								insertBankCard.setBankName(bankName);
								insertBankCard.setProvince(prov);
								insertBankCard.setCity(cityna);
								insertBankCard.setIssuer(issuer);
								insertBankCard.setCardNo(cardNo.replace(" ", ""));
								insertBankCard.setCardType(Constants.DEBIT_CARD);
								insertBankCard.setBranchname(branchName);
								insertBankCard.setConfirmStatus(EnumConfirmStatus.CONFIRM_YES.getCode());
								insertBankCard.setUnionSeq(ucfBankCardDao.getUnionSeq());
								insertBankCard.setStatus(EnumBindBankCardStatus.SUCCESS.getCode());
								insertBankCard.setIsPay("Y");
								insertBankCard.setIsWithdraw("Y");
								insertBankCard.setCardType("1");
								insertBankCard.setCertStatus(EnumCertStatus.WIH_CERT.getCode());
								//add by gaoxiang 实名认证绑卡 使用类型为消费卡
								insertBankCard.setUseType(EnumBankCardUseType.CONSUME.getCode());
								loginService.insertBankCardInfo(insertBankCard);

								ucfUser.setRealName(userName);

								if (!certNo.contains("*")) {
									ucfUser.setCertNo(certNo);
								}
								ucfUser.setRealnameStatus(Constants.VERIFY_STATUS_T);
								ucfUser.setVerifyStatus(EnumVerifyLevle.ORDINARY.getCode());//普通认证
								loginService.updateUcfUser(ucfUser);
							} catch (final Exception e) {
								status.setRollbackOnly();
								LOGGER.error(e.getMessage(), e);
								return false;
							}
							return true;
						}
					});
			if (commit) {
				// ucfUser.setVerifyStatus(Constants.VERIFY_STATUS_T);
				session.setAttribute("user", ucfUser);
				// 实名认证后更新session
				base_platformAgent.setBindCard(true);
				base_platformAgent.setCustomer(true);
				session.setAttribute("base_platformAgent", base_platformAgent);
				cleanMobileCode(request, response, cell);
				return "realNameAuth/addbanksuc";
			} else {
				return "common/error";
			}
		} else if (base_platformAgent.isCustomer()) {
			LOGGER.info("-------用户已经实名认证开始绑卡------");
			boolean commit = (Boolean) transactionTemplate.execute(new TransactionCallback<Object>() {
						// the code in this method executes in a transactional
						// context
						public Object doInTransaction(final TransactionStatus status) {
							try {
								UcfCustomer anotherCustomer = new UcfCustomer();
								anotherCustomer.setCertNo(ucfUser.getCertNo());
								anotherCustomer = loginService.queryUcfCustomerInfo(anotherCustomer);

								ucfCard.setCustomerId(anotherCustomer.getCustomerId());
								if(StringUtils.isEmpty(ucfCard.getCertStatus())){
									ucfCard.setCertStatus(EnumCertStatus.WIH_CERT.getCode());
								}else{
									if(ucfCard.getCertStatus().indexOf(EnumCertStatus.WIH_CERT.getCode())==-1){
										ucfCard.setCertStatus(ucfCard.getCertStatus()+";"+EnumCertStatus.WIH_CERT.getCode());
									}
								}
								loginService.updateUcfCard(ucfCard);

								UcfBankCard insertBankCard = new UcfBankCard();
								StringBuffer id = new StringBuffer();
								SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
								StringBuffer buf = id.append(sdf.format(new Date()));
								StringBuffer seq = buf.append(ucfBankCardDao.getBankCardSeq());
								insertBankCard.setId(seq.toString());
								insertBankCard.setUserId(ucfUser.getUserId());
								insertBankCard.setBankId(bankCode);
								insertBankCard.setBankName(bankName);
								insertBankCard.setProvince(prov);
								insertBankCard.setCity(cityna);
								insertBankCard.setIssuer(issuer);
								insertBankCard.setCardNo(cardNo.replace(" ", ""));
								insertBankCard.setCardType(Constants.DEBIT_CARD);
								insertBankCard.setBranchname(branchName);
								insertBankCard.setUnionSeq(ucfBankCardDao.getUnionSeq());
								insertBankCard.setStatus(EnumBindBankCardStatus.SUCCESS.getCode());
								//add by gaoxiang 
								insertBankCard.setIsPay("Y");
								insertBankCard.setIsWithdraw("Y");
								insertBankCard.setCertStatus(EnumCertStatus.WIH_CERT.getCode());
								loginService.insertBankCardInfo(insertBankCard);

								if (!certNo.contains("*")) {
									ucfUser.setCertNo(certNo);
								}

								ucfUser.setRealName(userName);
								ucfUser.setRealnameStatus(Constants.VERIFY_STATUS_T);
								// ucfUser.setVerifyStatus(Constants.VERIFY_STATUS_T);
								loginService.updateUcfUser(ucfUser);

							} catch (final Exception e) {
								status.setRollbackOnly();
								LOGGER.error(e.getMessage(), e);
								return false;
							}
							return true;
						}
					});
			if (commit) {
				// ucfUser.setVerifyStatus(Constants.VERIFY_STATUS_T);
				session.setAttribute("user", ucfUser);

				// 实名认证后更新session
				base_platformAgent.setBindCard(true);
				base_platformAgent.setCustomer(true);
				session.setAttribute("base_platformAgent", base_platformAgent);
				cleanMobileCode(request, response, cell);
				return "realNameAuth/addbanksuc";
			} else {
				return "common/error";
			}
		} else {
			LOGGER.info("-------系统异常------");
			return "common/error";
		}
	}

	

	/**
	 * 新增银行卡初始化页面
	 * 
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 * @throws Exception
	 */
	@base_platformAccess(Enumbase_platformUserType.Logined)
	@RequestMapping({ "/add.htm" })
	public String addBankCard(HttpServletRequest request, HttpServletResponse response, Model model) throws Exception {
		LOGGER.debug("add  bank  entry !");
		UcfUser ucfUser = loginService.queryUserInfo(getbase_platformAgent(request, response).getId());
		Map<Object, Object> mapo = new HashMap<Object, Object>();
		mapo = loginService.queryUcfUserCell(ucfUser.getUserId());
		setInfo(model, ucfUser, mapo);
		UcfBankCard bankCard = new UcfBankCard();
		bankCard.setUserId(ucfUser.getUserId());
		List<UcfBankCard> list = loginService.queryUcfBankCard(bankCard);
		if (list.size() > 4) {
			return "forward:/bank/index.htm?msg=您已达到绑卡上限(最多绑定5张银行卡)！";
		}
		return "bank/add";
	}

	private void setInfo(Model model, UcfUser ucfUser, Map<Object, Object> mapo) {
		String cell = (String) mapo.get("cell");
		String certNo = ucfUser.getCertNo();
		String userName = ucfUser.getRealName();
		String mobile = ucfUser.getCell();
		model.addAttribute("cell", cell);
		model.addAttribute("mobile", MobileUtil.mobileNoEncrypt(mobile));
		model.addAttribute("certNo", IdCardUtil.IdCardNoEncrypt(certNo));
		model.addAttribute("userName", userName);
		model.addAttribute("user", ucfUser);
	}

	@base_platformAccess(Enumbase_platformUserType.Logined)
	@RequestMapping(value = "/add.htm", method = RequestMethod.POST)
	public String addBankCardPro(@RequestParam("vercode") String vercode,
			@RequestParam("cardNo") String cardNo,
			@RequestParam("pwd") String pwd,
			@RequestParam("bankName") String bankName,
			@RequestParam("prov") String prov,
			@RequestParam("cityna") String cityna,
			@RequestParam("branchName") String branchName,
			@RequestParam("bankCode") String bankCode,
			@RequestParam("issure") String issuer, HttpServletRequest request,
			HttpServletResponse response, Model model) throws Exception {
		LOGGER.debug("add  bankpro  entry !");
		pwd = (String)request.getAttribute("payPassword");
		UcfUser ucfUser = loginService.queryUserInfo(getbase_platformAgent(request, response).getId());
		Map<Object, Object> mapo = new HashMap<Object, Object>();
		mapo = loginService.queryUcfUserCell(ucfUser.getUserId());
		String cell = (String) mapo.get("cell");
		String certNo = ucfUser.getCertNo();
		String userName = ucfUser.getRealName();
		String mobile = ucfUser.getCell();
		model.addAttribute("mobile", MobileUtil.mobileNoEncrypt(mobile));
		model.addAttribute("certNo", IdCardUtil.IdCardNoEncrypt(certNo));
		model.addAttribute("userName", userName);
		model.addAttribute("cardNo", cardNo);
		model.addAttribute("user", ucfUser);
		model.addAttribute("cell", cell);
		if (!bankCardService.checkCardNum(ucfUser)) {
			model.addAttribute("msg", "您已达到绑卡上限(最多绑定5张银行卡)！");
			return "bank/add";
		}
		ResultBo resultBo = userInfoService.checkPayPwd(ucfUser.getUserId(), pwd.getBytes());
		if(!EnumResultCode.SUCCESS.getCode().equals(resultBo.getResult())){
			model.addAttribute("msg", resultBo.getMsg());
			LOGGER.debug("支付密码错误");
			return "bank/add";
		}
		if (!checkmMbileCode(request, response, vercode, cell)) {
			model.addAttribute("msg", "验证码输入错误!");
			return "bank/add";
		}
		// 新增提现银行卡
		UcfBankCard card = new UcfBankCard();
		card.setUserId(ucfUser.getUserId());
		card.setCardNo(cardNo.replace(" ", ""));
		List<UcfBankCard> list = this.loginService.queryUcfBankCard(card);
		if (list != null && list.size() > 0) {
			model.addAttribute("msg", "已存在该银行卡,请更换银行卡绑定");
			return "bank/add";
		}
		UcfBankCard insertBankCard = new UcfBankCard();
		StringBuffer id = new StringBuffer();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
		StringBuffer buf = id.append(sdf.format(new Date()));
		StringBuffer seq = buf.append(ucfBankCardDao.getBankCardSeq());
		insertBankCard.setId(seq.toString());
		insertBankCard.setUserId(ucfUser.getUserId());
		insertBankCard.setBankId(bankCode);
		insertBankCard.setBankName(bankName);
		insertBankCard.setProvince(prov);
		insertBankCard.setCity(cityna);
		insertBankCard.setCardNo(cardNo.replace(" ", ""));
		insertBankCard.setBranchname(branchName);
		insertBankCard.setIssuer(issuer);
		insertBankCard.setIsPay("Y");
		insertBankCard.setIsWithdraw("Y");
		insertBankCard.setCardType("1");
		insertBankCard.setUnionSeq(ucfBankCardDao.getUnionSeq());
		insertBankCard.setStatus(EnumBindBankCardStatus.SUCCESS.getCode());
		//add by gaoxiang 会员新增银行卡 使用类型为消费卡
		insertBankCard.setUseType(EnumBankCardUseType.CONSUME.getCode());
		this.loginService.insertBankCardInfo(insertBankCard);
		//记录绑卡日志
		base_platformAgent base_platformAgent = getbase_platformAgent(request, response);
		LOGGER.info("会员["+SensitiveInfoUtils.chineseName(base_platformAgent.getRealName())+","+base_platformAgent.getId()+"]新增银行卡成功!");
		// 清除短信验证码
		cleanMobileCode(request, response, cell);
		return "bank/addbanksuc";
	}

	/**
	 * 删除银行卡初始化
	 * @param id
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/delete.htm", method = RequestMethod.GET)
	@base_platformAccess(Enumbase_platformUserType.Logined)
	public String deleteBankCard(@RequestParam("id") String id,
			HttpServletRequest request, HttpServletResponse response,
			Model model) throws Exception {
		LOGGER.debug("  deleteBankCard   !");
		HttpSession session = request.getSession();
		UcfUser user = loginService.queryUserInfo(getbase_platformAgent(request,
				response).getId());

		String userName = user.getRealName();
		String mobile = user.getCell();
		String certNo = user.getCertNo();
		UcfBankCard card = new UcfBankCard();
		List<UcfBankCard> list = new ArrayList<UcfBankCard>();
		card.setUserId(user.getUserId());
		list = this.loginService.queryUcfBankCard(card);
		if (list.size() < 2) {
			model.addAttribute("msg", "您只有一张银行卡，请不要删除！");
			return "redirect:index.htm";
		}

		UcfBankCard othercard = new UcfBankCard();
		othercard.setId(id);
		list.clear();
		list = this.loginService.queryUcfBankCard(othercard);
		if (list == null || list.size() == 0) {
			model.addAttribute("msg", "删除银行卡时，未知错误！");
			return "redirect: /bank/index.htm";
		}
		card = list.get(0);
		String certStatus = card.getIsDelete();
		if (certStatus.equals("Y")) {
			return "forward:/common/error.htm?msg=此卡已被删除！";
		}
		session.setAttribute("card", card);
		model.addAttribute("branchname", card.getBranchname());
		model.addAttribute("province", card.getProvince());
		model.addAttribute("city", card.getCity());
		model.addAttribute("certNo", IdCardUtil.IdCardNoEncrypt(certNo));
		model.addAttribute("cardNo", BankCardUtil.cardNoEncrypt(card.getCardNo()));
		model.addAttribute("mobile", MobileUtil.mobileNoEncrypt(mobile));
		model.addAttribute("userName", userName);
		model.addAttribute("cell", mobile);
		return "bank/deleteBankCard";
	}
	
	@base_platformAccess(Enumbase_platformUserType.Logined)
	@RequestMapping(value = "/authSuc.htm")
	public String authSuc(HttpServletRequest request,HttpServletResponse response, Model model) throws Exception{
		UcfUser user = loginService.queryUserInfo(getbase_platformAgent(request,response).getId());
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM");
		String certValidEndDate=sdf.format(user.getCertValidEndDate());
		model.addAttribute("realName", user.getRealName());
		model.addAttribute("certNo", IdCardUtil.IdCardNoEncrypt(user.getCertNo()));
		model.addAttribute("certValidEndDate", certValidEndDate);
		return "bank/authSuc";
	}

	/**
	 * 删除银银行卡
	 * 
	 * @param vercode
	 * @param paypwd
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 * @throws Exception
	 */
	@base_platformAccess(Enumbase_platformUserType.Logined)
	@RequestMapping(value = "/delete.htm", method = RequestMethod.POST)
	public String deleteBankCardPro(@RequestParam("vercode") String vercode,HttpServletRequest request,HttpServletResponse response, Model model) throws Exception {
		LOGGER.debug("  deleteBankCardPro   !");
		String pwd = (String) request.getAttribute("payPassword");
		HttpSession session = request.getSession();
		UcfUser user = loginService.queryUserInfo(getbase_platformAgent(request,response).getId());
		UcfBankCard othercard = (UcfBankCard) session.getAttribute("card");
		model.addAttribute("branchname", othercard.getBranchname());
		model.addAttribute("province", othercard.getProvince());
		model.addAttribute("city", othercard.getCity());
		model.addAttribute("certNo", IdCardUtil.IdCardNoEncrypt(user.getCertNo()));
		model.addAttribute("cardNo", BankCardUtil.cardNoEncrypt(othercard.getCardNo()));
		model.addAttribute("mobile", MobileUtil.mobileNoEncrypt(user.getCell()));
		model.addAttribute("cell", user.getCell());
		model.addAttribute("userName", user.getRealName());
		// 校验支付密码
		ResultBo resultBo = userInfoService.checkPayPwd(user.getUserId(), pwd.getBytes());
		if(!EnumResultCode.SUCCESS.getCode().equals(resultBo.getResult())){
			model.addAttribute("msg", resultBo.getMsg());
			return "bank/deleteBankCard";
		}
		
		//校验手机验证码
		if (!checkmMbileCode(request, response, vercode, user.getCell())) {
			model.addAttribute("msg", "手机验证码错误，请重新输入！");
			return "bank/deleteBankCard";
		}
		UcfBankCard card = new UcfBankCard();
		card.setUserId(user.getUserId());
		card.setCardNo(othercard.getCardNo());
		card = this.loginService.queryUcfBankCard(card).get(0);
		bankCardService.deleteUcfBankCard(user.getUserId(), othercard.getCardNo());
		//记录绑卡日志
		base_platformAgent base_platformAgent = getbase_platformAgent(request, response);
		LOGGER.info("会员["+SensitiveInfoUtils.chineseName(base_platformAgent.getRealName())+","+base_platformAgent.getId()+"]删除银行卡成功!");
		cleanMobileCode(request, response, user.getCell());
		return "bank/deleteBankCardSuc";
	}

	/**
	 * 修改初始化
	 * 
	 * @param id
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 * @throws Exception
	 */
	@base_platformAccess(Enumbase_platformUserType.Logined)
	@RequestMapping(value = "/modify.htm", method = RequestMethod.GET)
	public String modifyBankCard(@RequestParam("id") String id,HttpServletRequest request, HttpServletResponse response,Model model) throws Exception {
		LOGGER.debug("  modifyBankCard   !");
		HttpSession session = request.getSession();
		UcfUser user = loginService.queryUserInfo(getbase_platformAgent(request,response).getId());

		String mobile = user.getCell();
		String userName = user.getRealName();
		String certNo = user.getCertNo();
		session.setAttribute("cardId", id);
		UcfBankCard card = new UcfBankCard();
		card.setId(id);
		card = loginService.queryUcfBankCard(card).get(0);
		String certStatus = card.getIsDelete();
		if (certStatus.equals("Y")) {
			return "forward:/common/error.htm?msg=此卡已被删除！";
		}
		model.addAttribute("cell", mobile);
		model.addAttribute("mobile", MobileUtil.mobileNoEncrypt(mobile));
		model.addAttribute("cardNo", card.getCardNo());
		model.addAttribute("cardHidden",BankCardUtil.cardNoEncrypt(card.getCardNo()));
		model.addAttribute("certNo", IdCardUtil.IdCardNoEncrypt(certNo));
		model.addAttribute("userName", userName);
		model.addAttribute("cardNum",BankCardUtil.cardNoEncrypt(card.getCardNo()));
		model.addAttribute("prov", card.getProvince());
		model.addAttribute("city", card.getCity());
		model.addAttribute("branchName", card.getBranchname());
		
		model.addAttribute("displayCardNo", request.getParameter("displayCardNo"));
		model.addAttribute("displayBankId", request.getParameter("displayBankId"));

		return "bank/modifyBankCard";
	}

	/**
	 * 修改
	 * 
	 * @param vercode
	 * @param paypwd
	 * @param province
	 * @param city
	 * @param branchName
	 * @param issuer
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 * @throws Exception
	 */
	@base_platformAccess(Enumbase_platformUserType.Logined)
	@RequestMapping(value = "/modify.htm", method = RequestMethod.POST)
	public String modifyBankCardPro(@RequestParam("vercode") String vercode,
			@RequestParam("pwd") String pwd,
			@RequestParam("prov") String province,
			@RequestParam("cityna") String city,
			@RequestParam("branchName") String branchName,
			@RequestParam("branchBank") String issuer,
			HttpServletRequest request, HttpServletResponse response,
			Model model) throws Exception {
		LOGGER.debug("  modifyBankCardPro   !");
		pwd = (String)request.getAttribute("payPassword");
		HttpSession session = request.getSession();

		UcfUser user = loginService.queryUserInfo(getbase_platformAgent(request,response).getId());
		String cardId = (String) session.getAttribute("cardId");
		UcfBankCard card = new UcfBankCard();
		card.setId(cardId);
		card = loginService.queryUcfBankCard(card).get(0);
		Map<Object, Object> mapo = new HashMap<Object, Object>();
		mapo = loginService.queryUcfUserCell(user.getUserId());
		String cell = (String) mapo.get("cell");

		String mobile = user.getCell();
		String userName = user.getRealName();
		String certNo = user.getCertNo();
		model.addAttribute("cell", cell);
		model.addAttribute("mobile", MobileUtil.mobileNoEncrypt(mobile));
		model.addAttribute("cardNo", card.getCardNo());
		model.addAttribute("cardHidden",BankCardUtil.cardNoEncrypt(card.getCardNo()));
		model.addAttribute("certNo", IdCardUtil.IdCardNoEncrypt(certNo));
		model.addAttribute("userName", userName);
		model.addAttribute("cardNum", card.getCardNo());
		model.addAttribute("prov", card.getProvince());
		model.addAttribute("city", card.getCity());
		model.addAttribute("branchName", card.getBranchname());

		model.addAttribute("displayCardNo", request.getParameter("displayCardNo"));
		model.addAttribute("displayBankId", request.getParameter("displayBankId"));
		
		ResultBo resultBo = userInfoService.checkPayPwd(user.getUserId(), pwd.getBytes());
		if(!EnumResultCode.SUCCESS.getCode().equals(resultBo.getResult())){
			model.addAttribute("msg", resultBo.getMsg());
			return "bank/modifyBankCard";
		}

		if (!checkmMbileCode(request, response, vercode, cell)) {
			model.addAttribute("msg", "验证码输入错误!");
			return "bank/modifyBankCard";
		}

		UcfBankCard othercard = new UcfBankCard();
		othercard.setCardNo(card.getCardNo());
		othercard.setUserId(user.getUserId());
		othercard = loginService.queryUcfBankCard(othercard).get(0);

		String certStatus = othercard.getIsDelete();
		if (certStatus.equals("Y")) {
			return "forward:/common/error.htm?msg=此卡已被删除！";
		}

		othercard.setCity(city);
		othercard.setProvince(province);
		othercard.setBranchname(branchName);
		othercard.setIssuer(issuer);
		this.loginService.updateBankCard(othercard);
		//记录绑卡日志
		base_platformAgent base_platformAgent = getbase_platformAgent(request, response);
		LOGGER.info("会员["+SensitiveInfoUtils.chineseName(base_platformAgent.getRealName())+","+base_platformAgent.getId()+"]修改银行卡成功!");
		model.addAttribute("userName", user.getRealName());
		cleanMobileCode(request, response, cell);
		return "bank/modifyBankCardSuc";
	}

	/**
	 * 获取银行卡卡BIN信息
	 * @param request
	 * @param response
	 * @param model
	 * @author yuchao@ucfgroup.com
	 * @return
	 * @throws Exception
	 */
	@RequestMapping({ "/getBankCardNo.do" })
	public void getBankCardNo(
			@RequestParam("bankCardNo") String bankCardNo,
			HttpServletRequest request,
			HttpServletResponse response,Model model) throws Exception {
		LOGGER.debug("getBankCardBIN  entry !");
		
		bankCardNo = bankCardNo.replaceAll(" ", "");
		
		String provinceCode = request.getParameter("ProvinceCode");
		String cityCode = request.getParameter("CityCode");
		String bankCode = request.getParameter("BankCode");
		
		LOGGER.debug("provcode="+provinceCode);
		LOGGER.debug("citycode="+cityCode);
		LOGGER.debug("bankcode="+bankCode);

		BankNumParamBo bankNumParamBo = new BankNumParamBo();
		bankNumParamBo.setAccountNo(bankCardNo);
		if(!("").equals(provinceCode)&&provinceCode!=null){
			bankNumParamBo.setProvinceCode(provinceCode);
		}
		if(!("").equals(cityCode)&&cityCode!=null){
			bankNumParamBo.setCityCode(cityCode);
		}
		if(!("").equals(bankCode)&&bankCode!=null){
			bankNumParamBo.setBankCode(bankCode);
		}
		
		bankNumParamBo.setPlateNo(Constants.NEWPLATFORM);//01：老平台  02: 新平台
		if(LOGGER.isDebugEnabled()){
			LOGGER.debug("调用查询卡bin传入参数：" + SensitiveInfoUtils.getJson(bankNumParamBo));//金融网关系统修改
		}
		BankNumResultBo bo = searchTransactionWS.serchBankNum(bankNumParamBo);
		if(LOGGER.isDebugEnabled()){
			LOGGER.debug("调用查询卡bin返回参数：" + SensitiveInfoUtils.getJson(bo));//金融网关系统修改
		}
		String errorMsg = "";
		String errorCode = "";
		String jsonArray2 = "";
				
		LOGGER.debug("=====>"+bo.getExceptionCode());
		
		
		if (bo.getExceptionCode()==null) {
			
			if(!("").equals(provinceCode)&&provinceCode!=null){
				List<CityResultBo> city = bo.getCityResultBolist();
				jsonArray2 = JSON.toJSONString(city);

			}
			if(!("").equals(cityCode)&&cityCode!=null){
				List<SubBankIdentityResultBo> bankId = bo.getSubBankIdentityResultBolist();
				jsonArray2 = JSON.toJSONString(bankId);
			}
			
			if(("").equals(provinceCode)||provinceCode == null){
				List<ProvinceResultBo> prov = bo.getProvinceResultBolist();
				jsonArray2 = JSON.toJSONString(prov);
			}
			
		}else{
			String info = "获取银行号信息失败";
			errorMsg = bo.getMessage();
			errorCode = bo.getResult();
			LOGGER.debug("getBankCardBIN ERROR:"+errorCode+errorMsg);
			jsonArray2 = JSON.toJSONString(info);
		}
		
		
		
		try {
			response.setCharacterEncoding("UTF-8");
			response.setContentType("application/json;charset=UTF-8");
			response.getOutputStream().write(
					jsonArray2.toString().getBytes("UTF-8"));
			response.getOutputStream().flush();
		} catch (UnsupportedEncodingException e) {
			LOGGER.error(e.getMessage(),e);
		} catch (IOException e) {
			LOGGER.error(e.getMessage(),e);
		}
	}
	
	/**
	 * 卡bin校验
	 * @param bankCardNo
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 * @throws Exception
	 */
	@RequestMapping({ "/checkCardBIN.do" })
	@ResponseBody
	public String checkCardBIN(@RequestParam("bankCardNo") String bankCardNo,
			@RequestParam(value="cardType",required=false) String cardTypeStr,
			HttpServletRequest request,HttpServletResponse response,Model model) 
					throws Exception {
		try {
			LOGGER.debug("getBankCardBIN  entry !");
			String cardNo = bankCardNo.replaceAll(" ", "");
			
			UcfBankCard ucfBankCard = new UcfBankCard();
			ucfBankCard.setCardNo(cardNo);
			ucfBankCard.setCardType("1");
			TradeUcfWsParamBo tradeBo = new TradeUcfWsParamBo();
			tradeBo.setBankCardNo(cardNo);
			tradeBo.setPlateNo(Constants.NEWPLATFORM);//01：老平台  02: 新平台
			if(LOGGER.isDebugEnabled()){
				LOGGER.debug("调用卡bin校验传入参数：" + SensitiveInfoUtils.getJson(tradeBo));//交易系统修改
			}
			TradeUcfWsReturnValueBo bo = tradeUcfSearchCardBINServicews.searchCardBIN(tradeBo);
			if(LOGGER.isDebugEnabled()){
				LOGGER.debug("调用卡bin校验返回参数：" + SensitiveInfoUtils.getJson(bo));//交易系统修改
			}
			Map<Object, Object> returnMap =  bo.getReturnValueMap();
			String result = (String)returnMap.get("result");
			Map<String,String> resultMap =  new HashMap<String,String>();
			if (Constants.SUCCESS.equals(result)) {
				String bankName = (String)returnMap.get("bankName");
				String cardType =  (String)returnMap.get("cardType");
				String bankCode =  (String)returnMap.get("bankCode");
				
				resultMap.put("bankName", bankName);
				resultMap.put("cardType", cardType);
				resultMap.put("bankCode", bankCode);
				// 查询卡支持情况
				
				
				// 将卡类型封装飞枚举 1 借记卡
				if ("1".equals(cardTypeStr) && !EnumBankCardType.DEBIT_CARD.getFcode().equals(cardType)) {
					resultMap.put("error", "只能注册借记卡/储蓄卡");
				}else {
					
//				if ("CMB".equals(bankCode) || "CMBC".equals(bankCode)) {
//					resultMap.put("error", "暂不支持招行，民生银行！");
//				}else {
//					resultMap.put("ok", bankName == null ? "" : bankName);
//				}
					
					resultMap.put("ok", bankName == null ? "" : bankName);
				}				
			}else{
				String errorMsg = (String)returnMap.get("errorMsg");
				String errorCode = (String)returnMap.get("errorCode");
				resultMap.put("error", errorMsg);
				resultMap.put("errorMsg", errorMsg);
				LOGGER.debug("getBankCardBIN ERROR:"+errorCode+errorMsg);
			}
			return JSON.toJSONString(resultMap);
		} catch (Exception e) {
			LOGGER.error("from getBankCardBIN :"+e.getMessage(),e);
		}
		return cardTypeStr;
	}
	
	/**
	 * 获取银行卡卡BIN信息
	 * @param request
	 * @param response
	 * @param model
	 * @author yuchao@ucfgroup.com
	 * @return
	 * @throws Exception
	 */
	@RequestMapping({ "/queryBranchInfo.do" })
	@ResponseBody
	public String queryBranchInfo(
			@RequestParam("bankCardNo") String bankCardNo,
			@RequestParam("type") String type,
			@RequestParam(value="provinceCode",required=false) String provinceCode,
			@RequestParam(value="cityCode",required=false) String cityCode,
			@RequestParam(value="bankCode",required=false) String bankCode,
			HttpServletRequest request,
			HttpServletResponse response,Model model) throws Exception {
		LOGGER.info(" queryBranchInfo  entry !");
		String cardNo = bankCardNo.replaceAll(" ", "");
		BankNumParamBo bankNumParamBo = new BankNumParamBo();
		bankNumParamBo.setPlateNo(Constants.NEWPLATFORM);//01：老平台  02: 新平台
		bankNumParamBo.setAccountNo(cardNo);
		bankNumParamBo.setProvinceCode(provinceCode);
		bankNumParamBo.setCityCode(cityCode);
		bankNumParamBo.setBankCode(bankCode);
		BankNumResultBo bo = searchTransactionWS.serchBankNum(bankNumParamBo);		
		LOGGER.info("调用联行号查询返回参数：" + SensitiveInfoUtils.getJson(bo));//金融网关系统修改
		Map<String,Object> map = new HashMap<String,Object>();
		if (bo.getExceptionCode()==null) {
			map.put("status", Constants.SUCCESS);
			if(type.equals("P")){
				map.put("data",  bo.getProvinceResultBolist());
			}
			if(type.equals("C")){
				map.put("data",  bo.getCityResultBolist());
			}
			if(type.equals("B")){
				map.put("data",  bo.getSubBankIdentityResultBolist());
			}
		}else{
			map.put("status", Constants.FAILE);
			map.put("msg",  bo.getMessage());
		}
		return JSON.toJSONString(map);
	}
}
