package com.ucf.customer.fundpay.controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang.StringUtils;
import org.apache.cxf.common.util.Base64Exception;
import org.apache.cxf.common.util.Base64Utility;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.ucf.customer.api.enums.EnumUserType;
import com.ucf.customer.bo.RegisterParamBO;
import com.ucf.customer.bo.ResultBo;
import com.ucf.customer.controller.BaseController;
import com.ucf.customer.fundpay.model.RegisterBo;
import com.ucf.customer.pojo.UcfUserLoginApp;
import com.ucf.customer.service.UserInfoService;
import com.ucf.customer.service.UserService;
import com.ucf.customer.utils.enums.EnumResultCode;
import com.ucf.customer.utils.enums.EnumSessionKey;
import com.ucf.customer.ws.enums.EnumCertFrom;
import com.ucf.customer.ws.enums.EnumIdCardType;
import com.ucf.customer.ws.enums.EnumRegisterFrom;
import com.ucf.platform.framework.core.log.UcfLogger;
import com.ucf.platform.framework.core.log.UcfLoggerFactory;
import com.ucf.platform.framework.core.util.SensitiveInfoUtils;

/**
 * @ClassName: RegisterController
 * @Description: 基金平台 用户注册 
 * @author gaoxiang
 * @date 2014年9月22日 上午11:12:10
 */ 
@Controller("Fund_Register")
@RequestMapping({ "/fund/register" })
public class FundRegisterController extends BaseController {

	private static UcfLogger BizLogger = UcfLoggerFactory.getLogger(FundRegisterController.class);
	@Autowired
	private UserInfoService userInfoService;
	@Autowired
	private UserService userService;
	
	/**
	 * @Description: 跳转到 基金注册会员页面
	 * @param model
	 * @param 设定文件
	 * @return String 返回类型
	 * @throws
	 */
	@RequestMapping(value = "")
	public String register(HttpServletRequest request,HttpServletResponse response,Model model) {
		
		String realName=request.getParameter("realName");
		String certNo=request.getParameter("certNo");
		String backUrl=request.getParameter("backUrl");
		String merchantId = request.getParameter("merchantId");
		String traceNo = request.getParameter("traceNo");
		String returnUrl = request.getParameter("returnUrl");
		String notifyUrl = request.getParameter("notifyUrl");
		if(StringUtils.isEmpty(realName) || StringUtils.isEmpty(certNo) || StringUtils.isEmpty(backUrl)
				 || StringUtils.isEmpty(merchantId) || StringUtils.isEmpty(traceNo)
				 || StringUtils.isEmpty(returnUrl) || StringUtils.isEmpty(notifyUrl)){
			model.addAttribute("errMsg", "传递的参数存在空值");
			return "fund/register/error";
		}
		try {
			byte[] decodeRealName = Base64Utility.decode(realName);
			realName = new String(decodeRealName);
			byte[] decodeCertNo = Base64Utility.decode(certNo);
			certNo = new String(decodeCertNo);
			byte[] decodeBackUrl = Base64Utility.decode(backUrl);
			backUrl = new String(decodeBackUrl);
		} catch (Base64Exception e) {
			BizLogger.error(e.getMessage(),e);
			model.addAttribute("errMsg", "传递的参数格式不正确");
			return "fund/register/error";
		}
		HttpSession session  = request.getSession();
		session.setAttribute("realName", realName);
		session.setAttribute("certNo", certNo);
		session.setAttribute("backUrl", backUrl);
		session.setAttribute("merchantId", merchantId);
		session.setAttribute("traceNo", traceNo);
		session.setAttribute("returnUrl", returnUrl);
		session.setAttribute("notifyUrl", notifyUrl);
		return "fund/register/index";
	}
	
	/**
	 * @Description: 注册 协议
	 * @param request
	 * @param response
	 * @param model
	 * @return String 返回类型
	 */
	@RequestMapping(value = "/protocol", method = RequestMethod.GET)
	public String protocol(HttpServletRequest request, HttpServletResponse response, Model model) {
		return "fund/register/protocol";
	}

	/**
	 * @Description: 检查验证码,通过则跳转到设置用户信息页面
	 * @param phoneNo
	 * @param vfyCode
	 * @param request
	 * @param response
	 * @param session
	 * @param model
	 * @return String 返回类型
	 * @throws Exception 
	 */
	@RequestMapping(value = "/checkPhone", method = RequestMethod.POST)
	public String checkPhone(@RequestParam(value = "userNo") String phoneNo, 
			HttpServletRequest request, HttpServletResponse response, Model model) throws Exception {
		if (isExsit(phoneNo)) {
			String errMsg = "用户名已经存在";
			model.addAttribute("errMsg", errMsg);
			return "fund/register/error";
		}
		HttpSession session  = request.getSession();
		session.setAttribute("username", phoneNo);
		session.setAttribute(EnumSessionKey.SMS_PHONE.getKey(), phoneNo);
		String certNo = (String) session.getAttribute("certNo");
		model.addAttribute("certNo", certNo);
		model.addAttribute("hiddenCertNo", hidenchar(certNo,1,certNo.length()-2));
		model.addAttribute("realName", session.getAttribute("realName"));
		return "fund/register/setuserinfo";
	}

	/**
	 * @Description: 设置保存用户信息
	 * @param request
	 * @param session
	 * @param response
	 * @param registerBo
	 * @param model
	 * @throws Exception
	 * @return String 返回类型
	 * @throws Exception
	 */
	@RequestMapping(value = "/registerUserInfo", method = RequestMethod.POST)
	public String register(HttpServletRequest request, HttpServletResponse response,
			RegisterBo registerBo,final Model model,RedirectAttributes redirectAttributes) throws Exception {
		BizLogger.info("用户注册开始-----------------");
		// 安保答案去空格
		// 判断用户是否已经注册过了，防止不正常的注册
		HttpSession session  = request.getSession();
		String username = (String) session.getAttribute("username");
		if (isExsit(username)) {
			String errMsg = "用户名已经存在";
			model.addAttribute("errMsg", errMsg);
			return "fund/register/error";
		}
		if (StringUtils.equals(registerBo.getLgnPwd(), registerBo.getPaymentPassword())) {
			final String errMsg = "登录密码与支付密码相同，请重新设置";
			model.addAttribute("errMsg", errMsg);
			return "fund/register/error";
		}
		
		RegisterParamBO paramBo = new RegisterParamBO();
		paramBo.setPhoneNo(username);
		paramBo.setUserType(Integer.valueOf(EnumUserType.PERSON.getCode()));
		paramBo.setRealName(registerBo.getRealName());
		paramBo.setCertNo(registerBo.getCertNo());
		paramBo.setCertType(EnumIdCardType.CERT_NO.getCode());
		paramBo.setPayPwd(registerBo.getPaymentPassword().getBytes());
		paramBo.setLoginPwd(registerBo.getLgnPwd().getBytes());
		paramBo.setRegFrom(EnumRegisterFrom.base_platform_FROM.getCode());
		paramBo.setSource(EnumCertFrom.WEB_FROM.getCode());
		paramBo.setType(RegisterParamBO.COMMON_ACCOUNT);
		//注册
		ResultBo rsBo = userInfoService.register(paramBo);
		if(!EnumResultCode.SUCCESS.getCode().equals(rsBo.getResult())){
			BizLogger.info("用户注册失败" + SensitiveInfoUtils.getJson(rsBo));
			model.addAttribute("errMsg", "用户注册失败");
			return "fund/register/error";
		}
		redirectAttributes.addAttribute("userId", Base64Utility.encode(rsBo.getResultObject().toString().getBytes()));
		redirectAttributes.addAttribute("realName", Base64Utility.encode(registerBo.getRealName().getBytes()));
		redirectAttributes.addAttribute("certNo", Base64Utility.encode(registerBo.getCertNo().getBytes()));
	
		String traceNo = (String)session.getAttribute("traceNo");
		redirectAttributes.addAttribute("traceNo", traceNo);
		String merchantId = (String)session.getAttribute("merchantId");
		redirectAttributes.addAttribute("merchantId", merchantId);
		String returnUrl = (String)session.getAttribute("returnUrl");
		redirectAttributes.addAttribute("returnUrl", returnUrl);
		String notifyUrl = (String)session.getAttribute("notifyUrl");
		redirectAttributes.addAttribute("notifyUrl", notifyUrl);
		String backUrl = (String) session.getAttribute("backUrl");
		BizLogger.info("用户注册结束，跳往:"+backUrl);
		return "redirect:"+backUrl;
	}

	/**
	 * 判断用户名是否存在
	 * @param userName
	 * @return
	 * @throws Exception
	 */
	private boolean isExsit(String userName) throws Exception {
		UcfUserLoginApp ucfUser = userService.queryUcfUserLoginApp(userName);
		if (ucfUser != null) {
			return true;
		} else {
			return false;
		}
	}

	private StringBuffer hidenchar(String param,int begin,int end) {
		StringBuffer  buffer = new StringBuffer();
		if (null!=param&&!"".equals(param)) {
			char[]  chars =param.toCharArray();
			for(int i=0;i<chars.length;i++){
				if(i>=begin && i<=end){
					chars[i]='*';
					buffer.append(chars[i]);
				} else
				buffer.append(chars[i]);
			}
		}
		return buffer;
	}
}
