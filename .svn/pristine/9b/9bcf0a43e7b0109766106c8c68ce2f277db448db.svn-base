package com.ucf.customer.utils;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.SocketTimeoutException;
import java.net.URLEncoder;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.HttpException;
import org.apache.commons.httpclient.HttpStatus;
import org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;
import org.apache.commons.httpclient.methods.GetMethod;
import org.apache.commons.httpclient.methods.PostMethod;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.ucf.payment.ws.bo.SearchPayOrderWsReturnValueBo;

/**
 * HTTP工具类
 * 
 */
public class HttpUtils {

	private static Log log = LogFactory.getLog(HttpUtils.class);
	
	/**
	 * 定义编码格式 UTF-8
	 */
	public static final String URL_PARAM_DECODECHARSET_UTF8 = "UTF-8";
	
	/**
	 * 定义编码格式 UTF-8
	 */
	public static final String URL_PARAM_DECODECHARSET_GBK = "UTF-8";
	
	private static final String URL_PARAM_CONNECT_FLAG = "&";
	
	private static final String EMPTY = "";

	private static MultiThreadedHttpConnectionManager connectionManager = null;

	private static int connectionTimeOut = 10000;

	private static int socketTimeOut = 10000;

	private static int maxConnectionPerHost = 20;

	private static int maxTotalConnections = 20;

	private static HttpClient client;

	static{
		connectionManager = new MultiThreadedHttpConnectionManager();
		connectionManager.getParams().setConnectionTimeout(connectionTimeOut);
		connectionManager.getParams().setSoTimeout(socketTimeOut);
		connectionManager.getParams().setDefaultMaxConnectionsPerHost(maxConnectionPerHost);
		connectionManager.getParams().setMaxTotalConnections(maxTotalConnections);
		client = new HttpClient(connectionManager);
	}
	
	/**
	 * POST方式提交数据
	 * @param url 待请求的URL
	 * @param params 要提交的数据
	 * @param enc 编码
	 * @return 响应结果
	 * @throws IOException IO异常
	 */
	public static String URLPost(String url, Map<String, String> params, String enc) throws Exception{
		String response = EMPTY;
		PostMethod postMethod = null;
		try {
			postMethod = new PostMethod(url);
			postMethod.setRequestHeader("Content-Type", "application/x-www-form-urlencoded;charset=" + enc);
			if(params != null){
				//将表单的值放入postMethod中
				Set<Entry<String, String>> entrys = params.entrySet();
				for(Iterator<Entry<String, String>> it=entrys.iterator();it.hasNext();){
					Entry<String, String> entry = it.next();
					postMethod.addParameter(entry.getKey(),entry.getValue()==null?"":entry.getValue());
				}
			}
			//执行postMethod
			int statusCode = client.executeMethod(postMethod);
			if(statusCode == HttpStatus.SC_OK) {
				response = postMethod.getResponseBodyAsString();
			}else{
				log.error("响应状态码 = " + postMethod.getStatusCode());
			}
		}catch(SocketTimeoutException e){
			log.error("超时", e);
			throw e;
		}catch(Exception e){
			log.error("发生网络异常", e);
			throw e;
		}finally{
			if(postMethod != null){
				postMethod.releaseConnection();
				postMethod = null;
			}
		}
		return response;
	}
	
	
	/**
	 * POST方式提交数据
	 * @param url 待请求的URL
	 * @param params 要提交的数据
	 * @return 响应结果
	 * @throws IOException IO异常
	 */
	public static String sendHttpPost(String url, String orderId,String userId,String md5sign) throws Exception{
		String response = null;
		PostMethod postMethod = null;
		try {
			postMethod = new PostMethod(url);
			postMethod.setRequestHeader("Content-Type", "application/x-www-form-urlencoded;charset=utf-8" );
			if(orderId != null){
				//将表单的值放入postMethod中
				postMethod.addParameter("orderId",orderId);
				postMethod.addParameter("userId",userId);
				postMethod.addParameter("md5sign",md5sign);
			}
			//执行postMethod
			int statusCode = client.executeMethod(postMethod);
			if(statusCode == HttpStatus.SC_OK) {
				response = postMethod.getResponseBodyAsString();
			}else{
				log.error("响应状态码 = " + postMethod.getStatusCode());
			}
		}catch(SocketTimeoutException e){
			log.error("超时", e);
			throw e;
		}catch(Exception e){
			log.error("发生网络异常", e);
			throw e;
		}finally{
			if(postMethod != null){
				postMethod.releaseConnection();
				postMethod = null;
			}
		}
		
		return response;
	}
	
	/**
	 * POST方式提交数据
	 * @param url 待请求的URL
	 * @param params 要提交的数据
	 * @return 响应结果
	 * @throws IOException IO异常
	 */
	public static String sendBoHttpPost(String url, SearchPayOrderWsReturnValueBo bo) throws Exception{
		String response = null;
		PostMethod postMethod = null;
		try {
			postMethod = new PostMethod(url);
			postMethod.setRequestHeader("Content-Type", "application/x-www-form-urlencoded;charset=utf-8" );
			if(null!=bo){
				postMethod.addParameter("result", bo.getResult());
				postMethod.addParameter("payOrderId", bo.getPayOrderId());
				postMethod.addParameter("orderType", bo.getOrderType());
				postMethod.addParameter("bizNo", bo.getBizNo());
				postMethod.addParameter("transAmount", bo.getTransAmount().toString());
				postMethod.addParameter("transCur", bo.getTransCur());
				postMethod.addParameter("orderStatus", bo.getOrderStatus());
				postMethod.addParameter("createTime", bo.getCreateTime().toString());
			}
			//执行postMethod
			int statusCode = client.executeMethod(postMethod);
			if(statusCode == HttpStatus.SC_OK) {
				response = postMethod.getResponseBodyAsString();
			}else{
				log.error("响应状态码 = " + postMethod.getStatusCode());
			}
		}catch(SocketTimeoutException e){
			log.error("超时", e);
			throw e;
		}catch(Exception e){
			log.error("发生网络异常", e);
			throw e;
		}finally{
			if(postMethod != null){
				postMethod.releaseConnection();
				postMethod = null;
			}
		}
		return response;
	}
	
	/**
	 * POST方式提交数据,默认UTF-8编码
	 * @param url 待请求的URL
	 * @param params 要提交的数据
	 * @return 响应结果
	 * @throws IOException IO异常
	 */
	public static String URLPost(String url, Map<String, String> params)throws Exception{
		return URLPost(url, params, URL_PARAM_DECODECHARSET_UTF8);
	}
	
	/**
	 * GET方式提交数据
	 * @param url
	 * 			待请求的URL
	 * @param params
	 * 			要提交的数据
	 * @param enc
	 * 			编码
	 * @return
	 * 			响应结果
	 * @throws IOException
	 * 			IO异常
	 */
	public static String URLGet(String url, Map<String, String> params, String enc)throws Exception{

		String response = EMPTY;
		GetMethod getMethod = null;		
		StringBuffer strtTotalURL = new StringBuffer(EMPTY);
		
	    if(strtTotalURL.indexOf("?") == -1) {
	      strtTotalURL.append(url).append("?").append(getUrl(params, enc));
	    } else {
	    	strtTotalURL.append(url).append("&").append(getUrl(params, enc));
	    }
	    log.debug("GET请求URL = \n" + strtTotalURL.toString());
	    
		try {
			getMethod = new GetMethod(strtTotalURL.toString());
			getMethod.setRequestHeader("Content-Type", "application/x-www-form-urlencoded;charset=" + enc);
			//执行getMethod
			int statusCode = client.executeMethod(getMethod);
			if(statusCode == HttpStatus.SC_OK) {
				response = getMethod.getResponseBodyAsString();
			}else{
				log.debug("响应状态码 = " + getMethod.getStatusCode());
			}
		}catch(HttpException e){
			log.error("发生致命的异常，可能是协议不对或者返回的内容有问题", e);
//			log.error("",e);
			throw e;
		}catch(Exception e){
			log.error("发生网络异常", e);
//			log.error("",e);
			throw e;
		}finally{
			if(getMethod != null){
				getMethod.releaseConnection();
				getMethod = null;
			}
		}
		
		return response;
	}	

	/**
	 * 据Map生成URL字符串
	 * @param map
	 * 			Map
	 * @param valueEnc
	 * 			URL编码
	 * @return
	 * 			URL
	 */
	private static String getUrl(Map<String, String> map, String valueEnc) {
		
		if (null == map || map.keySet().size() == 0) {
			return (EMPTY);
		}
		StringBuffer url = new StringBuffer();
		
		Set<Entry<String, String>> entrys = map.entrySet();
		
		for(Iterator<Entry<String, String>> it=entrys.iterator();it.hasNext();){
			
			Entry<String, String> entry = it.next();
			String value = entry.getValue() != null?entry.getValue():EMPTY;
			try {
				value = URLEncoder.encode(value, valueEnc);
			} catch (UnsupportedEncodingException e) {
				log.error(e.getMessage(),e);
			}
			url.append(entry.getKey()).append("=").append(value).append(URL_PARAM_CONNECT_FLAG);
		}
		
//		Set<String> keys = map.keySet();
//		for (Iterator<String> it = keys.iterator(); it.hasNext();) {
//			String key = it.next();
//			if (map.containsKey(key)) {
//				String val = map.get(key);
//				String str = val != null ? val : EMPTY;
//				try {
//					str = URLEncoder.encode(str, valueEnc);
//				} catch (UnsupportedEncodingException e) {
//					log.error("",e);
//				}
//				url.append(key).append("=").append(str).append(URL_PARAM_CONNECT_FLAG);
//			}
//		}
		String strURL = EMPTY;
		strURL = url.toString();
		if (URL_PARAM_CONNECT_FLAG.equals(EMPTY + strURL.charAt(strURL.length() - 1))) {
			strURL = strURL.substring(0, strURL.length() - 1);
		}
		
		return (strURL);
	}
}
