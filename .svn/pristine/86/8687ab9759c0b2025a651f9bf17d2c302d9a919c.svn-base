package com.ucf.customer.ws.business.impl;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.annotation.Resource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.support.TransactionCallback;
import org.springframework.transaction.support.TransactionTemplate;

import com.alibaba.fastjson.JSONArray;
import com.ucf.account.ws.bo.AccountReturnValueBO;
import com.ucf.account.ws.bo.OpenAccountParamBO;
import com.ucf.account.ws.bo.OpenAccountReturnValueBo;
import com.ucf.account.ws.bo.SearchAccountParamBo;
import com.ucf.account.ws.service.OpenAccountWS;
import com.ucf.account.ws.service.SearchAccountWS;
import com.ucf.customer.api.enums.EnumCertType;
import com.ucf.customer.api.enums.EnumUserType;
import com.ucf.customer.dao.UcfBankCardDao;
import com.ucf.customer.pojo.UcfBankCard;
import com.ucf.customer.pojo.UcfCard;
import com.ucf.customer.pojo.UcfCustomer;
import com.ucf.customer.pojo.UcfPerson;
import com.ucf.customer.pojo.UcfUser;
import com.ucf.customer.pojo.UcfUserHabit;
import com.ucf.customer.service.BankCardService;
import com.ucf.customer.service.CardService;
import com.ucf.customer.service.LoginService;
import com.ucf.customer.service.UserHabitService;
import com.ucf.customer.service.UserRegService;
import com.ucf.customer.utils.BeanUtilEx;
import com.ucf.customer.utils.CheckMailOrPhone;
import com.ucf.customer.utils.Constants;
import com.ucf.customer.utils.TransCode;
import com.ucf.customer.utils.enums.EnumAccountType;
import com.ucf.customer.utils.enums.EnumBindBankCardStatus;
import com.ucf.customer.utils.enums.EnumVerifyLevle;
import com.ucf.customer.utils.exception.CustomerErrorCode;
import com.ucf.customer.utils.exception.CustomerException;
import com.ucf.customer.ws.business.BusinessService;
import com.ucf.customer.api.enums.EnumBankCardUseType;
import com.ucf.customer.ws.enums.EnumCertFrom;
import com.ucf.customer.ws.enums.EnumCertStatus;
import com.ucf.customer.ws.enums.Enumbase_platformCode;
import com.ucf.customer.ws.model.ServiceInterfaceModel;
import com.ucf.onlinepay.framework.common.bean.Money;
import com.ucf.platform.framework.core.log.UcfLogger;
import com.ucf.platform.framework.core.log.UcfLoggerFactory;
import com.ucf.platform.framework.core.util.SensitiveInfoUtils;

@Service("businessService")
public class BusinessServiceImpl implements BusinessService {
	private static final UcfLogger LOGGER = UcfLoggerFactory
			.getLogger(BusinessServiceImpl.class);
	
	@Autowired
	private BankCardService bankCardService;
	@Autowired
	private LoginService loginService;

	@Autowired
	private CardService cardService;

	@Autowired
	private UserHabitService userHabitService;

	@Autowired
	private SearchAccountWS wsSearchAccountServiceClient;
	@Autowired
	private OpenAccountWS openAccountWSClient;

	@Override
	public Map<String, String> queryUserInfo(ServiceInterfaceModel model,
			Map<String, String> returnMap) {

		UcfUser user = null;
		try {
			user = loginService.queryUserInfo(model.getUserId(),
					model.getMerchantId());
		} catch (Exception e) {
			LOGGER.error("查询用户异常", e);
		}
		JSONArray json = new JSONArray();
		if (null == user) {
			returnMap.put("respCode", "05");
			returnMap.put("respMsg", "查询用户失败");

			returnMap.put("merchantId", model.getMerchantId());
			returnMap.put("userId", model.getUserId());
			returnMap.put("Status", "01");
			returnMap.put("signature", model.getSignature());
			returnMap.put("reqReserved", model.getReqReserved());
		} else {
			json.add(user);

			returnMap.put("respCode", "00");
			returnMap.put("respMsg", "查询用户状态成功");

			returnMap.put("merchantId", model.getMerchantId());
			returnMap.put("userId", model.getUserId());
			returnMap.put("Status", "00");
			returnMap.put("userInfo", json.toJSONString());
			returnMap.put("signature", model.getSignature());
			returnMap.put("reqReserved", model.getReqReserved());
		}
		return returnMap;
	}

	@Override
	public Map<String, String> queryBanlance(ServiceInterfaceModel model,
			Map<String, String> returnMap) {
		UcfCard card = new UcfCard();
		try {
			card = this.cardService.queryCardInfo(model.getUserId());
		} catch (Exception e) {
			LOGGER.error("查询用户主卡异常", e);
		}

		SearchAccountParamBo accBalanceParamBO = new SearchAccountParamBo();
		accBalanceParamBO.setAccountNo(card.getAccountId());
		accBalanceParamBO.setTransCode(Constants.TRANS_CODE);
		accBalanceParamBO.setSubTransCode(Constants.SUB_TRANS_CODE);

		AccountReturnValueBO accBalanceReturnValueBO = null;
		Money money = null;

		if (wsSearchAccountServiceClient != null) {
			accBalanceReturnValueBO = wsSearchAccountServiceClient
					.searchAccount(accBalanceParamBO);
		} else {
			LOGGER.warn("error info ... or  throw Exception");

		}

		if ("0000".equals(accBalanceReturnValueBO.getCode())) {
			money = accBalanceReturnValueBO.getBalance();
			LOGGER.debug(accBalanceReturnValueBO.getCode() + ":"
					+ accBalanceReturnValueBO.getMsg());
			LOGGER.debug("=" + accBalanceReturnValueBO.getBalanceDirection());
			LOGGER.debug("###获取账户余额-pay/ws/searchAccount接口返回：" + money);
			returnMap.put("respCode", "00");
			returnMap.put("respMsg", "");
			returnMap
					.put("availableBalance",
							accBalanceReturnValueBO
									.getBalance()
									.subtract(
											accBalanceReturnValueBO
													.getFreezeAmount())
									.toString());
			returnMap.put("freezeBalance", accBalanceReturnValueBO
					.getFreezeAmount().toString());
			returnMap.put("balance", accBalanceReturnValueBO.getBalance()
					.toString());
			returnMap.put("reqReserved", model.getReqReserved());
			returnMap.put("signature", null);
		} else {
			LOGGER.warn(accBalanceReturnValueBO.getCode() + ":"
					+ accBalanceReturnValueBO.getMsg());
			LOGGER.warn("###获取账户余额-pay/ws/searchAccount接口返回：" + money);
			returnMap.put("respCode", "06");
			returnMap.put("respMsg", "查询余额失败");
			returnMap.put("availableBalance", "0.00");
			returnMap.put("freezeBalance", "0.00");
			returnMap.put("balance", "0.00");
			returnMap.put("reqReserved", model.getReqReserved());
			returnMap.put("signature", null);
		}
		return returnMap;
	}

	@Override
	public Map<String, String> queryUserStatus(ServiceInterfaceModel model,
			Map<String, String> returnMap) {
		UcfUser user = null;
		try {
			user = loginService.queryUserInfo(model.getUserId(),
					model.getMerchantId());
		} catch (Exception e) {
			LOGGER.error("查询用户异常", e);
		}
		if (null == user) {
			returnMap.put("respCode", "05");
			returnMap.put("Status", "01");
			returnMap.put("respMsg", "查询用户失败");
			returnMap.put("reqReserved", model.getReqReserved());
			returnMap.put("signature", model.getSignature());
		} else {
			returnMap.put("respCode", "00");
			returnMap.put("Status", "00");
			returnMap.put("respMsg", "查询银行卡成功");
			returnMap.put("reqReserved", model.getReqReserved());
			returnMap.put("signature", model.getSignature());
		}
		return returnMap;
	}

	@Override
	public Map<String, String> queryRealNameStatus(ServiceInterfaceModel model,
			Map<String, String> returnMap) {
		UcfUser user = null;
		try {
			user = loginService.queryUserInfo(model.getUserId(),
					model.getMerchantId());
		} catch (Exception e) {
			LOGGER.error("查询用户异常", e);
		}
		JSONArray json = new JSONArray();
		if (null == user) {
			returnMap.put("respCode", "05");
			returnMap.put("respMsg", "查询用户失败");

			returnMap.put("Status", null);
			returnMap.put("signature", model.getSignature());
			returnMap.put("reqReserved", model.getReqReserved());
		} else {
			json.add(user);

			returnMap.put("respCode", "00");
			returnMap.put("respMsg", "查询用户状态成功");

			returnMap.put("Status", user.getRealnameStatus());
			returnMap.put("signature", model.getSignature());
			returnMap.put("reqReserved", model.getReqReserved());
		}
		return returnMap;
	}

	@Override
	public Map<String, String> queryBindBankCards(ServiceInterfaceModel model,
			Map<String, String> returnMap) {

		String userId = model.getUserId();
		UcfBankCard card = new UcfBankCard();
		List<UcfBankCard> list = new ArrayList<UcfBankCard>();
		card.setUserId(userId);
		card.setCardType(model.getType());
		//add by gaoxiang 查询理财卡
		card.setUseType(EnumBankCardUseType.FINANCIAL.getCode());
		try {
			list = loginService.queryUcfBankCard(card);
		} catch (Exception e) {
			LOGGER.debug("query user msg wrong:" , e);
		}
		JSONArray json = new JSONArray();
		if (list != null) {
			json.add(list);

			returnMap.put("respCode", "00");
			returnMap.put("Status", "00");
			returnMap.put("respMsg", "查询银行卡成功");
			returnMap.put("bankCardList", json.toJSONString());
			returnMap.put("reqReserved", model.getReqReserved());
			returnMap.put("signature", model.getSignature());
		} else {
			returnMap.put("respCode", "07");
			returnMap.put("Status", "01");
			returnMap.put("respMsg", "查询银行卡失败");
			returnMap.put("bankCardList", json.toJSONString());
			returnMap.put("reqReserved", model.getReqReserved());
			returnMap.put("signature", model.getSignature());
		}

		return returnMap;
	}

	@Override
	public Map<String, String> queryUserHabitBanks(ServiceInterfaceModel model,
			Map<String, String> returnMap) {
		UcfUserHabit habit = new UcfUserHabit();
		habit.setUserId(model.getUserId());
		habit.setProductType(model.getProductType());
		habit.setTradeType(model.getTradeType());
		habit.setBankId(model.getBankId());
		habit.setStatus(Constants.ENABLE_STATUS_T);

		List<UcfUserHabit> list = null;
		try {
			list = userHabitService.query(habit);
		} catch (Exception e) {
			LOGGER.debug("query user habit msg wrong:" , e);
		}

		JSONArray json = new JSONArray();
		if (list != null) {

			// pojo转换
			List<com.ucf.customer.ws.bo.UcfUserHabit> listBO = new ArrayList<com.ucf.customer.ws.bo.UcfUserHabit>();
			for (UcfUserHabit ucfUserHabit : list) {
				com.ucf.customer.ws.bo.UcfUserHabit ucfUserHabitbo = new com.ucf.customer.ws.bo.UcfUserHabit();
				BeanUtilEx.copyProperties(ucfUserHabitbo, ucfUserHabit);
				listBO.add(ucfUserHabitbo);
			}

			json.add(listBO);

			returnMap.put("respCode", "00");
			returnMap.put("Status", "00");
			returnMap.put("respMsg", "查询银行卡成功");
			returnMap.put("bankCardList", json.toJSONString());
			returnMap.put("reqReserved", model.getReqReserved());
			returnMap.put("signature", model.getSignature());
		} else {
			returnMap.put("respCode", "07");
			returnMap.put("Status", "01");
			returnMap.put("respMsg", "查询银行卡失败");
			returnMap.put("bankCardList", json.toJSONString());
			returnMap.put("reqReserved", model.getReqReserved());
			returnMap.put("signature", model.getSignature());
		}

		return returnMap;
	}

	@Override
	public Map<String, String> saveUserHabitBank(ServiceInterfaceModel model,
			Map<String, String> returnMap) {
		UcfUserHabit habit = new UcfUserHabit();
		habit.setUserId(model.getUserId());
		habit.setProductType(model.getProductType());
		habit.setTradeType(model.getTradeType());
		habit.setBankId(model.getBankId());

		try {
			List<UcfUserHabit> list = userHabitService.query(habit);
			habit.setStatus(Constants.ENABLE_STATUS_T);
			habit.setUseTime(new Date());
			if (null != list && list.size() > 0) {

				userHabitService.modify(habit);
				returnMap.put("respCode", "00");
				returnMap.put("respMsg", "已更新用户习惯");
				returnMap.put("reqReserved", model.getReqReserved());
				returnMap.put("signature", model.getSignature());
			} else {
				userHabitService.save(habit);
				returnMap.put("respCode", "00");
				returnMap.put("respMsg", "保存用户习惯成功");
				returnMap.put("reqReserved", model.getReqReserved());
				returnMap.put("signature", model.getSignature());
			}
			
		} catch (Exception e) {
			LOGGER.debug("save user habit msg wrong:" , e);
			returnMap.put("respCode", "08");
			returnMap.put("respMsg", "保存用户习惯失败");
			returnMap.put("reqReserved", model.getReqReserved());
			returnMap.put("signature", model.getSignature());
		}

		return returnMap;
	}

	@Override
	public Map<String, String> updateUcfBankCard(ServiceInterfaceModel model,
			Map<String, String> returnMap) {
		UcfBankCard ucfBankCard = new UcfBankCard();
		ucfBankCard.setId(model.getBankCardId());
		ucfBankCard.setUserId(model.getUserId());
		ucfBankCard.setCardType(model.getCardType());

		try {
			bankCardService.updateUcfBankCard(ucfBankCard);

			returnMap.put("respCode", "00");
			returnMap.put("respMsg", "更新银行卡成功");
			returnMap.put("reqReserved", model.getReqReserved());
			returnMap.put("signature", model.getSignature());
		} catch (Exception e) {
			LOGGER.debug("update bankcard msg wrong:" , e);
			returnMap.put("respCode", "07");
			returnMap.put("respMsg", "更新银行卡失败");
			returnMap.put("reqReserved", model.getReqReserved());
			returnMap.put("signature", model.getSignature());
		}

		return returnMap;
	}
	
	@Override
	public Map<String, String> deleteUcfBankCard(ServiceInterfaceModel model,
			Map<String, String> returnMap) {
		try {
			UcfBankCard bankCard = bankCardService.queryUserBankInfoById(model.getBankCardId());
			if (null != bankCard ) {
				LOGGER.info("查询数据："+SensitiveInfoUtils.getJson(bankCard));
				bankCardService.updateUcfBankCard(bankCard);
				returnMap.put("respCode", "00");
				returnMap.put("respMsg", "删除银行卡成功");
				returnMap.put("reqReserved", model.getReqReserved());
				returnMap.put("signature", model.getSignature());
			} else {
				returnMap.put("respCode", "07");
				returnMap.put("respMsg", "删除银行卡失败");
				returnMap.put("reqReserved", model.getReqReserved());
				returnMap.put("signature", model.getSignature());
			}

		} catch (Exception e) {
			LOGGER.debug("update bankcard msg wrong:" , e);
			returnMap.put("respCode", "07");
			returnMap.put("respMsg", "删除银行卡失败");
			returnMap.put("reqReserved", model.getReqReserved());
			returnMap.put("signature", model.getSignature());
		}

		return returnMap;
	}

	// UMPR0001
	private Map<String, String> realNameAuth(final ServiceInterfaceModel model,
			Map<String, String> returnMap) {
		List<UcfBankCard> list;
		try {
			list = bankCardService.queryUserBankInfos(model.getUserId());

			if (null == list || list.size() == 0) {
				final UcfUser user = loginService.queryUserInfo(
						model.getUserId(), model.getMerchantId());
				final UcfCard ucfCard = loginService.queryUcfCardByUserId(user
						.getUserId());
				// 生成客户信息
				final UcfCustomer customer = new UcfCustomer();
				customer.setCertNo(user.getCertNo());
				customer.setCertType(EnumCertType.ID_CARD.getCode());
				customer.setName(user.getRealName());
				customer.setNational("CHA");
				customer.setType(Constants.CUSTOMER_TYPE_PERSON);
				customer.setEnableStatus(Constants.ENABLE_STATUS_T);
				customer.setGmtCreate(new Date());
				customer.setExtFlag(Constants.EXT_FLAG_T);

				// 生成个人信息
				final UcfPerson personInfo = new UcfPerson();
				personInfo.setRealName(user.getRealName());
				personInfo.setCell(user.getCell());

				boolean commit = (Boolean) transactionTemplate
						.execute(new TransactionCallback<Object>() {
							// the code in this method executes in a
							// transactional context
							public Object doInTransaction(
									final TransactionStatus status) {
								try {
									customer.setCertStatus(Constants.VERIFY_STATUS_T);
									customer.setCardNo(model.getBankCardNo());
									loginService.insertCustomer(customer);
									UcfCustomer temCustomer = new UcfCustomer();
									temCustomer.setName(user.getRealName());
									temCustomer.setCertNo(user.getCertNo());
									final UcfCustomer anotherCustomer = loginService
											.queryUcfCustomerInfo(temCustomer);
									personInfo.setCustomerId(anotherCustomer
											.getCustomerId());
									ucfCard.setCustomerId(anotherCustomer
											.getCustomerId());
									loginService.insertPersonInfo(personInfo);

									user.setRealnameStatus(Constants.VERIFY_STATUS_T);
									loginService.updateUcfUser(user);
								} catch (final Exception e) {
									status.setRollbackOnly();
									LOGGER.warn("新增银行卡实名认证信息异常", e);
									return false;
								}
								return true;
							}
						});

				if (!commit) {
					returnMap.put("respCode", "09");
					returnMap.put("respMsg", "新增实名信息失败");
					returnMap.put("reqReserved", model.getReqReserved());
					returnMap.put("signature", model.getSignature());
				} else {
					returnMap.put("respCode", "00");
					returnMap.put("respMsg", "注册成功");
					returnMap.put("reqReserved", model.getReqReserved());
					returnMap.put("signature", model.getSignature());
					returnMap.put("status", "00");
					returnMap.put("userId", user.getUserId());
					returnMap.put("merchantId", model.getMerchantId());
				}
			}
		} catch (Exception e) {
			LOGGER.debug("update bankcard msg wrong:" , e);
			returnMap.put("respCode", "09");
			returnMap.put("respMsg", "新增实名信息失败");
			returnMap.put("reqReserved", model.getReqReserved());
			returnMap.put("signature", model.getSignature());
		}

		return returnMap;
	}
	@Autowired
	private UcfBankCardDao ucfBankCardDao;
	@Override
	public Map<String, String> addUcfBankCard(ServiceInterfaceModel model,
			Map<String, String> returnMap) {
		UcfBankCard ucfBankCard = new UcfBankCard();
		ucfBankCard.setUserId(model.getUserId());

		realNameAuth(model, returnMap);
		try {
		ucfBankCard.setId(ucfBankCardDao.getBankCardSeq());
		ucfBankCard.setCardType(model.getCardType());
		ucfBankCard.setCity(model.getCity());
		ucfBankCard.setProvince(model.getProvince());
		ucfBankCard.setBranchname(model.getBranchName());
		ucfBankCard.setBankId(model.getBankId());
		ucfBankCard.setCardNo(model.getBankCardNo());
		ucfBankCard.setIssuer(model.getIssuer());
		ucfBankCard.setBankName(model.getBankName());
		ucfBankCard.setPhone(model.getPhoneNo());
		ucfBankCard.setUnionSeq(ucfBankCardDao.getUnionSeq());
		ucfBankCard.setStatus(EnumBindBankCardStatus.SUCCESS.getCode());
			UcfBankCard bankcard = bankCardService.queryUserBankInfo(model.getUserId(), model.getBankCardNo());
			if (null == bankcard) {
				bankCardService.insertUcfBankCard(ucfBankCard);
				returnMap.put("respCode", "00");
				returnMap.put("respMsg", "新增银行卡成功");
				returnMap.put("reqReserved", model.getReqReserved());
				returnMap.put("signature", model.getSignature());
			} else {
				returnMap.put("respCode", "10");
				returnMap.put("respMsg", "银行卡已存在");
				returnMap.put("reqReserved", model.getReqReserved());
				returnMap.put("signature", model.getSignature());
				LOGGER.info("银行卡已存在:"+SensitiveInfoUtils.getJson(ucfBankCard));
			}
		} catch (Exception e) {
			LOGGER.debug("update bankcard msg wrong:" , e);
			returnMap.put("respCode", "10");
			returnMap.put("respMsg", "新增银行卡失败");
			returnMap.put("reqReserved", model.getReqReserved());
			returnMap.put("signature", model.getSignature());
		}

		return returnMap;
	}

	@Resource(name = "sharedTransactionTemplate")
	private TransactionTemplate transactionTemplate;
	@Autowired
	private UserRegService userRegService;

	@Override
	public Map<String, String> reg(ServiceInterfaceModel model,
			Map<String, String> returnMap) {
		final UcfUser ucfUser = new UcfUser();

		// 此时生成用户信息
		boolean isMobile = CheckMailOrPhone.isMobileNO(model.getPhoneNo());
		if (isMobile) {
			ucfUser.setCell(model.getPhoneNo());
			//ucfUser.setLoginId(model.getPhoneNo());
			//ucfUser.setEnabledStatus(Constants.PHONE_ACTIVE);
		}
		ucfUser.setRefMerchant(model.getMerchantId());
		try {
			List<UcfUser> list = userRegService.queryUserInfo(ucfUser);
			if (null != list && list.size() > 0) {
				for (UcfUser user : list) {
					UcfCard card = loginService.queryUcfCardByUserId(user.getUserId(),model.getRegFrom());
					if (null!=card) {
						if (user.getRealName().equals(model.getRealName())&&user.getCertNo().equals(model.getCertNo())) {
							returnMap.put("respCode", Enumbase_platformCode.SUCCESS.getCode());
							returnMap.put("respMsg",  Enumbase_platformCode.EXIST_USER.getMsgS());
							returnMap.put("reqReserved", model.getReqReserved());
							returnMap.put("signature", model.getSignature());
							returnMap.put("status", Enumbase_platformCode.EXIST_USER.getCode());
							returnMap.put("userId", user.getUserId());
							returnMap.put("merchantId", model.getMerchantId());
						} else {
							returnMap.put("respCode", Enumbase_platformCode.SUCCESS.getCode());
							returnMap.put("respMsg", Enumbase_platformCode.EXIST_MOBLEPHOE.getMsgS());
							returnMap.put("reqReserved", model.getReqReserved());
							returnMap.put("signature", model.getSignature());
							returnMap.put("status",  Enumbase_platformCode.EXIST_MOBLEPHOE.getCode());
							returnMap.put("userId", user.getUserId());
							returnMap.put("merchantId", model.getMerchantId());
						}
						return returnMap;
					}
				}
			}
			ucfUser.setRealnameStatus(Constants.VERIFY_STATUS_W);
			ucfUser.setLoginId(model.getPhoneNo());
			ucfUser.setCertNo(model.getCertNo());
			ucfUser.setCertType(model.getCertType());
			ucfUser.setUserType(BigDecimal.valueOf(Integer.valueOf(EnumUserType.PERSON.getCode())));
			ucfUser.setRealName(model.getRealName());
			ucfUser.setVerifyStatus(EnumVerifyLevle.REGISTER.getCode());//注册实名认证级别
			// 生成卡信息
			final UcfCard ucfCard = new UcfCard();
			ucfCard.setCardType(model.getCertType());
			Date date = new Date();
			ucfCard.setGmtCreate(date);
			ucfCard.setRegisterFrom(model.getRegFrom());
			ucfCard.setCertFrom(EnumCertFrom.WEB_FROM.getCode());
			ucfCard.setCertStatus(EnumCertStatus.NO_CERT.getCode());

			String userId = userRegService.queryUcfUserId();
			ucfUser.setUserId(userId);

			boolean commit = (Boolean) transactionTemplate
					.execute(new TransactionCallback<Object>() {
						// the code in this method executes in a transactional
						// context
						public Object doInTransaction(
								final TransactionStatus status) {
							try {
								// 保存用户信息
								userRegService.insertUserInfo(ucfUser);
								List<UcfUser> user = userRegService
										.queryUserInfo(ucfUser);
								if (null != user && user.size() > 0) {
									String userId = user.get(0).getUserId();
									ucfCard.setCardNo(userId);
									ucfCard.setUserId(userId);
									ucfUser.setUserId(userId);
								}

								// 保存安全问题
								final OpenAccountParamBO openAccountParamBO = new OpenAccountParamBO();
								openAccountParamBO.setCardId(ucfCard
										.getCardNo());
								openAccountParamBO
										.setAccountType(EnumAccountType.PERSON.getCode());
								openAccountParamBO
										.setCreateOperator(Constants.OPERATE);
								openAccountParamBO
										.setCurrency(Constants.TRANS_CUR);
								openAccountParamBO
										.setBalanceDirection(Constants.BANLANCE_DIR);
								openAccountParamBO
										.setTransCode(TransCode.OPENACCOUNT
												.getTransCode());
								openAccountParamBO
										.setSubTransCode(TransCode.OPENACCOUNT
												.getSubTransCode());
								openAccountParamBO.setOutOrderNo(""
										+ UUID.randomUUID());
								openAccountParamBO
										.setTransRule(Constants.TRANS_RULE_YES);

								// 调用账户接口开户
								final OpenAccountReturnValueBo ret = openAccountWSClient
										.openAccount(openAccountParamBO);
								if (null != ret
										&& ret.getCode().compareTo("0000") == 0) {
									LOGGER.debug("msg:[memeber open account and the accountNo is "
											+ ret.getAccountNo() + "]");
									ucfCard.setAccountId(ret.getAccountNo());
									// 保存卡信息
									loginService.insertCardInfo(ucfCard);
								} else {
									LOGGER.debug("开户失败");
									throw new CustomerException(
											CustomerErrorCode.ERROR_OPEN_ACCOUNT_FAIL);
								}
							} catch (final Exception e) {
								status.setRollbackOnly();
								LOGGER.error(e.getMessage(),e);
								return false;
							}
							return true;
						}
					});

			if (commit) {
				returnMap.put("respCode", Enumbase_platformCode.SUCCESS.getCode());
				returnMap.put("respMsg", "注册成功");
				returnMap.put("reqReserved", model.getReqReserved());
				returnMap.put("signature", model.getSignature());
				returnMap.put("status",Enumbase_platformCode.SUCCESS.getCode());
				returnMap.put("userId", ucfUser.getUserId());
				returnMap.put("merchantId", model.getMerchantId());

			} else {				
				returnMap.put("respCode", Enumbase_platformCode.ERROR.getCode());
				returnMap.put("respMsg", "注册失败");
				returnMap.put("reqReserved", model.getReqReserved());
				returnMap.put("signature", model.getSignature());
				returnMap.put("status", Enumbase_platformCode.ERROR_DB_OPERATE.getCode());
				returnMap.put("userId", ucfUser.getUserId());
				returnMap.put("merchantId", model.getMerchantId());
			}
		} catch (Exception e) {
			LOGGER.error("查询新注册用户失败", e);
			returnMap.put("respCode", "13");
			returnMap.put("respMsg", "查询新注册用户失败");
			returnMap.put("reqReserved", model.getReqReserved());
			returnMap.put("signature", model.getSignature());
			returnMap.put("status", "01");
			returnMap.put("userId", ucfUser.getUserId());
			returnMap.put("merchantId", model.getMerchantId());
			return returnMap;
		}

		return returnMap;
	}

	@Override
	public Map<String, String> modigyPhoneNo(ServiceInterfaceModel model,
			Map<String, String> returnMap) {
		UcfUser user = null;
		try {
			user = new UcfUser();
			user.setCell(model.getNewPhoneNo());
			user.setRefMerchant(model.getMerchantId());
			List<UcfUser> list = loginService.queryUcfUser(user);
			boolean isReg = false;
			if (null!=list&&list.size()>0) {
				//此处 代码有问题，限制不了同一商户手机号重复 ，而卡的注册来源统一为P2P,不是商户ID，故注释掉此代码（zhanglei 2014-08-04 14:58）
//				for (UcfUser u : list) {
//					UcfCard card = loginService.queryUcfCardByUserId(u.getUserId());
//					if (null!=card&&model.getMerchantId().equals(card.getRegisterFrom())) {
//						isReg = true;
//					}
//				}
				//同一商户下，只要手机号重复就不可以修改 （zhanglei 2014-08-04 14:58）
				isReg = true;
			}
			
			if (!isReg) {
				user = loginService.queryUserInfo(model.getUserId(),
						model.getMerchantId());
				if (null != user) {
					user.setCell(model.getNewPhoneNo());
					user.setLoginId(model.getNewPhoneNo());
					loginService.updateUcfUser(user);
				}
			} else {
				returnMap.put("respCode", "14");
				returnMap.put("respMsg", "手机号已被使用");

				returnMap.put("Status", "01");
				returnMap.put("newPhoneNo", model.getNewPhoneNo());
				returnMap.put("userId", model.getUserId());
				returnMap.put("merchantId", model.getMerchantId());
				returnMap.put("signature", model.getSignature());
				returnMap.put("reqReserved", model.getReqReserved());
				return returnMap;
			}
			
		} catch (Exception e) {
			LOGGER.error("查询用户异常", e);
		}
		if (null != user && user.getCell().equals(model.getNewPhoneNo())) {
			returnMap.put("respCode", "00");
			returnMap.put("respMsg", "修改手机号成功");

			returnMap.put("Status", "00");
			returnMap.put("newPhoneNo", model.getNewPhoneNo());
			returnMap.put("userId", model.getUserId());
			returnMap.put("merchantId", model.getMerchantId());
			returnMap.put("signature", model.getSignature());
			returnMap.put("reqReserved", model.getReqReserved());

		} else {
			returnMap.put("respCode", "15");
			returnMap.put("respMsg", "修改手机号失败");

			returnMap.put("Status", "01");
			returnMap.put("newPhoneNo", model.getNewPhoneNo());
			returnMap.put("userId", model.getUserId());
			returnMap.put("merchantId", model.getMerchantId());
			returnMap.put("signature", model.getSignature());
			returnMap.put("reqReserved", model.getReqReserved());

		}
		return returnMap;
	}

	@Override
	public Map<String, String> freezeCard(ServiceInterfaceModel model,
			Map<String, String> returnMap) {
		UcfCard card = new UcfCard();
		boolean flag = false;
		try {
			card = this.cardService.queryCardInfo(model.getUserId());
			if ("0".equals(model.getType())) {// 解冻
				card.setLastPayFailDt(new Date());
				card.setRepeatPaypasswordErrorTimes(new BigDecimal(0));
				loginService.updateUcfCard(card);
				flag = true;
			} else {// 冻结
					Date date = new Date();
					card.setLastPayFailDt(date);
					card.setRepeatPaypasswordErrorTimes(new BigDecimal(model.getType()));
				
				loginService.updateUcfCard(card);
				flag = true;
			}

		} catch (Exception e) {
			LOGGER.error("查询用户主卡异常", e);
		}
		if (flag) {
			returnMap.put("respCode", "00");
			returnMap.put("respMsg", "成功");

			returnMap.put("Status", "00");
			returnMap.put("userId", model.getUserId());
			returnMap.put("merchantId", model.getMerchantId());
			returnMap.put("signature", model.getSignature());
			returnMap.put("reqReserved", model.getReqReserved());

		} else {
			returnMap.put("respCode", "16");
			returnMap.put("respMsg", "冻结或解冻失败");

			returnMap.put("Status", "01");
			returnMap.put("userId", model.getUserId());
			returnMap.put("merchantId", model.getMerchantId());
			returnMap.put("signature", model.getSignature());
			returnMap.put("reqReserved", model.getReqReserved());

		}
		return returnMap;
	}
}
