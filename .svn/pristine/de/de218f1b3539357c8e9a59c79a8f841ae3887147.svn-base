package com.ucf.customer.mq;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.locks.Lock;

import javax.annotation.Resource;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;

import com.alibaba.fastjson.JSON;
import com.ucf.customer.api.enums.EnumBankCardType;
import com.ucf.customer.api.enums.EnumCertType;
import com.ucf.customer.pojo.UcfCard;
import com.ucf.customer.pojo.UcfUser;
import com.ucf.customer.service.LoginService;
import com.ucf.customer.service.MQConsumeService;
import com.ucf.customer.service.UserService;
import com.ucf.onlinepay.framework.common.util.StringUtil;
import com.ucf.payment.util.constant.PaymentEnum;
import com.ucf.platform.framework.core.log.UcfLogger;
import com.ucf.platform.framework.core.log.UcfLoggerFactory;
import com.ucf.platform.framework.core.util.SensitiveInfoUtils;
import com.ucf.platform.framework.lock.LockHolder;
import com.ucf.platform.framework.mq.UcfMQRuntimeException;
import com.ucf.platform.framework.mq.UcfReceiveMessage;
import com.ucf.platform.framework.mq.UcfTopicTagAssemble;
import com.ucf.platform.framework.mq.consumer.AbstractUcfMQSyncConsumerConcurrently;
import com.ucf.platform.framework.mq.enums.RocketMQTopicEnum;
import com.ucf.platform.framework.mq.enums.UcfMQConsumeStatus;

/**
 * @Description: 一键支付交易发送消息给会员绑卡
 * @ClassName: TradeH5MQConsumeService
 * @author gaoxiang
 * @date 2015-1-22 下午4:09:28
 */ 
public class TradeH5MQConsumeService extends AbstractUcfMQSyncConsumerConcurrently {
	
	private static final UcfLogger LOGGER = UcfLoggerFactory.getLogger(TradeH5MQConsumeService.class);
	
	@Resource(name="mqConsumeService")
	private MQConsumeService mqConsumeService;
	@Autowired
	private UserService userService;
	@Autowired
	private LoginService loginService;
	
	@Override
	public UcfTopicTagAssemble getTopicAndTagExpress() {
		UcfTopicTagAssemble assemble = new UcfTopicTagAssemble();
		assemble.setTopic(RocketMQTopicEnum.ROCKETMQ_TRADE_H5_BINDCARD_TOPICANDTAG.getTopic());
		assemble.setTag(RocketMQTopicEnum.ROCKETMQ_TRADE_H5_BINDCARD_TOPICANDTAG.getTag());
		return assemble;
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public UcfMQConsumeStatus doConsume(UcfReceiveMessage msg) throws UcfMQRuntimeException {
		Map<Object, Object> mqReturnMap = (Map<Object, Object>) msg.getBizValue();
		Map<Object, Object> mqPrintMap = new HashMap<Object, Object>();
		mqPrintMap.putAll((Map<Object, Object>) msg.getBizValue());
		mqPrintMap.put("bankAccountName", SensitiveInfoUtils.chineseName((String) mqReturnMap.get("bankAccountName")));
		mqPrintMap.put("bankAccountNo", SensitiveInfoUtils.bankCard((String) mqReturnMap.get("bankAccountNo")));
		mqPrintMap.put("mobileNo", SensitiveInfoUtils.mobilePhone((String) mqReturnMap.get("mobileNo")));
		mqPrintMap.put("issuer", SensitiveInfoUtils.cnapsCode((String) mqReturnMap.get("issuer")));
		mqPrintMap.put("cvn2", "");
		mqPrintMap.put("validDate", "");
		LOGGER.info("一键支付会员绑卡MQ入参：" + JSON.toJSONString(mqPrintMap));
		String operationFlag = (String) mqReturnMap.get("cardAction");// 操作标准
		String userId = (String) mqReturnMap.get("userId");
		String cardType = (String) mqReturnMap.get("cardType");
		final String userName = (String) mqReturnMap.get("bankAccountName");
		String bankAccountNo = (String) mqReturnMap.get("bankAccountNo");// 银行卡号
		final String certNo = (String) mqReturnMap.get("certificateNo");
		String bankCode = (String) mqReturnMap.get("bankId");
		String bankName = (String) mqReturnMap.get("bankName");
		final String mobileNo = (String) mqReturnMap.get("mobileNo");
		String province = (String) mqReturnMap.get("province");
		String city = (String) mqReturnMap.get("city");
		String issuer = (String) mqReturnMap.get("issuer");
		String branchName = (String) mqReturnMap.get("branchName");
		String cvn2 = (String) mqReturnMap.get("cvn2");
		String validDate = (String) mqReturnMap.get("validDate");
		if(EnumBankCardType.DEBIT_CARD.getCode().equals(cardType) &&
				!StringUtils.isEmpty(cvn2) && !mqConsumeService.match("^\\d{3}$",cvn2) ){
			LOGGER.info("CVN2格式非法！");
			return UcfMQConsumeStatus.SUCCESS;
		}
		if(EnumBankCardType.DEBIT_CARD.getCode().equals(cardType) &&
				!StringUtils.isEmpty(validDate) && !mqConsumeService.match("^\\d{4}$",validDate)){
			LOGGER.info("有效日期格式非法！");
			return UcfMQConsumeStatus.SUCCESS;
		}

		try {
			final UcfUser ucfUser = userService.queryUserInfoById(userId);
			final UcfCard ucfCard = this.loginService.queryUcfCardByUserId(userId);
			if(!EnumBankCardType.CREDIT_CARD.getCode().equals(cardType)){
				mqConsumeService.realNameMethod(userName, bankAccountNo, certNo, mobileNo, ucfUser,ucfCard);
			}else{
				//补充用户信息
				if(StringUtil.isEmpty(ucfUser.getRealName()) || StringUtil.isEmpty(ucfUser.getCertNo())){
					ucfUser.setRealName(userName);
					ucfUser.setCertNo(certNo);
					ucfUser.setCertType(EnumCertType.ID_CARD.getCode());
					loginService.updateUcfUser(ucfUser);
				}
			}
			if (PaymentEnum.CARD_ACTION_BIND.getCode().equals(operationFlag)) {// 绑卡
				//加锁 获取锁超时时间20秒，锁超时时间60秒
				Lock lock = LockHolder.createLock("TradeH5MQConsume", userId+bankAccountNo,20*1000,60*1000);
				try {
					lock.lock();
					mqConsumeService.addBankCard(userId, cardType,bankAccountNo, bankCode, bankName,mobileNo, province, city, issuer, branchName,cvn2,validDate);
				} finally {
					lock.unlock();
				}
			} else if (PaymentEnum.CARD_ACTION_UPDATE.getCode().equals(operationFlag)) {// 修改银行卡
				mqConsumeService.updateBankCard(userId,bankAccountNo,province, city, issuer,branchName);
			}
		} catch (Exception e) {
			LOGGER.error(e.getMessage(), e);
			return UcfMQConsumeStatus.LATER;
		}
		return UcfMQConsumeStatus.SUCCESS;
	}
	
	@Override
	public void handleMQException(UcfReceiveMessage msg) {
		
	}
	
}
