package com.ucf.customer.action;

import java.util.Date;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.ucf.customer.bo.ResultBo;
import com.ucf.customer.pojo.UcfUser;
import com.ucf.customer.pojo.UcfUserLoginApp;
import com.ucf.customer.service.LoginService;
import com.ucf.customer.service.UserInfoService;
import com.ucf.customer.service.UserService;
import com.ucf.customer.utils.RedisSession;
import com.ucf.customer.utils.RedisUtils;
import com.ucf.customer.utils.enums.EnumResultCode;
import com.ucf.customer.utils.enums.EnumsTrueFlase;

@Controller
@RequestMapping({ "/cashier" })
public class CashierLoginAction extends BaseAction {
	@Autowired
	private LoginService loginService;
	@Autowired
	private UserService userService;
	@Value("#{settings['devmode']}")
	private String devmode;

	@Value("#{settings['com.ucf.cashier.url']}")
	private String cashier;

	@Autowired
	private UserInfoService userInfoService;
	
	@RequestMapping({ "/toLogin.htm" })
	public String toLogin(
			@RequestParam(value = "orderId", required = false) String orderId,
			@RequestParam(value = "backUrl", required = false) String backUrl,
			HttpServletRequest request, HttpServletResponse response,
			Model model) {
		model.addAttribute("backUrl", backUrl);
		model.addAttribute("orderId", orderId);
		return "cashier/index";
	}

	@RequestMapping(value = "/login.htm", method = RequestMethod.POST)
	public String login(@RequestParam("username") String userName,
			@RequestParam("checkCode") String checkCode,
			@RequestParam(value = "orderId") String orderId,
			@RequestParam(value = "backUrl") String backUrl,
			HttpServletRequest request, HttpServletResponse response,
			Model model) throws Exception {

		String pwd = (String) request.getAttribute("payPassword");
		// 用户获取
		UcfUser user = loginService.queryUserInfoByPhone(userName);
		UcfUserLoginApp userApp = loginService.queryUserAppInfo(userName);

		model.addAttribute("backUrl", backUrl);
		
		// 用户校验
		if (user == null) {
			model.addAttribute("msg", "用户不存在,请先注册!");
			model.addAttribute("backUrl", backUrl);
			model.addAttribute("orderId", orderId);
			return "login/index";
		}

		// 参数校验
		if (!checkParams(request, response, model, userName, pwd, checkCode,
				user, userApp)) {
			model.addAttribute("backUrl", backUrl);
			model.addAttribute("orderId", orderId);
			return "cashier/index";
		}
		cacheUser(orderId, user);
		userApp.setLastLoginTime(new Date());
		this.loginService.updateUcfUserApp(userApp);
		String paramString = "?orderId=" + orderId;
		return "redirect:" + cashier  + backUrl + paramString;

	}

	private void cacheUser(String orderId, UcfUser user) {
		RedisUtils.setExpire("cash_" + orderId, 86400);
		RedisSession redisSession = new RedisSession("cash_" + orderId);
		redisSession.setAttribute("user_id", user.getUserId());
	}
	
	
	private boolean checkParams(HttpServletRequest request,
			HttpServletResponse response, Model model, String userName,
			String pwd, String checkCode, UcfUser user, UcfUserLoginApp userApp) {
		try {
			String idCode = getCheckCode(request, response);

			LOGGER.debug("------>>idCode:" + idCode);
			// 非空校验
			if (userName.trim() != null && (pwd == null || pwd.trim() == null)) {
				model.addAttribute("msg", "请填写支付密码!");
				return false;
			}

			// 验证码校验
			if (!EnumsTrueFlase.TRUE.getCode().equals(devmode)
					&& !idCode.equalsIgnoreCase(checkCode.trim())) {
				model.addAttribute("msg", "验证码输入错误!");
				return false;
			}

			if (null == user) {
				return false;
			}

			if (userApp == null) {
				model.addAttribute("msg", "用户不存在!");
				return false;
			}
			ResultBo resultBo = userInfoService.checkPayPwd(user.getUserId(), pwd.getBytes());
			if(!EnumResultCode.SUCCESS.getCode().equals(resultBo.getResult())){
				model.addAttribute("msg", resultBo.getMsg());
				return false;
			}
			return true;
		} catch (Exception e) {
			LOGGER.error(e.getMessage(), e);
		}
		return true;
	}
}
