package com.ucf.customer.service.impl;

import java.util.HashSet;
import java.util.Random;
import java.util.Set;
import java.util.concurrent.TimeUnit;

import javax.annotation.Resource;

import org.apache.commons.lang.ArrayUtils;
import org.springframework.stereotype.Service;

import com.alibaba.druid.util.StringUtils;
import com.alibaba.fastjson.JSON;
import com.ucf.customer.bo.ResultBo;
import com.ucf.customer.service.SMSService;
import com.ucf.customer.utils.enums.EnumRedisKey;
import com.ucf.customer.utils.enums.EnumResultCode;
import com.ucf.customer.utils.enums.EnumSMSRouter;
import com.ucf.onlinepay.msg.model.MessageSender;
import com.ucf.onlinepay.msg.model.enums.MsgState;
import com.ucf.onlinepay.msg.model.result.MsgServiceResult;
import com.ucf.onlinepay.msg.service.MessageService;
import com.ucf.platform.framework.core.log.UcfLogger;
import com.ucf.platform.framework.core.log.UcfLoggerFactory;
import com.ucf.platform.framework.core.util.SensitiveInfoUtils;
import com.ucf.platform.framework.redis.support.ICache;

@Service
public class SMSServiceImpl implements SMSService {
	
	private static UcfLogger LOGGER = UcfLoggerFactory.getLogger(SMSServiceImpl.class);
	@Resource
	private MessageService messageService;
	@Resource(name = "redisKVManager")
	private ICache<String> cache = null;
	
	@Override
	public ResultBo sendSMS(String merchantId,String phone, String msg, String... params) {
		String sendMsg = getSendMsg(msg, params);
		return sendMessage(merchantId,phone, sendMsg);
	}
	
	@Override
	public ResultBo sendVfyCodeSMS(String merchantId,String phone, String msg, String... params) {
		String vfyCode = String.valueOf(new Random().nextInt(899999) + 100000);
		LOGGER.info("手机号验证码" + SensitiveInfoUtils.mobilePhone(phone) + ":" + vfyCode);
		String key = EnumRedisKey.VERIFY_CODE_KEY.getKey() + phone;
		cache.set(key, vfyCode, EnumRedisKey.VERIFY_CODE_KEY.getTimeout(), TimeUnit.SECONDS);
		msg = msg.replaceAll(VFY_CODE_PLACEHOLDER, vfyCode);
		String sendMsg = getSendMsg(msg, params);
		ResultBo bo = sendSMS(merchantId,phone, getSendMsg(sendMsg, params));
		if (EnumResultCode.SUCCESS.getCode().equals(bo.getResult())) {
			bo.setResultObject(vfyCode);
		}
		return bo;
	}
	
	private String getSendMsg(String sendMsg, String... params) {
		for (int i = 0; i < params.length; i++) {
			sendMsg = sendMsg.replaceAll("{" + i + "}", params[i]);
		}
		return sendMsg;
	}
	
	private ResultBo sendMessage(String merchantId,String userMobile, String msg) {
		ResultBo bo = new ResultBo();
		if(StringUtils.isEmpty(userMobile)){
			LOGGER.error("手机号码为空!");
			bo.setResult(EnumResultCode.FAI.getCode());
			bo.setMsg("手机号码不能为空");
			return bo;
		}
		MessageSender sender = new MessageSender();
		sender.setDescription("");// 可为空
		Set<String> set = new HashSet<String>();
		set.add(userMobile);// 手机号 非空
		sender.setDestNumbers(set);
		//如果merchantId为空 则赋予默认值M10000
		merchantId = StringUtils.isEmpty(merchantId)?"M10000":merchantId;
		sender.setMerchantId(merchantId);// 商户ID 非空、固定值"M10000"
		sender.setMsgContent(msg);// 短信内容，非空、小于500字
		sender.setProductCode("100100");// 接入方业务编码 可为空
		String router = chooseSMSRouter(merchantId);
		sender.setChannelCode(router);// 渠道编码，非空、固定值
		LOGGER.info("手机号["+SensitiveInfoUtils.mobilePhone(userMobile)+"]发送短信入参:"+JSON.toJSONString(sender));
		MsgServiceResult<MsgState> msgServiceResult = messageService.sent(sender);
		LOGGER.info("手机号["+SensitiveInfoUtils.mobilePhone(userMobile)+"]发送短信出参:"+JSON.toJSONString(msgServiceResult));
		if (msgServiceResult.isSuccess()) {
			bo.setResult(EnumResultCode.SUCCESS.getCode());
		} else {
			LOGGER.error("手机号码[" + userMobile + "]:短信发送失败!");
			bo.setResult(EnumResultCode.FAI.getCode());
			bo.setMsg("短信发送失败");
		}
		return bo;
	}
	
	@Override
	public ResultBo checkVfyCode(String merchantId,String phone, String code) {
		ResultBo bo = new ResultBo();
		try {
			String key = EnumRedisKey.VERIFY_CODE_KEY.getKey() + phone;
			if (cache.isExist(key)) {
				String value = cache.get(key, String.class);
				if (value.equals(code)) {
					bo.setResult(EnumResultCode.SUCCESS.getCode());
					cache.delete(key);
				} else {
					bo.setResult(EnumResultCode.FAI.getCode());
					bo.setMsg("验证码错误");
				}
				bo.setResultObject(value);
			} else {
				bo.setResult(EnumResultCode.ERROR.getCode());
				bo.setMsg("验证已过期");
			}
		} catch (Exception e) {
			LOGGER.error(e.getMessage(), e);
			bo.setResult(EnumResultCode.ERROR.getCode());
			bo.setMsg("系统异常");
		}
		return bo;
	}

	/**
	 * @Description: 根据商户号选择短信服务渠道
	 * @param merchantId
	 * @return String 返回类型
	 * @author gaoxiang
	 * @date 2015-5-20 下午6:26:38
	 */
	private String chooseSMSRouter(String merchantId) {
		String router = EnumSMSRouter.MANDAO.getCode();
		//如果商户号 不为空 或者  在例外里 则走漫道的渠道
		if(!StringUtils.isEmpty(merchantId) && ArrayUtils.contains(MERCHANT_ID_LIST, merchantId)){
			router = EnumSMSRouter.WANGXIN.getCode();
		}
		return router;
	}
	
}
