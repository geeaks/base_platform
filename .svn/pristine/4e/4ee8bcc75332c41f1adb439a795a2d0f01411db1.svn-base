package com.ucf.customer.api.impl;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;

import com.alibaba.dubbo.common.utils.StringUtils;
import com.ucf.customer.api.IEnterprisebase_platformService;
import com.ucf.customer.api.bo.BaseResultBO;
import com.ucf.customer.api.bo.Enterprisebase_platformBO;
import com.ucf.customer.api.bo.Enterprisebase_platformQueryBO;
import com.ucf.customer.api.bo.base_platformCommonResult;
import com.ucf.customer.api.bo.OperatorBo;
import com.ucf.customer.dao.plugin.Page;
import com.ucf.customer.api.bo.PageRs;
import com.ucf.customer.api.enums.EnumRespStatusCode;
import com.ucf.customer.api.enums.EnumUserType;
import com.ucf.customer.bo.EnterpriseParamBO;
import com.ucf.customer.bo.ResultBo;
import com.ucf.customer.dao.UcfOrgDao;
import com.ucf.customer.pojo.UcfOperator;
import com.ucf.customer.pojo.UcfOrg;
import com.ucf.customer.pojo.UcfUserLoginApp;
import com.ucf.customer.security.Cryptos;
import com.ucf.customer.service.LoginService;
import com.ucf.customer.service.OperatorService;
import com.ucf.customer.service.UserInfoService;
import com.ucf.customer.utils.BeanUtilEx;
import com.ucf.customer.utils.Constants;
import com.ucf.customer.utils.enums.EnumResultCode;
import com.ucf.customer.ws.enums.EnumCertFrom;
import com.ucf.customer.ws.enums.EnumRegisterFrom;
import com.ucf.onlinepay.framework.common.util.StringUtil;
import com.ucf.platform.framework.core.log.UcfLogger;
import com.ucf.platform.framework.core.log.UcfLoggerFactory;

public class Enterprisebase_platformServiceImpl implements IEnterprisebase_platformService {
	
	private static final UcfLogger LOGGER = UcfLoggerFactory.getLogger(Enterprisebase_platformServiceImpl.class);
	
	@Autowired
	private UserInfoService  userInfoService;
	@Autowired
	private OperatorService  operatorService;
	@Autowired
	private LoginService loginService;
	@Autowired
	private UcfOrgDao ucfOrgDao;
	
	@Override
	public BaseResultBO registerbase_platform(Enterprisebase_platformBO paramBo) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public BaseResultBO updaterbase_platform(Enterprisebase_platformBO paramBo) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public BaseResultBO registerManagedbase_platform(Enterprisebase_platformBO enterprisebase_platformBo) {
		EnterpriseParamBO paramBo = new EnterpriseParamBO();
		paramBo.setAgentPersonPhone(enterprisebase_platformBo.getAgentPersonPhone());
		paramBo.setAgentPersonName(enterprisebase_platformBo.getAgentPersonName());
		paramBo.setEnterpriseFullName(enterprisebase_platformBo.getEnterpriseFullName());
		paramBo.setEnterpriseShortName(enterprisebase_platformBo.getEnterpriseShortName());
		paramBo.setBusinessLicense(enterprisebase_platformBo.getBusinessLicense());
		paramBo.setRegFrom(EnumRegisterFrom.P2P_FROM.getCode());
		paramBo.setSource(EnumCertFrom.WEB_FROM.getCode());
		paramBo.setType(EnterpriseParamBO.MANAGED_ACCOUNT);
		paramBo.setIsSignCustomer("N");
		if(StringUtil.isEmpty(enterprisebase_platformBo.getBankCardNo())){
			paramBo.setBindBankCard(false);
		}else{
			paramBo.setBindBankCard(true);
			paramBo.setBankCardName(enterprisebase_platformBo.getBankCardName());
			paramBo.setBankCardNo(enterprisebase_platformBo.getBankCardNo());
			paramBo.setBankCode(enterprisebase_platformBo.getBankCode());
			paramBo.setBankName(enterprisebase_platformBo.getBankName());
			paramBo.setProvinces(enterprisebase_platformBo.getProvinces());
			paramBo.setCity(enterprisebase_platformBo.getCity());
			paramBo.setIssuerName(enterprisebase_platformBo.getIssuerName());
			paramBo.setIssuer(enterprisebase_platformBo.getIssuer());
		}	

		paramBo.setMerchantId(enterprisebase_platformBo.getRefMerchant());
		paramBo.setOuterUserId(enterprisebase_platformBo.getRefUser());
		//用户注册
		ResultBo rsbo = userInfoService.register(paramBo);
		BaseResultBO baseResultBO = new BaseResultBO();
		baseResultBO.setRespCode(EnumRespStatusCode.SUCCESS.getCode());
		if(EnumResultCode.SUCCESS.getCode().equals(rsbo.getResult())){
			baseResultBO.setStatus(EnumRespStatusCode.SUCCESS.getCode());
			baseResultBO.setRespMsg("注册成功");
			baseResultBO.setUserId(rsbo.getResultObject().toString());
		}else if(EnumResultCode.EXIST.getCode().equals(rsbo.getResult())){
			baseResultBO.setStatus(EnumRespStatusCode.EXIST_USER.getCode());
			baseResultBO.setRespMsg(EnumRespStatusCode.EXIST_USER.getMsg());
		}else if(EnumResultCode.REPEAT.getCode().equals(rsbo.getResult())){
			baseResultBO.setStatus(EnumRespStatusCode.EXIST_MOBLEPHOE.getCode());
			baseResultBO.setRespMsg(EnumRespStatusCode.EXIST_MOBLEPHOE.getMsg());
		}else{
			baseResultBO.setStatus(EnumRespStatusCode.ERROR.getCode());
			baseResultBO.setRespMsg(rsbo.getMsg());
		}
		return baseResultBO;
	}

	@Override
	public BaseResultBO updaterManagedbase_platform(Enterprisebase_platformBO registerRequestBO) {
		// TODO Auto-generated method stub
		return null;
	}
	

	@Override
	public BaseResultBO registerMerchant(Enterprisebase_platformBO registerRequestBO) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public BaseResultBO updateMerchant(Enterprisebase_platformBO registerRequestBO) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public BaseResultBO audit(String UserId, String status) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public BaseResultBO addUcfOperator(OperatorBo ucfOperatorBo) {
		BaseResultBO baseResultBO = new BaseResultBO();
		baseResultBO.setRespCode(EnumRespStatusCode.SUCCESS.getCode());
		UcfOperator ucfOperator = new UcfOperator();
		try {
			BeanUtilEx.copyProperties(ucfOperator, ucfOperatorBo);
			baseResultBO.setStatus(EnumRespStatusCode.SUCCESS.getCode());
			String loginPwd = Cryptos.encrypt(ucfOperator.getLoginPwd(), ucfOperator.getUserId());
			ucfOperator.setLoginPwd(loginPwd);
			operatorService.insertUcfOperator(ucfOperator);
			//add by gaoxiang 生成用户登录信息
			final UcfUserLoginApp userLoginApp = new UcfUserLoginApp();
			userLoginApp.setLoginId(ucfOperatorBo.getEmail());
			userLoginApp.setUserId(ucfOperatorBo.getUserId());
			userLoginApp.setPhone(ucfOperatorBo.getCell());
			userLoginApp.setEmail(ucfOperatorBo.getEmail());
			userLoginApp.setFrozenState(Constants.FROZEN_NO);
			userLoginApp.setLoginPwd(loginPwd);
			userLoginApp.setUserType(EnumUserType.OPERATOR_TYPE.getCode());
			userLoginApp.setLoginType(Constants.LOGIN_TYPE_EMAIL);
			loginService.insertLoginAppInfo(userLoginApp);
		} catch (Exception e) {
			baseResultBO.setRespMsg(e.getMessage());
			baseResultBO.setRespCode(EnumRespStatusCode.ERROR.getCode());
		}
		return baseResultBO;
	}

	@Override
	public BaseResultBO modifyUcfOperator(OperatorBo ucfOperatorBo) {
		BaseResultBO baseResultBO = new BaseResultBO();
		baseResultBO.setRespCode(EnumRespStatusCode.SUCCESS.getCode());
		UcfOperator ucfOperator = new UcfOperator();
		try {
			BeanUtilEx.copyProperties(ucfOperator, ucfOperatorBo);
			baseResultBO.setStatus(EnumRespStatusCode.SUCCESS.getCode());
			//如果密码不为空则加密
			if(StringUtils.isNotEmpty(ucfOperator.getLoginPwd())){
				String password = Cryptos.encrypt(ucfOperator.getLoginPwd(), ucfOperator.getUserId());
				ucfOperator.setLoginPwd(password);
				//add by gaoxiang 修改操作员登录密码
				final UcfUserLoginApp userLoginApp = loginService.queryUserAppInfo(ucfOperator.getEmail());
				userLoginApp.setLoginPwd(password);
				loginService.updateUcfUserApp(userLoginApp);
			}
			operatorService.updateUcfOperator(ucfOperator);
		} catch (Exception e) {
			baseResultBO.setRespMsg(e.getMessage());
			baseResultBO.setRespCode(EnumRespStatusCode.ERROR.getCode());
		}
		return baseResultBO;
	}

	@Override
	public BaseResultBO modifyMerchantPayPwd(String userId,byte [] oldPwd,byte [] newPwd) {
		BaseResultBO baseResultBO = new BaseResultBO();
		try {
			if(StringUtils.isEmpty(userId)){
				baseResultBO.setRespCode(EnumRespStatusCode.SUCCESS.getCode());
				baseResultBO.setRespMsg("用户id不能为空");
				baseResultBO.setStatus(EnumRespStatusCode.ERROR.getCode());
			}else{
				ResultBo rsbo = userInfoService.checkPayPwd(userId, oldPwd);
				if(EnumResultCode.SUCCESS.getCode().equals(rsbo.getResult())){
					userInfoService.resetPayPwd(userId, newPwd);
					baseResultBO.setStatus(EnumRespStatusCode.SUCCESS.getCode());
					LOGGER.info("商户["+userId+"]修改支付密码成功！");
				}else{
					baseResultBO.setRespMsg("原支付密码错误");
					baseResultBO.setStatus(EnumRespStatusCode.ERROR.getCode());
				}
				baseResultBO.setRespCode(EnumRespStatusCode.SUCCESS.getCode());
			}
		} catch (Exception e) {
			baseResultBO.setRespCode(EnumRespStatusCode.ERROR.getCode());
			baseResultBO.setRespMsg("很抱歉，系统异常");
			baseResultBO.setStatus(EnumRespStatusCode.ERROR.getCode());
			LOGGER.error("修改商户支付密码系统异常",e);
		}
		return baseResultBO;
	}

	@Override
	public base_platformCommonResult<PageRs<Enterprisebase_platformBO>> findEnterprisebase_platformInfo(Enterprisebase_platformQueryBO enterprisebase_platformQueryBO) {
		try {
			UcfOrg ucfOrg = new UcfOrg();
			Page page = new Page();
			if(enterprisebase_platformQueryBO.getPageNo()==0){
				enterprisebase_platformQueryBO.setPageNo(1);
			}
			if(enterprisebase_platformQueryBO.getPageSize()==0){
				enterprisebase_platformQueryBO.setPageSize(1);
			}
			page.setCurrentPage(enterprisebase_platformQueryBO.getPageNo());
			page.setShowCount(enterprisebase_platformQueryBO.getPageSize());
			//设置查询分页信息
			ucfOrg.setPage(page);
			ucfOrg.setRealName(enterprisebase_platformQueryBO.getName());
			ucfOrg.setUserId(enterprisebase_platformQueryBO.getMerchantId());
			//分页查询
			List<UcfOrg> list = ucfOrgDao.listPageUcfOrg(ucfOrg);
			//转换结果集
			List<Enterprisebase_platformBO> convertList = this.convert(list);
			//返回结果
			PageRs<Enterprisebase_platformBO> returnPage = new PageRs<Enterprisebase_platformBO>();
			returnPage.setPageList(convertList);
			returnPage.setCount(ucfOrg.getPage().getTotalResult());
			returnPage.setPageNo(ucfOrg.getPage().getCurrentPage());
			returnPage.setPageSize(ucfOrg.getPage().getShowCount());
			return new base_platformCommonResult<PageRs<Enterprisebase_platformBO>>(EnumRespStatusCode.SUCCESS.getCode(), "", returnPage);
		} catch (Exception e) {
			LOGGER.error("商户查询系统异常",e);
			return new base_platformCommonResult<PageRs<Enterprisebase_platformBO>>(EnumRespStatusCode.ERROR.getCode(), "系统异常", null);
		}
	}

	/**
	 * @Description: 转换查询结果
	 * @param list
	 * @return List<Enterprisebase_platformBO> 返回类型
	 * @author gaoxiang
	 * @date 2015-1-4 上午10:28:43
	 */
	private List<Enterprisebase_platformBO> convert(List<UcfOrg> list) {
		List<Enterprisebase_platformBO> boList = new ArrayList<Enterprisebase_platformBO>();
		for(UcfOrg ucfOrg : list){
			Enterprisebase_platformBO enterprisebase_platformBO = new Enterprisebase_platformBO();
			//企业用户ID
			enterprisebase_platformBO.setUserId(ucfOrg.getUserId());
			//代理人名称
			enterprisebase_platformBO.setAgentPersonName(ucfOrg.getAgentName());
			//代理人身份证号码
			enterprisebase_platformBO.setAgentPersonNo(ucfOrg.getAgentCard());
			//代理人手机号码
			enterprisebase_platformBO.setAgentPersonPhone(ucfOrg.getPhone());
			//代理人邮箱
//			enterprisebase_platformBO.setAgentPersonEmail(ucfOrg.getEmail());
			//邮箱
			enterprisebase_platformBO.setEmail(ucfOrg.getEmail());
			//企业网址
			enterprisebase_platformBO.setEnterpriseURL(ucfOrg.getMallUrl());
			//企业全称
			enterprisebase_platformBO.setEnterpriseFullName(ucfOrg.getCompanyFullName());
			//企业简称
			enterprisebase_platformBO.setEnterpriseShortName(ucfOrg.getCompanyName());
			//营业执照号
//			enterprisebase_platformBO.setBusinessLicense(ucfOrg.get);
			//证件到期时间
			enterprisebase_platformBO.setEndDate(new SimpleDateFormat("yyyy-MM-dd").format(ucfOrg.getCharetExpire()));
			//法人姓名
			enterprisebase_platformBO.setLegalPersonName(ucfOrg.getLegalPerson());
			//法人身份证号
			enterprisebase_platformBO.setLegalPersonNo(ucfOrg.getLegalIdentity());
			//企业地址
			enterprisebase_platformBO.setEnterpriseAddress(ucfOrg.getCompanyAdd());
			//邮政编码
			enterprisebase_platformBO.setZipCode(ucfOrg.getPost());
			//联系电话
			enterprisebase_platformBO.setEnterprisePhone(ucfOrg.getCell());
			//传真
			enterprisebase_platformBO.setFax(ucfOrg.getFax());
			//企业账户开户行名称
			enterprisebase_platformBO.setBankName(ucfOrg.getSettleBankName());
			//开户行Code
			enterprisebase_platformBO.setBankCode(ucfOrg.getSettleBankCode());
			//对公账号
			enterprisebase_platformBO.setBankCardNo(ucfOrg.getSettleCardNo());
			//开户行省份
			enterprisebase_platformBO.setProvinces(ucfOrg.getProvince());
			//开户行城市
			enterprisebase_platformBO.setCity(ucfOrg.getCity());
			//开户行支行名称
			enterprisebase_platformBO.setIssuerName(ucfOrg.getBranchName());
//			//联行号
//			enterprisebase_platformBO.setIssuer(ucfOrg);
//			//账户名称
//			enterprisebase_platformBO.setBankCardName(ucfOrg);
			//营业执照副本
			enterprisebase_platformBO.setLicenseCopy(ucfOrg.getLicenseCopy());
			//组织机构代码证
			enterprisebase_platformBO.setOrgCertificate(ucfOrg.getOrgCertificate());
			//税务登记证明
			enterprisebase_platformBO.setTaxCertificate(ucfOrg.getTaxCertificate());
			//法人身份证复印件
			enterprisebase_platformBO.setLegalIdentityCopy(ucfOrg.getLegalIdentityCop());
			
			boList.add(enterprisebase_platformBO);
		}
		return boList;
	}
	
}
