package com.ucf.customer.action;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.ucf.customer.pojo.UcfCard;
import com.ucf.customer.pojo.UcfQuestion;
import com.ucf.customer.pojo.UcfUser;
import com.ucf.customer.pojo.UcfUserLoginApp;
import com.ucf.customer.service.LoginService;
import com.ucf.customer.service.UserInfoService;
import com.ucf.customer.service.UserService;
import com.ucf.customer.utils.MobileUtil;
import com.ucf.customer.utils.enums.EnumSessionKey;
import com.ucf.onlinepay.framework.common.util.StringUtil;
import com.ucf.platform.framework.core.log.UcfLogger;
import com.ucf.platform.framework.core.log.UcfLoggerFactory;
import com.ucf.platform.framework.core.util.SensitiveInfoUtils;
/**
 * 
 * Description: 登录密码找回修改
 * All Rights Reserved.
 * @version 1.0  2014-5-19 下午2:29:01  by xuhao@ucfgroup.com创建
 */
@Controller
@RequestMapping({ "/lgnpwd" })
public class LoginPasswordAction extends BaseAction{
	private static UcfLogger LOGGER = UcfLoggerFactory
			.getLogger(LoginPasswordAction.class);
	//用户是否通过安全验证
	private String isUserPassSecure = "IS_USER_PASS_SECURE";
	
	@Autowired
	private UserService userService;
	@Autowired
	private LoginService loginService;
	
	@Autowired
	private UserInfoService userInfoService;
	
	@RequestMapping({ "/findPwd" })
	public String findPwdByPhone(HttpServletRequest request,HttpServletResponse response,Model model) {
		HttpSession session = request.getSession();
		request.setAttribute("staticMemberPath", session.getAttribute("staticMemberPath"));
		session.invalidate();
		return "login/findPwdByPhone";
	}
	
	@RequestMapping({ "/findPwdByPhonePre.htm" })
	public String findPwdByPhonePre(@RequestParam("userNo") String userNo,@RequestParam("checkCode") String checkCode,
			HttpServletRequest request,
			HttpServletResponse response,Model model) throws Exception {
		LOGGER.debug("findPwdByPhonePre  method  !");
		HttpSession session = request.getSession();
		//检验图片验证码输入是否正确
		String idCode = (String) session.getAttribute("idcode");
		// 验证码校验
		if (!idCode.equalsIgnoreCase(checkCode.trim())) {
			model.addAttribute("msg", "验证码输入错误!");
			return "login/findPwdByPhone";
		}
		//检验用户是否存在
		UcfUser user=this.loginService.queryUserInfoByPhone(userNo);
		UcfUserLoginApp userApp=loginService.queryUserAppInfo(userNo);
		if(user==null || userApp==null){
			model.addAttribute("msg", "该用户不存在，请先注册!");
			return "login/findPwdByPhone";
		}
		String cell =userApp.getPhone();
		UcfQuestion question = new UcfQuestion();
		List<UcfQuestion> list=this.loginService.queryUcfQuestion(user.getUserId());
		if(list!=null && list.size()>0){
			question = list.get(0);
		}else {
			model.addAttribute("msg", "该用户未设置安保问题!");
			return "login/findPwdByPhone";
		}
		
		model.addAttribute("quesInfo", question.getQuesInfo());
		String loginId =userApp.getLoginId();
		session.setAttribute("answer", question.getQuesRes());
		session.setAttribute("user", user);
		session.setAttribute("userApp", userApp);
		//add by gaoxiang 发送短信需要从 session里边取
		session.setAttribute(EnumSessionKey.SMS_PHONE.getKey(),loginId);
		model.addAttribute("cell", cell);
		model.addAttribute("loginId", loginId);
		model.addAttribute("mobilePhone", MobileUtil.mobileNoEncrypt(cell)); 
		model.addAttribute("userName", user.getRealName());
		return "login/findPwdByPhonePro";
	}
	
	/**
	 *找回登录密码 
	 * @param vercode
	 * @param userNo
	 * @param res
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 * @throws Exception
	 */
	@RequestMapping({ "/findPwdByPhone.htm" })
	public String findPwdByPhone(@RequestParam("vercode") String vercode,
			@RequestParam("userNo") String userNo,
			@RequestParam("res") String res,
			@RequestParam("quesInfo") String quesInfo,
			HttpServletRequest request, HttpServletResponse response,Model model) throws Exception {
		
		UcfUser user = loginService.queryUserInfoByPhone(userNo);
		UcfUserLoginApp userApp = loginService.queryUserAppInfo(userNo);
		String cell = userApp.getPhone();
		model.addAttribute("cell", cell);
		model.addAttribute("loginId", userApp.getLoginId());
		model.addAttribute("mobilePhone", MobileUtil.mobileNoEncrypt(cell)); 
		model.addAttribute("userName", user.getRealName());
		if(!checkmMbileCode(request,response,vercode,cell)){
			model.addAttribute("msg", "验证码输入错误");
			return "login/findPwdByPhonePro";
		}
		
		if (StringUtil.isEmpty(res) || StringUtil.isEmpty(quesInfo)) {
			model.addAttribute("msg", "安全问题和答案都不能为空！");
			return "login/findPwdByPhonePro";
		}
		
		if(!res.equals(user.getPinAnsw()) || !quesInfo.equals(user.getPinQues())){
			model.addAttribute("msg", "安全问题回答错误");
			return "login/findPwdByPhonePro";
		}
		//该用户是否通过安全验证 放入session
		HttpSession session = request.getSession();
		session.setAttribute(isUserPassSecure+userNo, "pass");
		return "login/pwdTelMod";
	}
	
	/**
	 * 修改登录密码
	 * @param pwd
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 * @throws Exception
	 */
	@RequestMapping({ "/pwdModTelSuc.htm" })
	public String pwdModTelSuc(@RequestParam("pwd") String pwd,
			HttpServletRequest request, HttpServletResponse response,Model model) throws Exception {
		//判断该用户是否通过安全验证
		HttpSession session = request.getSession();
		UcfUser user = (UcfUser) session.getAttribute("user");
		Object flag = session.getAttribute(isUserPassSecure+user.getCell());
		if(flag==null || !"pass".equals(flag)){
			model.addAttribute("msg", "未通过安全验证，非法访问!");
			return "login/error";
		}
		
		String userId = user.getUserId();
		UcfUserLoginApp userApp = new UcfUserLoginApp();
		userApp.setUserId(userId);
		userApp=loginService.queryUserLoginApp(userApp);
		
		if(userApp!=null){
			model.addAttribute("loginId", userApp.getLoginId());
			if( userInfoService.isUserPwdMatch(userId, pwd,userApp.getLoginPwd())){
				model.addAttribute("mobilePhone", MobileUtil.mobileNoEncrypt(user.getCell()));
				model.addAttribute("msg", "登录密码不可与原密码相同!!");
				return "login/pwdTelMod";
			}
		}else{
			model.addAttribute("mobilePhone", MobileUtil.mobileNoEncrypt(user.getCell()));
			model.addAttribute("msg", "用户登录信息有误!");
			return "login/pwdTelMod";
		}
		UcfCard  card = loginService.queryUcfCardByUserId(userId);
		if (card!= null) {
			if(userInfoService.isUserPwdMatch(userId, pwd,card.getPaymentPassword())){
				model.addAttribute("mobilePhone", MobileUtil.mobileNoEncrypt(user.getCell()));
				model.addAttribute("msg", "登录密码不可与支付密码相同!");
				return "login/pwdTelMod";
			}
		}
		userInfoService.resetLgnPwd(userId, pwd.getBytes());
		LOGGER.info("会员["+SensitiveInfoUtils.chineseName(user.getRealName())+","+user.getUserId()+"]找回登录密码成功!");
		model.addAttribute("userName", user.getRealName());
		return "login/pwdModSuc";
	}
	
}
