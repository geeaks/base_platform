package com.ucf.customer.service;

import java.util.List;
import java.util.Map;

import org.springframework.ui.Model;

import com.ucf.customer.pojo.UcfBankCard;
import com.ucf.customer.pojo.UcfUser;
import com.ucf.customer.pojo.UcfUserLoginApp;
import com.ucf.customer.utils.enums.EnumPasswordType;

/**
 * 
*    
* 项目名称：member  <br>
* 类名称：UserService      <br>
* 类描述：用户内部使用服务类   				  <br>
* 创建人：李文静 				  <br>
* 创建时间：2014-5-6 下午5:48:32  <br>   
* 修改人：李文静 				  <br>
* 修改时间：2014-5-6 下午5:48:32  <br>  	
* 修改备注：   				  <br>
* @version    
*
 */
public interface UserService {
	
	/**
	 * 通过会员id查询资金
	 * @param userId
	 * @return
	 */
	@SuppressWarnings("rawtypes")
	public Map queryAccountByUserId(String userId);
	
	/**
	 * 判断会员支付密码
	 * @param model
	 * @param userId
	 * @return
	 */
	public boolean checkPWD(Model model, String userId, String payPasswd, EnumPasswordType enumPasswordType);
	
	/**
	 * 查询用户绑定的银行卡类别
	 * @param merchantId
	 * @param userId
	 * @return
	 */
	public List<UcfBankCard> queryUserBankInfos(String merchantId,String userId);
	
	/**
	 * 查询用户绑定的银行卡，状态为S
	 * @param merchantId
	 * @param userId
	 * @param status
	 * @return
	 */
	public List<UcfBankCard> queryUserBankInfos(String merchantId,String userId,String status);
	
	/**
	 * 查询用户绑定的银行卡类别
	 * @param id
	 * @return
	 */
	public UcfBankCard queryUserBankInfoById(String id);

	/**
	 * 
	 * @param userId
	 * @return
	 */
	public UcfUser queryUserInfoById(String userId);
	
	/**
	 * 查询用户信息
	 * @param merchantId
	 * @param refUserId
	 * @return
	 */
	public UcfUser findUserInfo(String merchantId,String refUserId)  throws Exception;
	
	/**
	 * 查询用户信息
	 * @param merchantId
	 * @param cell
	 * @return
	 */
	public UcfUser findUserInfoByCell(String merchantId,String cell)  throws Exception;
	
	/**
	 * 判断是否能够修改用户的支付密码(p2pO)
	 * @param bankId
	 * @param userId
	 * @param realName
	 * @param idNo
	 * @param bankNo
	 * @param cellNo 
	 * @return
	 */
	public boolean canFindPayPwd(String bankId,String userId,String realName,String idNo,String bankNo, String cellNo);
	
	/**
	* @Title: verifyIdentity
	* @Description: 核实 有卡和无卡找回支付密码的 身份
	* @author gaoxiang
	* @param bankId
	* @param userId
	* @param realName
	* @param idNo
	* @param bankNo
	* @param cellNo
	* @return    设定文件
	* @return boolean    返回类型
	*/ 
	public boolean verifyIdentity(String bankId,String userId,String realName,String idNo,String bankNo, String cellNo);
	
	
	public UcfUserLoginApp queryUcfUserLoginApp(String loginName)
			throws Exception;

	public void insertUserInfo(UcfUser userInfo) throws Exception ;
	
	public void insertLoginAppInfo(UcfUserLoginApp ucfUserLoginApp)
			throws Exception;
	
	/**
	 * @Description: 用户id生成
	 * @return
	 * @throws Exception
	 * @return String 返回类型
	 * @author gaoxiang
	 * @date 2014年9月23日 下午5:10:57
	 */
	public String queryUcfUserId() throws Exception;

	/**
	 * @Description: 客户ID生成
	 * @return
	 * @throws Exception
	 * @return String 返回类型
	 * @author gaoxiang
	 * @date 2014年9月23日 下午5:11:09
	 */
	public String queryUcfCustomerId() throws Exception;

	/**
	 * @Description: 获取企业会员用户编号
	 * @throws Exception
	 * @return String 返回类型
	 * @author gaoxiang
	 * @date 2014年9月23日 下午5:11:23
	 */
	public String getEnterpriseMemberNO() throws Exception;
	
	public String monitorValidConnent() throws Exception;
	
	/**
	 * @Description: 查询匿名用户
	 * @throws Exception
	 * @return List<UcfUser> 返回类型
	 * @author gaoxiang
	 * @date 2015-1-12 下午12:55:08
	 */
	public List<UcfUser> findAnonymousUser() throws Exception;
	
	/**
	 * @Description: 清空指定用户的缓存
	 * @param userId
	 * @throws Exception
	 * @return void 返回类型
	 * @author gaoxiang
	 * @date 2015-4-8 下午3:13:14
	 */
	void refreshUserInfo(String userId) throws Exception;
	
	/**
	 * @Description: 分页查询用户信息
	 * @param user
	 * @throws Exception
	 * @return List<UcfUser> 返回类型
	 * @author gaoxiang
	 * @date 2015-4-8 下午6:37:43
	 */
	public List<UcfUser> listPageUcfUser(UcfUser user) throws Exception;
	
}
