package com.ucf.customer.ws.service.impl;

import org.springframework.beans.factory.annotation.Autowired;

import com.alibaba.dubbo.config.annotation.Service;
import com.alibaba.fastjson.JSON;
import com.ucf.customer.api.enums.EnumAuthType;
import com.ucf.customer.api.enums.EnumRespStatusCode;
import com.ucf.customer.bo.ResultBo;
import com.ucf.customer.service.out.PaymentService;
import com.ucf.customer.ws.bo.BaseBO;
import com.ucf.customer.ws.bo.IDCardBo;
import com.ucf.customer.ws.enums.Enumbase_platformCode;
import com.ucf.customer.ws.service.UserRealNameService;
import com.ucf.platform.framework.core.log.UcfLogger;
import com.ucf.platform.framework.core.log.UcfLoggerFactory;
import com.ucf.platform.framework.core.util.SensitiveInfoUtils;
import com.ucf.platform.framework.log.LoggerLevel;
import com.ucf.platform.framework.log.annotation.DigestLogAnnotated;

@Service
public class UserRealNameServiceImpl implements UserRealNameService {

	private static final UcfLogger LOGGER = UcfLoggerFactory.getLogger(UserRealNameServiceImpl.class);

	public final static String VALIDATE_STATUS_SUCCESS = "00";// 执行成功
	public final static String VALIDATE_STATUS_FAILE = "01";// 认证执行失败
	public final static String VALIDATE_STATUS_DEALING = "99";// 认证处理中
	public final static String VALIDATE_CODE_VALIDATE = "00";// ‘00’ 成功，
	public final static String VALIDATE_CODE_INVALIDATE = "01";// '01认证失败'
	public final static String VALIDATE_CODE_CONN_ERROR = "02";// ‘02’ 调用 失败

	@Autowired
	private PaymentService paymentService;

	@Override
	@DigestLogAnnotated(digestIdentificationCode = "1006", logFileName = "DEFAULT.DIG", loggerLevel = LoggerLevel.INFO, isSensitiveInfo=true)
	public BaseBO validateRealName(String merchantId, String iDCardNumber,
			String realName) {
		LOGGER.info("validateRealName:" + "merchantId-" + merchantId + " iDCardNumber-" + SensitiveInfoUtils.idCardNum(iDCardNumber) + " realName-" + SensitiveInfoUtils.chineseName(realName));
		ResultBo bo = paymentService.userAuth(merchantId,EnumAuthType.NAME_CERT.getCode(), realName, 
				iDCardNumber, null,null,null,null,null,null);
		
		BaseBO rsbo = new BaseBO();
		if(EnumRespStatusCode.SUCCESS.getCode().equals(bo.getResult())){
			rsbo.setStatus(Enumbase_platformCode.SUCCESS.getCode());
			rsbo.setRespCode(Enumbase_platformCode.SUCCESS.getCode());
			rsbo.setRespMsg(Enumbase_platformCode.SUCCESS.getMsgS());
		}else {
			rsbo.setStatus(Enumbase_platformCode.ERROR.getCode());
			rsbo.setRespCode(Enumbase_platformCode.ERROR.getCode());
			rsbo.setRespMsg("该身份证未通过实名认证");
		}
		return rsbo;
	}

	/**
	 * 获取身份证及相关信息 参数：idCardNumber realName必须
	 * 
	 * @author yuzengjia
	 * @date 2014-5-21 上午11:32:49
	 * @param cardInfo
	 * @return
	 */
	@DigestLogAnnotated(digestIdentificationCode = "1006", logFileName = "DEFAULT.DIG", loggerLevel = LoggerLevel.INFO, isSensitiveInfo=true)
	public IDCardBo getIDCardInfoByCardParam(IDCardBo cardInfo) {
		LOGGER.info("getIDCardInfoByCardParam:" + SensitiveInfoUtils.getJson(cardInfo));
		ResultBo bo = paymentService.userAuth(cardInfo.getMerchantId(),EnumAuthType.NAME_CERT.getCode(), cardInfo.getRealName(), 
				cardInfo.getCardNo(), null,null,null,null,null,null);
		if(EnumRespStatusCode.SUCCESS.getCode().equals(bo.getResult())){
			cardInfo.setRespMsg(bo.getMsg());
			cardInfo.setStatus(VALIDATE_STATUS_SUCCESS);
			cardInfo.setRespCode(VALIDATE_CODE_VALIDATE);
			return cardInfo;
		}else {
			cardInfo.setStatus(VALIDATE_STATUS_FAILE);
			cardInfo.setRespCode(VALIDATE_CODE_CONN_ERROR);
			cardInfo.setRespMsg("认证服务调用失败！");
			LOGGER.info("认证服务调用失败，cardNumber:" + SensitiveInfoUtils.idCardNum(cardInfo.getCardNo())
					+ "　　realName:" + SensitiveInfoUtils.chineseName(cardInfo.getRealName()));
			return cardInfo;
		}		
	}

}
